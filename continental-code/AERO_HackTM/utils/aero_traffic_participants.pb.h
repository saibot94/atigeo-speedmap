// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aero_traffic_participants.proto

#ifndef PROTOBUF_aero_5ftraffic_5fparticipants_2eproto__INCLUDED
#define PROTOBUF_aero_5ftraffic_5fparticipants_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "aero_type.pb.h"
// @@protoc_insertion_point(includes)

namespace aero_trafpartic_protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_aero_5ftraffic_5fparticipants_2eproto();
void protobuf_AssignDesc_aero_5ftraffic_5fparticipants_2eproto();
void protobuf_ShutdownFile_aero_5ftraffic_5fparticipants_2eproto();

class AERO_t_TrafPartic_Classification_Proto;
class AERO_t_TrafParticAdminProp_Proto;
class AERO_t_TrafPartic_ReferencePoint_Proto;
class AERO_t_TrafParticGeomProp_Proto;
class AERO_t_TrafParticDynProp_Proto;
class AERO_t_TrafParticSupportProp_Proto;
class AERO_t_TrafParticDebugProp_Proto;
class AERO_t_TrafPartic_Proto;
class AERO_t_TrafParticList_Proto;

enum AERO_t_TrafPartic_State_Proto {
  AERO_TP_STATE_NA_PROTO = 0,
  AERO_TP_STATE_MOVING_PROTO = 1,
  AERO_TP_STATE_ONCOMING_PROTO = 2,
  AERO_TP_STATE_ALONG_PROTO = 3,
  AERO_TP_STATE_STATIONARY_PROTO = 4,
  AERO_TP_STATE_CUTINFL_PROTO = 5,
  AERO_TP_STATE_CUTINFR_PROTO = 6,
  AERO_TP_STATE_STOPPED_PROTO = 7
};
bool AERO_t_TrafPartic_State_Proto_IsValid(int value);
const AERO_t_TrafPartic_State_Proto AERO_t_TrafPartic_State_Proto_MIN = AERO_TP_STATE_NA_PROTO;
const AERO_t_TrafPartic_State_Proto AERO_t_TrafPartic_State_Proto_MAX = AERO_TP_STATE_STOPPED_PROTO;
const int AERO_t_TrafPartic_State_Proto_ARRAYSIZE = AERO_t_TrafPartic_State_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_TrafPartic_State_Proto_descriptor();
inline const ::std::string& AERO_t_TrafPartic_State_Proto_Name(AERO_t_TrafPartic_State_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_TrafPartic_State_Proto_descriptor(), value);
}
inline bool AERO_t_TrafPartic_State_Proto_Parse(
    const ::std::string& name, AERO_t_TrafPartic_State_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_TrafPartic_State_Proto>(
    AERO_t_TrafPartic_State_Proto_descriptor(), name, value);
}
enum AERO_t_TrafPartic_Class_Proto {
  AERO_TP_CLASS_UNKNOWN_PROTO = 0,
  AERO_TP_CLASS_VEHICLE_PROTO = 1,
  AERO_TP_CLASS_ANIMAL_PROTO = 2,
  AERO_TP_CLASS_VULNERABLEROADUSER_PROTO = 3,
  AERO_TP_CLASS_OTHER_PROTO = 4,
  AERO_TP_CLASS_GHOST_PROTO = 5,
  AERO_TP_CLASS_CAR_PROTO = 11,
  AERO_TP_CLASS_COMMERCIAL_VEH_PROTO = 12,
  AERO_TP_CLASS_BUS_PROTO = 13,
  AERO_TP_CLASS_EMERGENCY_VEH_PROTO = 14,
  AERO_TP_CLASS_VEHICLE_OTHER_PROTO = 15,
  AERO_TP_CLASS_ANIMAL_OTHER_PROTO = 16,
  AERO_TP_CLASS_BICYCLE_PROTO = 17,
  AERO_TP_CLASS_MOTORCYCLE_PROTO = 18,
  AERO_TP_CLASS_PEDESTRIAN_PROTO = 19,
  AERO_TP_CLASS_VULNERABLEROADUSERS_OTHER_PROTO = 20,
  AERO_TP_CLASS_LEAVES_PROTO = 21
};
bool AERO_t_TrafPartic_Class_Proto_IsValid(int value);
const AERO_t_TrafPartic_Class_Proto AERO_t_TrafPartic_Class_Proto_MIN = AERO_TP_CLASS_UNKNOWN_PROTO;
const AERO_t_TrafPartic_Class_Proto AERO_t_TrafPartic_Class_Proto_MAX = AERO_TP_CLASS_LEAVES_PROTO;
const int AERO_t_TrafPartic_Class_Proto_ARRAYSIZE = AERO_t_TrafPartic_Class_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_TrafPartic_Class_Proto_descriptor();
inline const ::std::string& AERO_t_TrafPartic_Class_Proto_Name(AERO_t_TrafPartic_Class_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_TrafPartic_Class_Proto_descriptor(), value);
}
inline bool AERO_t_TrafPartic_Class_Proto_Parse(
    const ::std::string& name, AERO_t_TrafPartic_Class_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_TrafPartic_Class_Proto>(
    AERO_t_TrafPartic_Class_Proto_descriptor(), name, value);
}
enum AERO_t_TrafPartic_Track_Status_Proto {
  AERO_TP_TRACK_STATUS_NA_PROTO = 0,
  AERO_TP_TRACK_STATUS_SENSED_PROTO = 1,
  AERO_TP_TRACK_STATUS_FUSED_PROTO = 2,
  AERO_TP_TRACK_STATUS_PREDICTED_PROTO = 3
};
bool AERO_t_TrafPartic_Track_Status_Proto_IsValid(int value);
const AERO_t_TrafPartic_Track_Status_Proto AERO_t_TrafPartic_Track_Status_Proto_MIN = AERO_TP_TRACK_STATUS_NA_PROTO;
const AERO_t_TrafPartic_Track_Status_Proto AERO_t_TrafPartic_Track_Status_Proto_MAX = AERO_TP_TRACK_STATUS_PREDICTED_PROTO;
const int AERO_t_TrafPartic_Track_Status_Proto_ARRAYSIZE = AERO_t_TrafPartic_Track_Status_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_TrafPartic_Track_Status_Proto_descriptor();
inline const ::std::string& AERO_t_TrafPartic_Track_Status_Proto_Name(AERO_t_TrafPartic_Track_Status_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_TrafPartic_Track_Status_Proto_descriptor(), value);
}
inline bool AERO_t_TrafPartic_Track_Status_Proto_Parse(
    const ::std::string& name, AERO_t_TrafPartic_Track_Status_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_TrafPartic_Track_Status_Proto>(
    AERO_t_TrafPartic_Track_Status_Proto_descriptor(), name, value);
}
enum AERO_t_TrafPartic_Reference_Proto {
  AERO_TP_REFERENCE_FRONTLEFT_PROTO = 0,
  AERO_TP_REFERENCE_FRONTCENTER_PROTO = 1,
  AERO_TP_REFERENCE_FRONTRIGHT_PROTO = 2,
  AERO_TP_REFERENCE_CENTERLEFT_PROTO = 3,
  AERO_TP_REFERENCE_CENTER_PROTO = 4,
  AERO_TP_REFERENCE_CENTERRIGHT_PROTO = 5,
  AERO_TP_REFERENCE_REARLEFT_PROTO = 6,
  AERO_TP_REFERENCE_REARCENTER_PROTO = 7,
  AERO_TP_REFERENCE_REARRIGHT_PROTO = 8
};
bool AERO_t_TrafPartic_Reference_Proto_IsValid(int value);
const AERO_t_TrafPartic_Reference_Proto AERO_t_TrafPartic_Reference_Proto_MIN = AERO_TP_REFERENCE_FRONTLEFT_PROTO;
const AERO_t_TrafPartic_Reference_Proto AERO_t_TrafPartic_Reference_Proto_MAX = AERO_TP_REFERENCE_REARRIGHT_PROTO;
const int AERO_t_TrafPartic_Reference_Proto_ARRAYSIZE = AERO_t_TrafPartic_Reference_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_TrafPartic_Reference_Proto_descriptor();
inline const ::std::string& AERO_t_TrafPartic_Reference_Proto_Name(AERO_t_TrafPartic_Reference_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_TrafPartic_Reference_Proto_descriptor(), value);
}
inline bool AERO_t_TrafPartic_Reference_Proto_Parse(
    const ::std::string& name, AERO_t_TrafPartic_Reference_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_TrafPartic_Reference_Proto>(
    AERO_t_TrafPartic_Reference_Proto_descriptor(), name, value);
}
enum AERO_t_TrafPartic_SFlag_Proto {
  AERO_TP_SFLAG_NA_PROTO = 0,
  AERO_TP_SFLAG_BRAKING_LIGHT_PROTO = 1,
  AERO_TP_SFLAG_INDICATOR_LEFT_PROTO = 2,
  AERO_TP_SFLAG_INDICATOR_RIGHT_PROTO = 4,
  AERO_TP_SFLAG_WARNING_LIGHT_PROTO = 8,
  AERO_TP_SFLAG_SIREN_PROTO = 16,
  AERO_TP_SFLAG_ACC_PROTO = 32,
  AERO_TP_SFLAG_EBA_PROTO = 64,
  AERO_TP_SFLAG_BSD_PROTO = 128
};
bool AERO_t_TrafPartic_SFlag_Proto_IsValid(int value);
const AERO_t_TrafPartic_SFlag_Proto AERO_t_TrafPartic_SFlag_Proto_MIN = AERO_TP_SFLAG_NA_PROTO;
const AERO_t_TrafPartic_SFlag_Proto AERO_t_TrafPartic_SFlag_Proto_MAX = AERO_TP_SFLAG_BSD_PROTO;
const int AERO_t_TrafPartic_SFlag_Proto_ARRAYSIZE = AERO_t_TrafPartic_SFlag_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_TrafPartic_SFlag_Proto_descriptor();
inline const ::std::string& AERO_t_TrafPartic_SFlag_Proto_Name(AERO_t_TrafPartic_SFlag_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_TrafPartic_SFlag_Proto_descriptor(), value);
}
inline bool AERO_t_TrafPartic_SFlag_Proto_Parse(
    const ::std::string& name, AERO_t_TrafPartic_SFlag_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_TrafPartic_SFlag_Proto>(
    AERO_t_TrafPartic_SFlag_Proto_descriptor(), name, value);
}
// ===================================================================

class AERO_t_TrafPartic_Classification_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_TrafPartic_Classification_Proto();
  virtual ~AERO_t_TrafPartic_Classification_Proto();

  AERO_t_TrafPartic_Classification_Proto(const AERO_t_TrafPartic_Classification_Proto& from);

  inline AERO_t_TrafPartic_Classification_Proto& operator=(const AERO_t_TrafPartic_Classification_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_TrafPartic_Classification_Proto& default_instance();

  void Swap(AERO_t_TrafPartic_Classification_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_TrafPartic_Classification_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_TrafPartic_Classification_Proto& from);
  void MergeFrom(const AERO_t_TrafPartic_Classification_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional uint32 u_ValidClasses = 2;
  inline bool has_u_validclasses() const;
  inline void clear_u_validclasses();
  static const int kUValidClassesFieldNumber = 2;
  inline ::google::protobuf::uint32 u_validclasses() const;
  inline void set_u_validclasses(::google::protobuf::uint32 value);

  // repeated .aero_trafpartic_protobuf.AERO_t_TrafPartic_Class_Proto e_Class = 3;
  inline int e_class_size() const;
  inline void clear_e_class();
  static const int kEClassFieldNumber = 3;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto e_class(int index) const;
  inline void set_e_class(int index, ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto value);
  inline void add_e_class(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto value);
  inline const ::google::protobuf::RepeatedField<int>& e_class() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_e_class();

  // repeated .aero_trafpartic_protobuf.AERO_t_TrafPartic_Class_Proto e_ParentClass = 4;
  inline int e_parentclass_size() const;
  inline void clear_e_parentclass();
  static const int kEParentClassFieldNumber = 4;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto e_parentclass(int index) const;
  inline void set_e_parentclass(int index, ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto value);
  inline void add_e_parentclass(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto value);
  inline const ::google::protobuf::RepeatedField<int>& e_parentclass() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_e_parentclass();

  // repeated float f_ClassProb = 5;
  inline int f_classprob_size() const;
  inline void clear_f_classprob();
  static const int kFClassProbFieldNumber = 5;
  inline float f_classprob(int index) const;
  inline void set_f_classprob(int index, float value);
  inline void add_f_classprob(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      f_classprob() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_f_classprob();

  // @@protoc_insertion_point(class_scope:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_u_validclasses();
  inline void clear_has_u_validclasses();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  ::google::protobuf::uint32 u_validclasses_;
  ::google::protobuf::RepeatedField<int> e_class_;
  ::google::protobuf::RepeatedField<int> e_parentclass_;
  ::google::protobuf::RepeatedField< float > f_classprob_;
  friend void  protobuf_AddDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_AssignDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftraffic_5fparticipants_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_TrafPartic_Classification_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_TrafParticAdminProp_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_TrafParticAdminProp_Proto();
  virtual ~AERO_t_TrafParticAdminProp_Proto();

  AERO_t_TrafParticAdminProp_Proto(const AERO_t_TrafParticAdminProp_Proto& from);

  inline AERO_t_TrafParticAdminProp_Proto& operator=(const AERO_t_TrafParticAdminProp_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_TrafParticAdminProp_Proto& default_instance();

  void Swap(AERO_t_TrafParticAdminProp_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_TrafParticAdminProp_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_TrafParticAdminProp_Proto& from);
  void MergeFrom(const AERO_t_TrafParticAdminProp_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional float f_Probability = 3;
  inline bool has_f_probability() const;
  inline void clear_f_probability();
  static const int kFProbabilityFieldNumber = 3;
  inline float f_probability() const;
  inline void set_f_probability(float value);

  // optional .aero_trafpartic_protobuf.AERO_t_TrafPartic_State_Proto e_State = 4;
  inline bool has_e_state() const;
  inline void clear_e_state();
  static const int kEStateFieldNumber = 4;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_State_Proto e_state() const;
  inline void set_e_state(::aero_trafpartic_protobuf::AERO_t_TrafPartic_State_Proto value);

  // optional .aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto Classification = 5;
  inline bool has_classification() const;
  inline void clear_classification();
  static const int kClassificationFieldNumber = 5;
  inline const ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Classification_Proto& classification() const;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Classification_Proto* mutable_classification();
  inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Classification_Proto* release_classification();
  inline void set_allocated_classification(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Classification_Proto* classification);

  // optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto s_LifeTime = 7;
  inline bool has_s_lifetime() const;
  inline void clear_s_lifetime();
  static const int kSLifeTimeFieldNumber = 7;
  inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& s_lifetime() const;
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* mutable_s_lifetime();
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* release_s_lifetime();
  inline void set_allocated_s_lifetime(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* s_lifetime);

  // optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto s_LastConfirmationTime = 8;
  inline bool has_s_lastconfirmationtime() const;
  inline void clear_s_lastconfirmationtime();
  static const int kSLastConfirmationTimeFieldNumber = 8;
  inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& s_lastconfirmationtime() const;
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* mutable_s_lastconfirmationtime();
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* release_s_lastconfirmationtime();
  inline void set_allocated_s_lastconfirmationtime(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* s_lastconfirmationtime);

  // optional .aero_trafpartic_protobuf.AERO_t_TrafPartic_Track_Status_Proto e_TrackStatus = 9 [default = AERO_TP_TRACK_STATUS_NA_PROTO];
  inline bool has_e_trackstatus() const;
  inline void clear_e_trackstatus();
  static const int kETrackStatusFieldNumber = 9;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Track_Status_Proto e_trackstatus() const;
  inline void set_e_trackstatus(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Track_Status_Proto value);

  // optional uint32 u_SensorCurrent = 10;
  inline bool has_u_sensorcurrent() const;
  inline void clear_u_sensorcurrent();
  static const int kUSensorCurrentFieldNumber = 10;
  inline ::google::protobuf::uint32 u_sensorcurrent() const;
  inline void set_u_sensorcurrent(::google::protobuf::uint32 value);

  // optional uint32 u_SensorOverLifetime = 11;
  inline bool has_u_sensoroverlifetime() const;
  inline void clear_u_sensoroverlifetime();
  static const int kUSensorOverLifetimeFieldNumber = 11;
  inline ::google::protobuf::uint32 u_sensoroverlifetime() const;
  inline void set_u_sensoroverlifetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_f_probability();
  inline void clear_has_f_probability();
  inline void set_has_e_state();
  inline void clear_has_e_state();
  inline void set_has_classification();
  inline void clear_has_classification();
  inline void set_has_s_lifetime();
  inline void clear_has_s_lifetime();
  inline void set_has_s_lastconfirmationtime();
  inline void clear_has_s_lastconfirmationtime();
  inline void set_has_e_trackstatus();
  inline void clear_has_e_trackstatus();
  inline void set_has_u_sensorcurrent();
  inline void clear_has_u_sensorcurrent();
  inline void set_has_u_sensoroverlifetime();
  inline void clear_has_u_sensoroverlifetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  float f_probability_;
  ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Classification_Proto* classification_;
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* s_lifetime_;
  int e_state_;
  int e_trackstatus_;
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* s_lastconfirmationtime_;
  ::google::protobuf::uint32 u_sensorcurrent_;
  ::google::protobuf::uint32 u_sensoroverlifetime_;
  friend void  protobuf_AddDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_AssignDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftraffic_5fparticipants_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_TrafParticAdminProp_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_TrafPartic_ReferencePoint_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_TrafPartic_ReferencePoint_Proto();
  virtual ~AERO_t_TrafPartic_ReferencePoint_Proto();

  AERO_t_TrafPartic_ReferencePoint_Proto(const AERO_t_TrafPartic_ReferencePoint_Proto& from);

  inline AERO_t_TrafPartic_ReferencePoint_Proto& operator=(const AERO_t_TrafPartic_ReferencePoint_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_TrafPartic_ReferencePoint_Proto& default_instance();

  void Swap(AERO_t_TrafPartic_ReferencePoint_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_TrafPartic_ReferencePoint_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_TrafPartic_ReferencePoint_Proto& from);
  void MergeFrom(const AERO_t_TrafPartic_ReferencePoint_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional .aero_trafpartic_protobuf.AERO_t_TrafPartic_Reference_Proto e_Reference = 2;
  inline bool has_e_reference() const;
  inline void clear_e_reference();
  static const int kEReferenceFieldNumber = 2;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Reference_Proto e_reference() const;
  inline void set_e_reference(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Reference_Proto value);

  // @@protoc_insertion_point(class_scope:aero_trafpartic_protobuf.AERO_t_TrafPartic_ReferencePoint_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_e_reference();
  inline void clear_has_e_reference();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  int e_reference_;
  friend void  protobuf_AddDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_AssignDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftraffic_5fparticipants_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_TrafPartic_ReferencePoint_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_TrafParticGeomProp_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_TrafParticGeomProp_Proto();
  virtual ~AERO_t_TrafParticGeomProp_Proto();

  AERO_t_TrafParticGeomProp_Proto(const AERO_t_TrafParticGeomProp_Proto& from);

  inline AERO_t_TrafParticGeomProp_Proto& operator=(const AERO_t_TrafParticGeomProp_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_TrafParticGeomProp_Proto& default_instance();

  void Swap(AERO_t_TrafParticGeomProp_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_TrafParticGeomProp_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_TrafParticGeomProp_Proto& from);
  void MergeFrom(const AERO_t_TrafParticGeomProp_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_Point3D_Proto Position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_Point3D_Proto& position() const;
  inline ::aero_type_protobuf::AERO_t_Point3D_Proto* mutable_position();
  inline ::aero_type_protobuf::AERO_t_Point3D_Proto* release_position();
  inline void set_allocated_position(::aero_type_protobuf::AERO_t_Point3D_Proto* position);

  // optional .aero_type_protobuf.AERO_t_Point3DStatus_Proto PositionStdev = 2;
  inline bool has_positionstdev() const;
  inline void clear_positionstdev();
  static const int kPositionStdevFieldNumber = 2;
  inline const ::aero_type_protobuf::AERO_t_Point3DStatus_Proto& positionstdev() const;
  inline ::aero_type_protobuf::AERO_t_Point3DStatus_Proto* mutable_positionstdev();
  inline ::aero_type_protobuf::AERO_t_Point3DStatus_Proto* release_positionstdev();
  inline void set_allocated_positionstdev(::aero_type_protobuf::AERO_t_Point3DStatus_Proto* positionstdev);

  // optional .aero_trafpartic_protobuf.AERO_t_TrafPartic_ReferencePoint_Proto ReferencePoint = 3;
  inline bool has_referencepoint() const;
  inline void clear_referencepoint();
  static const int kReferencePointFieldNumber = 3;
  inline const ::aero_trafpartic_protobuf::AERO_t_TrafPartic_ReferencePoint_Proto& referencepoint() const;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_ReferencePoint_Proto* mutable_referencepoint();
  inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_ReferencePoint_Proto* release_referencepoint();
  inline void set_allocated_referencepoint(::aero_trafpartic_protobuf::AERO_t_TrafPartic_ReferencePoint_Proto* referencepoint);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto Length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& length() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_length();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_length();
  inline void set_allocated_length(::aero_type_protobuf::AERO_t_float32Status_Proto* length);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto LengthStdev = 5;
  inline bool has_lengthstdev() const;
  inline void clear_lengthstdev();
  static const int kLengthStdevFieldNumber = 5;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& lengthstdev() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_lengthstdev();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_lengthstdev();
  inline void set_allocated_lengthstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* lengthstdev);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto Width = 6;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 6;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& width() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_width();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_width();
  inline void set_allocated_width(::aero_type_protobuf::AERO_t_float32Status_Proto* width);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto WidthStdev = 7;
  inline bool has_widthstdev() const;
  inline void clear_widthstdev();
  static const int kWidthStdevFieldNumber = 7;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& widthstdev() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_widthstdev();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_widthstdev();
  inline void set_allocated_widthstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* widthstdev);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto Height = 8;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 8;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& height() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_height();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_height();
  inline void set_allocated_height(::aero_type_protobuf::AERO_t_float32Status_Proto* height);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto HeightStdev = 9;
  inline bool has_heightstdev() const;
  inline void clear_heightstdev();
  static const int kHeightStdevFieldNumber = 9;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& heightstdev() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_heightstdev();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_heightstdev();
  inline void set_allocated_heightstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* heightstdev);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto Heading = 10;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 10;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& heading() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_heading();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_heading();
  inline void set_allocated_heading(::aero_type_protobuf::AERO_t_float32Status_Proto* heading);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto HeadingStdev = 11;
  inline bool has_headingstdev() const;
  inline void clear_headingstdev();
  static const int kHeadingStdevFieldNumber = 11;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& headingstdev() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_headingstdev();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_headingstdev();
  inline void set_allocated_headingstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* headingstdev);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto PositionXYCrossStdev = 12;
  inline bool has_positionxycrossstdev() const;
  inline void clear_positionxycrossstdev();
  static const int kPositionXYCrossStdevFieldNumber = 12;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& positionxycrossstdev() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_positionxycrossstdev();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_positionxycrossstdev();
  inline void set_allocated_positionxycrossstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* positionxycrossstdev);

  // @@protoc_insertion_point(class_scope:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_positionstdev();
  inline void clear_has_positionstdev();
  inline void set_has_referencepoint();
  inline void clear_has_referencepoint();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_lengthstdev();
  inline void clear_has_lengthstdev();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_widthstdev();
  inline void clear_has_widthstdev();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_heightstdev();
  inline void clear_has_heightstdev();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_headingstdev();
  inline void clear_has_headingstdev();
  inline void set_has_positionxycrossstdev();
  inline void clear_has_positionxycrossstdev();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_Point3D_Proto* position_;
  ::aero_type_protobuf::AERO_t_Point3DStatus_Proto* positionstdev_;
  ::aero_trafpartic_protobuf::AERO_t_TrafPartic_ReferencePoint_Proto* referencepoint_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* length_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* lengthstdev_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* width_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* widthstdev_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* height_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* heightstdev_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* heading_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* headingstdev_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* positionxycrossstdev_;
  friend void  protobuf_AddDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_AssignDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftraffic_5fparticipants_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_TrafParticGeomProp_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_TrafParticDynProp_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_TrafParticDynProp_Proto();
  virtual ~AERO_t_TrafParticDynProp_Proto();

  AERO_t_TrafParticDynProp_Proto(const AERO_t_TrafParticDynProp_Proto& from);

  inline AERO_t_TrafParticDynProp_Proto& operator=(const AERO_t_TrafParticDynProp_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_TrafParticDynProp_Proto& default_instance();

  void Swap(AERO_t_TrafParticDynProp_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_TrafParticDynProp_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_TrafParticDynProp_Proto& from);
  void MergeFrom(const AERO_t_TrafParticDynProp_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_Point2DStatus_Proto Velocity = 1;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_Point2DStatus_Proto& velocity() const;
  inline ::aero_type_protobuf::AERO_t_Point2DStatus_Proto* mutable_velocity();
  inline ::aero_type_protobuf::AERO_t_Point2DStatus_Proto* release_velocity();
  inline void set_allocated_velocity(::aero_type_protobuf::AERO_t_Point2DStatus_Proto* velocity);

  // optional .aero_type_protobuf.AERO_t_Point2DStatus_Proto VelocityStdev = 2;
  inline bool has_velocitystdev() const;
  inline void clear_velocitystdev();
  static const int kVelocityStdevFieldNumber = 2;
  inline const ::aero_type_protobuf::AERO_t_Point2DStatus_Proto& velocitystdev() const;
  inline ::aero_type_protobuf::AERO_t_Point2DStatus_Proto* mutable_velocitystdev();
  inline ::aero_type_protobuf::AERO_t_Point2DStatus_Proto* release_velocitystdev();
  inline void set_allocated_velocitystdev(::aero_type_protobuf::AERO_t_Point2DStatus_Proto* velocitystdev);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto AccelerationX = 3;
  inline bool has_accelerationx() const;
  inline void clear_accelerationx();
  static const int kAccelerationXFieldNumber = 3;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& accelerationx() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_accelerationx();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_accelerationx();
  inline void set_allocated_accelerationx(::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationx);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto AccelerationXStdev = 4;
  inline bool has_accelerationxstdev() const;
  inline void clear_accelerationxstdev();
  static const int kAccelerationXStdevFieldNumber = 4;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& accelerationxstdev() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_accelerationxstdev();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_accelerationxstdev();
  inline void set_allocated_accelerationxstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationxstdev);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto AccelerationY = 5;
  inline bool has_accelerationy() const;
  inline void clear_accelerationy();
  static const int kAccelerationYFieldNumber = 5;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& accelerationy() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_accelerationy();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_accelerationy();
  inline void set_allocated_accelerationy(::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationy);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto AccelerationYStdev = 6;
  inline bool has_accelerationystdev() const;
  inline void clear_accelerationystdev();
  static const int kAccelerationYStdevFieldNumber = 6;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& accelerationystdev() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_accelerationystdev();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_accelerationystdev();
  inline void set_allocated_accelerationystdev(::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationystdev);

  // optional float f_MaxObsSpeed = 7;
  inline bool has_f_maxobsspeed() const;
  inline void clear_f_maxobsspeed();
  static const int kFMaxObsSpeedFieldNumber = 7;
  inline float f_maxobsspeed() const;
  inline void set_f_maxobsspeed(float value);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto VelocityUVCrossStdev = 8;
  inline bool has_velocityuvcrossstdev() const;
  inline void clear_velocityuvcrossstdev();
  static const int kVelocityUVCrossStdevFieldNumber = 8;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& velocityuvcrossstdev() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_velocityuvcrossstdev();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_velocityuvcrossstdev();
  inline void set_allocated_velocityuvcrossstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* velocityuvcrossstdev);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto AccelerationXYCrossStdev = 9;
  inline bool has_accelerationxycrossstdev() const;
  inline void clear_accelerationxycrossstdev();
  static const int kAccelerationXYCrossStdevFieldNumber = 9;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& accelerationxycrossstdev() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_accelerationxycrossstdev();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_accelerationxycrossstdev();
  inline void set_allocated_accelerationxycrossstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationxycrossstdev);

  // @@protoc_insertion_point(class_scope:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto)
 private:
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_velocitystdev();
  inline void clear_has_velocitystdev();
  inline void set_has_accelerationx();
  inline void clear_has_accelerationx();
  inline void set_has_accelerationxstdev();
  inline void clear_has_accelerationxstdev();
  inline void set_has_accelerationy();
  inline void clear_has_accelerationy();
  inline void set_has_accelerationystdev();
  inline void clear_has_accelerationystdev();
  inline void set_has_f_maxobsspeed();
  inline void clear_has_f_maxobsspeed();
  inline void set_has_velocityuvcrossstdev();
  inline void clear_has_velocityuvcrossstdev();
  inline void set_has_accelerationxycrossstdev();
  inline void clear_has_accelerationxycrossstdev();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_Point2DStatus_Proto* velocity_;
  ::aero_type_protobuf::AERO_t_Point2DStatus_Proto* velocitystdev_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationx_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationxstdev_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationy_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationystdev_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* velocityuvcrossstdev_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationxycrossstdev_;
  float f_maxobsspeed_;
  friend void  protobuf_AddDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_AssignDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftraffic_5fparticipants_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_TrafParticDynProp_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_TrafParticSupportProp_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_TrafParticSupportProp_Proto();
  virtual ~AERO_t_TrafParticSupportProp_Proto();

  AERO_t_TrafParticSupportProp_Proto(const AERO_t_TrafParticSupportProp_Proto& from);

  inline AERO_t_TrafParticSupportProp_Proto& operator=(const AERO_t_TrafParticSupportProp_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_TrafParticSupportProp_Proto& default_instance();

  void Swap(AERO_t_TrafParticSupportProp_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_TrafParticSupportProp_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_TrafParticSupportProp_Proto& from);
  void MergeFrom(const AERO_t_TrafParticSupportProp_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional uint32 u_SupportFlag = 2;
  inline bool has_u_supportflag() const;
  inline void clear_u_supportflag();
  static const int kUSupportFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 u_supportflag() const;
  inline void set_u_supportflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aero_trafpartic_protobuf.AERO_t_TrafParticSupportProp_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_u_supportflag();
  inline void clear_has_u_supportflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  ::google::protobuf::uint32 u_supportflag_;
  friend void  protobuf_AddDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_AssignDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftraffic_5fparticipants_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_TrafParticSupportProp_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_TrafParticDebugProp_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_TrafParticDebugProp_Proto();
  virtual ~AERO_t_TrafParticDebugProp_Proto();

  AERO_t_TrafParticDebugProp_Proto(const AERO_t_TrafParticDebugProp_Proto& from);

  inline AERO_t_TrafParticDebugProp_Proto& operator=(const AERO_t_TrafParticDebugProp_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_TrafParticDebugProp_Proto& default_instance();

  void Swap(AERO_t_TrafParticDebugProp_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_TrafParticDebugProp_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_TrafParticDebugProp_Proto& from);
  void MergeFrom(const AERO_t_TrafParticDebugProp_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // @@protoc_insertion_point(class_scope:aero_trafpartic_protobuf.AERO_t_TrafParticDebugProp_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  friend void  protobuf_AddDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_AssignDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftraffic_5fparticipants_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_TrafParticDebugProp_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_TrafPartic_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_TrafPartic_Proto();
  virtual ~AERO_t_TrafPartic_Proto();

  AERO_t_TrafPartic_Proto(const AERO_t_TrafPartic_Proto& from);

  inline AERO_t_TrafPartic_Proto& operator=(const AERO_t_TrafPartic_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_TrafPartic_Proto& default_instance();

  void Swap(AERO_t_TrafPartic_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_TrafPartic_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_TrafPartic_Proto& from);
  void MergeFrom(const AERO_t_TrafPartic_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional .aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto AdminProp = 2;
  inline bool has_adminprop() const;
  inline void clear_adminprop();
  static const int kAdminPropFieldNumber = 2;
  inline const ::aero_trafpartic_protobuf::AERO_t_TrafParticAdminProp_Proto& adminprop() const;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafParticAdminProp_Proto* mutable_adminprop();
  inline ::aero_trafpartic_protobuf::AERO_t_TrafParticAdminProp_Proto* release_adminprop();
  inline void set_allocated_adminprop(::aero_trafpartic_protobuf::AERO_t_TrafParticAdminProp_Proto* adminprop);

  // optional .aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto GeomProp = 3;
  inline bool has_geomprop() const;
  inline void clear_geomprop();
  static const int kGeomPropFieldNumber = 3;
  inline const ::aero_trafpartic_protobuf::AERO_t_TrafParticGeomProp_Proto& geomprop() const;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafParticGeomProp_Proto* mutable_geomprop();
  inline ::aero_trafpartic_protobuf::AERO_t_TrafParticGeomProp_Proto* release_geomprop();
  inline void set_allocated_geomprop(::aero_trafpartic_protobuf::AERO_t_TrafParticGeomProp_Proto* geomprop);

  // optional .aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto DynProp = 4;
  inline bool has_dynprop() const;
  inline void clear_dynprop();
  static const int kDynPropFieldNumber = 4;
  inline const ::aero_trafpartic_protobuf::AERO_t_TrafParticDynProp_Proto& dynprop() const;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafParticDynProp_Proto* mutable_dynprop();
  inline ::aero_trafpartic_protobuf::AERO_t_TrafParticDynProp_Proto* release_dynprop();
  inline void set_allocated_dynprop(::aero_trafpartic_protobuf::AERO_t_TrafParticDynProp_Proto* dynprop);

  // optional .aero_trafpartic_protobuf.AERO_t_TrafParticSupportProp_Proto SupportProp = 5;
  inline bool has_supportprop() const;
  inline void clear_supportprop();
  static const int kSupportPropFieldNumber = 5;
  inline const ::aero_trafpartic_protobuf::AERO_t_TrafParticSupportProp_Proto& supportprop() const;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafParticSupportProp_Proto* mutable_supportprop();
  inline ::aero_trafpartic_protobuf::AERO_t_TrafParticSupportProp_Proto* release_supportprop();
  inline void set_allocated_supportprop(::aero_trafpartic_protobuf::AERO_t_TrafParticSupportProp_Proto* supportprop);

  // optional .aero_trafpartic_protobuf.AERO_t_TrafParticDebugProp_Proto DebugProp = 6;
  inline bool has_debugprop() const;
  inline void clear_debugprop();
  static const int kDebugPropFieldNumber = 6;
  inline const ::aero_trafpartic_protobuf::AERO_t_TrafParticDebugProp_Proto& debugprop() const;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafParticDebugProp_Proto* mutable_debugprop();
  inline ::aero_trafpartic_protobuf::AERO_t_TrafParticDebugProp_Proto* release_debugprop();
  inline void set_allocated_debugprop(::aero_trafpartic_protobuf::AERO_t_TrafParticDebugProp_Proto* debugprop);

  // @@protoc_insertion_point(class_scope:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_adminprop();
  inline void clear_has_adminprop();
  inline void set_has_geomprop();
  inline void clear_has_geomprop();
  inline void set_has_dynprop();
  inline void clear_has_dynprop();
  inline void set_has_supportprop();
  inline void clear_has_supportprop();
  inline void set_has_debugprop();
  inline void clear_has_debugprop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_trafpartic_protobuf::AERO_t_TrafParticAdminProp_Proto* adminprop_;
  ::aero_trafpartic_protobuf::AERO_t_TrafParticGeomProp_Proto* geomprop_;
  ::aero_trafpartic_protobuf::AERO_t_TrafParticDynProp_Proto* dynprop_;
  ::aero_trafpartic_protobuf::AERO_t_TrafParticSupportProp_Proto* supportprop_;
  ::aero_trafpartic_protobuf::AERO_t_TrafParticDebugProp_Proto* debugprop_;
  int e_signalstatus_;
  friend void  protobuf_AddDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_AssignDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftraffic_5fparticipants_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_TrafPartic_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_TrafParticList_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_TrafParticList_Proto();
  virtual ~AERO_t_TrafParticList_Proto();

  AERO_t_TrafParticList_Proto(const AERO_t_TrafParticList_Proto& from);

  inline AERO_t_TrafParticList_Proto& operator=(const AERO_t_TrafParticList_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_TrafParticList_Proto& default_instance();

  void Swap(AERO_t_TrafParticList_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_TrafParticList_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_TrafParticList_Proto& from);
  void MergeFrom(const AERO_t_TrafParticList_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalHeader_Proto SignalHeader = 1;
  inline bool has_signalheader() const;
  inline void clear_signalheader();
  static const int kSignalHeaderFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_SignalHeader_Proto& signalheader() const;
  inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* mutable_signalheader();
  inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* release_signalheader();
  inline void set_allocated_signalheader(::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader);

  // optional .aero_type_protobuf.AERO_t_SensorStatus_Proto SensorStatus = 5;
  inline bool has_sensorstatus() const;
  inline void clear_sensorstatus();
  static const int kSensorStatusFieldNumber = 5;
  inline const ::aero_type_protobuf::AERO_t_SensorStatus_Proto& sensorstatus() const;
  inline ::aero_type_protobuf::AERO_t_SensorStatus_Proto* mutable_sensorstatus();
  inline ::aero_type_protobuf::AERO_t_SensorStatus_Proto* release_sensorstatus();
  inline void set_allocated_sensorstatus(::aero_type_protobuf::AERO_t_SensorStatus_Proto* sensorstatus);

  // optional uint32 u_NumTrafficParticipants = 2;
  inline bool has_u_numtrafficparticipants() const;
  inline void clear_u_numtrafficparticipants();
  static const int kUNumTrafficParticipantsFieldNumber = 2;
  inline ::google::protobuf::uint32 u_numtrafficparticipants() const;
  inline void set_u_numtrafficparticipants(::google::protobuf::uint32 value);

  // optional .aero_type_protobuf.AERO_t_Motion_Proto EgoMotion = 3;
  inline bool has_egomotion() const;
  inline void clear_egomotion();
  static const int kEgoMotionFieldNumber = 3;
  inline const ::aero_type_protobuf::AERO_t_Motion_Proto& egomotion() const;
  inline ::aero_type_protobuf::AERO_t_Motion_Proto* mutable_egomotion();
  inline ::aero_type_protobuf::AERO_t_Motion_Proto* release_egomotion();
  inline void set_allocated_egomotion(::aero_type_protobuf::AERO_t_Motion_Proto* egomotion);

  // repeated .aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto TrafPart = 4;
  inline int trafpart_size() const;
  inline void clear_trafpart();
  static const int kTrafPartFieldNumber = 4;
  inline const ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Proto& trafpart(int index) const;
  inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Proto* mutable_trafpart(int index);
  inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Proto* add_trafpart();
  inline const ::google::protobuf::RepeatedPtrField< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Proto >&
      trafpart() const;
  inline ::google::protobuf::RepeatedPtrField< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Proto >*
      mutable_trafpart();

  // @@protoc_insertion_point(class_scope:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto)
 private:
  inline void set_has_signalheader();
  inline void clear_has_signalheader();
  inline void set_has_sensorstatus();
  inline void clear_has_sensorstatus();
  inline void set_has_u_numtrafficparticipants();
  inline void clear_has_u_numtrafficparticipants();
  inline void set_has_egomotion();
  inline void clear_has_egomotion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader_;
  ::aero_type_protobuf::AERO_t_SensorStatus_Proto* sensorstatus_;
  ::aero_type_protobuf::AERO_t_Motion_Proto* egomotion_;
  ::google::protobuf::RepeatedPtrField< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Proto > trafpart_;
  ::google::protobuf::uint32 u_numtrafficparticipants_;
  friend void  protobuf_AddDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_AssignDesc_aero_5ftraffic_5fparticipants_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftraffic_5fparticipants_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_TrafParticList_Proto* default_instance_;
};
// ===================================================================


// ===================================================================

// AERO_t_TrafPartic_Classification_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_TrafPartic_Classification_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_TrafPartic_Classification_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_TrafPartic_Classification_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_TrafPartic_Classification_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_TrafPartic_Classification_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_TrafPartic_Classification_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.e_SignalStatus)
}

// optional uint32 u_ValidClasses = 2;
inline bool AERO_t_TrafPartic_Classification_Proto::has_u_validclasses() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_TrafPartic_Classification_Proto::set_has_u_validclasses() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_TrafPartic_Classification_Proto::clear_has_u_validclasses() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_TrafPartic_Classification_Proto::clear_u_validclasses() {
  u_validclasses_ = 0u;
  clear_has_u_validclasses();
}
inline ::google::protobuf::uint32 AERO_t_TrafPartic_Classification_Proto::u_validclasses() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.u_ValidClasses)
  return u_validclasses_;
}
inline void AERO_t_TrafPartic_Classification_Proto::set_u_validclasses(::google::protobuf::uint32 value) {
  set_has_u_validclasses();
  u_validclasses_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.u_ValidClasses)
}

// repeated .aero_trafpartic_protobuf.AERO_t_TrafPartic_Class_Proto e_Class = 3;
inline int AERO_t_TrafPartic_Classification_Proto::e_class_size() const {
  return e_class_.size();
}
inline void AERO_t_TrafPartic_Classification_Proto::clear_e_class() {
  e_class_.Clear();
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto AERO_t_TrafPartic_Classification_Proto::e_class(int index) const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.e_Class)
  return static_cast< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto >(e_class_.Get(index));
}
inline void AERO_t_TrafPartic_Classification_Proto::set_e_class(int index, ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto value) {
  assert(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto_IsValid(value));
  e_class_.Set(index, value);
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.e_Class)
}
inline void AERO_t_TrafPartic_Classification_Proto::add_e_class(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto value) {
  assert(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto_IsValid(value));
  e_class_.Add(value);
  // @@protoc_insertion_point(field_add:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.e_Class)
}
inline const ::google::protobuf::RepeatedField<int>&
AERO_t_TrafPartic_Classification_Proto::e_class() const {
  // @@protoc_insertion_point(field_list:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.e_Class)
  return e_class_;
}
inline ::google::protobuf::RepeatedField<int>*
AERO_t_TrafPartic_Classification_Proto::mutable_e_class() {
  // @@protoc_insertion_point(field_mutable_list:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.e_Class)
  return &e_class_;
}

// repeated .aero_trafpartic_protobuf.AERO_t_TrafPartic_Class_Proto e_ParentClass = 4;
inline int AERO_t_TrafPartic_Classification_Proto::e_parentclass_size() const {
  return e_parentclass_.size();
}
inline void AERO_t_TrafPartic_Classification_Proto::clear_e_parentclass() {
  e_parentclass_.Clear();
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto AERO_t_TrafPartic_Classification_Proto::e_parentclass(int index) const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.e_ParentClass)
  return static_cast< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto >(e_parentclass_.Get(index));
}
inline void AERO_t_TrafPartic_Classification_Proto::set_e_parentclass(int index, ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto value) {
  assert(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto_IsValid(value));
  e_parentclass_.Set(index, value);
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.e_ParentClass)
}
inline void AERO_t_TrafPartic_Classification_Proto::add_e_parentclass(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto value) {
  assert(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto_IsValid(value));
  e_parentclass_.Add(value);
  // @@protoc_insertion_point(field_add:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.e_ParentClass)
}
inline const ::google::protobuf::RepeatedField<int>&
AERO_t_TrafPartic_Classification_Proto::e_parentclass() const {
  // @@protoc_insertion_point(field_list:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.e_ParentClass)
  return e_parentclass_;
}
inline ::google::protobuf::RepeatedField<int>*
AERO_t_TrafPartic_Classification_Proto::mutable_e_parentclass() {
  // @@protoc_insertion_point(field_mutable_list:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.e_ParentClass)
  return &e_parentclass_;
}

// repeated float f_ClassProb = 5;
inline int AERO_t_TrafPartic_Classification_Proto::f_classprob_size() const {
  return f_classprob_.size();
}
inline void AERO_t_TrafPartic_Classification_Proto::clear_f_classprob() {
  f_classprob_.Clear();
}
inline float AERO_t_TrafPartic_Classification_Proto::f_classprob(int index) const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.f_ClassProb)
  return f_classprob_.Get(index);
}
inline void AERO_t_TrafPartic_Classification_Proto::set_f_classprob(int index, float value) {
  f_classprob_.Set(index, value);
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.f_ClassProb)
}
inline void AERO_t_TrafPartic_Classification_Proto::add_f_classprob(float value) {
  f_classprob_.Add(value);
  // @@protoc_insertion_point(field_add:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.f_ClassProb)
}
inline const ::google::protobuf::RepeatedField< float >&
AERO_t_TrafPartic_Classification_Proto::f_classprob() const {
  // @@protoc_insertion_point(field_list:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.f_ClassProb)
  return f_classprob_;
}
inline ::google::protobuf::RepeatedField< float >*
AERO_t_TrafPartic_Classification_Proto::mutable_f_classprob() {
  // @@protoc_insertion_point(field_mutable_list:aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto.f_ClassProb)
  return &f_classprob_;
}

// -------------------------------------------------------------------

// AERO_t_TrafParticAdminProp_Proto

// optional uint32 Id = 2;
inline bool AERO_t_TrafParticAdminProp_Proto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AERO_t_TrafParticAdminProp_Proto::id() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.Id)
  return id_;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.Id)
}

// optional float f_Probability = 3;
inline bool AERO_t_TrafParticAdminProp_Proto::has_f_probability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_has_f_probability() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_has_f_probability() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_f_probability() {
  f_probability_ = 0;
  clear_has_f_probability();
}
inline float AERO_t_TrafParticAdminProp_Proto::f_probability() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.f_Probability)
  return f_probability_;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_f_probability(float value) {
  set_has_f_probability();
  f_probability_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.f_Probability)
}

// optional .aero_trafpartic_protobuf.AERO_t_TrafPartic_State_Proto e_State = 4;
inline bool AERO_t_TrafParticAdminProp_Proto::has_e_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_has_e_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_has_e_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_e_state() {
  e_state_ = 0;
  clear_has_e_state();
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_State_Proto AERO_t_TrafParticAdminProp_Proto::e_state() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.e_State)
  return static_cast< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_State_Proto >(e_state_);
}
inline void AERO_t_TrafParticAdminProp_Proto::set_e_state(::aero_trafpartic_protobuf::AERO_t_TrafPartic_State_Proto value) {
  assert(::aero_trafpartic_protobuf::AERO_t_TrafPartic_State_Proto_IsValid(value));
  set_has_e_state();
  e_state_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.e_State)
}

// optional .aero_trafpartic_protobuf.AERO_t_TrafPartic_Classification_Proto Classification = 5;
inline bool AERO_t_TrafParticAdminProp_Proto::has_classification() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_has_classification() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_has_classification() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_classification() {
  if (classification_ != NULL) classification_->::aero_trafpartic_protobuf::AERO_t_TrafPartic_Classification_Proto::Clear();
  clear_has_classification();
}
inline const ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Classification_Proto& AERO_t_TrafParticAdminProp_Proto::classification() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.Classification)
  return classification_ != NULL ? *classification_ : *default_instance_->classification_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Classification_Proto* AERO_t_TrafParticAdminProp_Proto::mutable_classification() {
  set_has_classification();
  if (classification_ == NULL) classification_ = new ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Classification_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.Classification)
  return classification_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Classification_Proto* AERO_t_TrafParticAdminProp_Proto::release_classification() {
  clear_has_classification();
  ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Classification_Proto* temp = classification_;
  classification_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_allocated_classification(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Classification_Proto* classification) {
  delete classification_;
  classification_ = classification;
  if (classification) {
    set_has_classification();
  } else {
    clear_has_classification();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.Classification)
}

// optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto s_LifeTime = 7;
inline bool AERO_t_TrafParticAdminProp_Proto::has_s_lifetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_has_s_lifetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_has_s_lifetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_s_lifetime() {
  if (s_lifetime_ != NULL) s_lifetime_->::aero_type_protobuf::AERO_t_s_Timestamp_Proto::Clear();
  clear_has_s_lifetime();
}
inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& AERO_t_TrafParticAdminProp_Proto::s_lifetime() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.s_LifeTime)
  return s_lifetime_ != NULL ? *s_lifetime_ : *default_instance_->s_lifetime_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_TrafParticAdminProp_Proto::mutable_s_lifetime() {
  set_has_s_lifetime();
  if (s_lifetime_ == NULL) s_lifetime_ = new ::aero_type_protobuf::AERO_t_s_Timestamp_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.s_LifeTime)
  return s_lifetime_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_TrafParticAdminProp_Proto::release_s_lifetime() {
  clear_has_s_lifetime();
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* temp = s_lifetime_;
  s_lifetime_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_allocated_s_lifetime(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* s_lifetime) {
  delete s_lifetime_;
  s_lifetime_ = s_lifetime;
  if (s_lifetime) {
    set_has_s_lifetime();
  } else {
    clear_has_s_lifetime();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.s_LifeTime)
}

// optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto s_LastConfirmationTime = 8;
inline bool AERO_t_TrafParticAdminProp_Proto::has_s_lastconfirmationtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_has_s_lastconfirmationtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_has_s_lastconfirmationtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_s_lastconfirmationtime() {
  if (s_lastconfirmationtime_ != NULL) s_lastconfirmationtime_->::aero_type_protobuf::AERO_t_s_Timestamp_Proto::Clear();
  clear_has_s_lastconfirmationtime();
}
inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& AERO_t_TrafParticAdminProp_Proto::s_lastconfirmationtime() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.s_LastConfirmationTime)
  return s_lastconfirmationtime_ != NULL ? *s_lastconfirmationtime_ : *default_instance_->s_lastconfirmationtime_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_TrafParticAdminProp_Proto::mutable_s_lastconfirmationtime() {
  set_has_s_lastconfirmationtime();
  if (s_lastconfirmationtime_ == NULL) s_lastconfirmationtime_ = new ::aero_type_protobuf::AERO_t_s_Timestamp_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.s_LastConfirmationTime)
  return s_lastconfirmationtime_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_TrafParticAdminProp_Proto::release_s_lastconfirmationtime() {
  clear_has_s_lastconfirmationtime();
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* temp = s_lastconfirmationtime_;
  s_lastconfirmationtime_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_allocated_s_lastconfirmationtime(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* s_lastconfirmationtime) {
  delete s_lastconfirmationtime_;
  s_lastconfirmationtime_ = s_lastconfirmationtime;
  if (s_lastconfirmationtime) {
    set_has_s_lastconfirmationtime();
  } else {
    clear_has_s_lastconfirmationtime();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.s_LastConfirmationTime)
}

// optional .aero_trafpartic_protobuf.AERO_t_TrafPartic_Track_Status_Proto e_TrackStatus = 9 [default = AERO_TP_TRACK_STATUS_NA_PROTO];
inline bool AERO_t_TrafParticAdminProp_Proto::has_e_trackstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_has_e_trackstatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_has_e_trackstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_e_trackstatus() {
  e_trackstatus_ = 0;
  clear_has_e_trackstatus();
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Track_Status_Proto AERO_t_TrafParticAdminProp_Proto::e_trackstatus() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.e_TrackStatus)
  return static_cast< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Track_Status_Proto >(e_trackstatus_);
}
inline void AERO_t_TrafParticAdminProp_Proto::set_e_trackstatus(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Track_Status_Proto value) {
  assert(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Track_Status_Proto_IsValid(value));
  set_has_e_trackstatus();
  e_trackstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.e_TrackStatus)
}

// optional uint32 u_SensorCurrent = 10;
inline bool AERO_t_TrafParticAdminProp_Proto::has_u_sensorcurrent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_has_u_sensorcurrent() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_has_u_sensorcurrent() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_u_sensorcurrent() {
  u_sensorcurrent_ = 0u;
  clear_has_u_sensorcurrent();
}
inline ::google::protobuf::uint32 AERO_t_TrafParticAdminProp_Proto::u_sensorcurrent() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.u_SensorCurrent)
  return u_sensorcurrent_;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_u_sensorcurrent(::google::protobuf::uint32 value) {
  set_has_u_sensorcurrent();
  u_sensorcurrent_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.u_SensorCurrent)
}

// optional uint32 u_SensorOverLifetime = 11;
inline bool AERO_t_TrafParticAdminProp_Proto::has_u_sensoroverlifetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_has_u_sensoroverlifetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_has_u_sensoroverlifetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AERO_t_TrafParticAdminProp_Proto::clear_u_sensoroverlifetime() {
  u_sensoroverlifetime_ = 0u;
  clear_has_u_sensoroverlifetime();
}
inline ::google::protobuf::uint32 AERO_t_TrafParticAdminProp_Proto::u_sensoroverlifetime() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.u_SensorOverLifetime)
  return u_sensoroverlifetime_;
}
inline void AERO_t_TrafParticAdminProp_Proto::set_u_sensoroverlifetime(::google::protobuf::uint32 value) {
  set_has_u_sensoroverlifetime();
  u_sensoroverlifetime_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto.u_SensorOverLifetime)
}

// -------------------------------------------------------------------

// AERO_t_TrafPartic_ReferencePoint_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_TrafPartic_ReferencePoint_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_TrafPartic_ReferencePoint_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_TrafPartic_ReferencePoint_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_TrafPartic_ReferencePoint_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_TrafPartic_ReferencePoint_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_ReferencePoint_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_TrafPartic_ReferencePoint_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafPartic_ReferencePoint_Proto.e_SignalStatus)
}

// optional .aero_trafpartic_protobuf.AERO_t_TrafPartic_Reference_Proto e_Reference = 2;
inline bool AERO_t_TrafPartic_ReferencePoint_Proto::has_e_reference() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_TrafPartic_ReferencePoint_Proto::set_has_e_reference() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_TrafPartic_ReferencePoint_Proto::clear_has_e_reference() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_TrafPartic_ReferencePoint_Proto::clear_e_reference() {
  e_reference_ = 0;
  clear_has_e_reference();
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Reference_Proto AERO_t_TrafPartic_ReferencePoint_Proto::e_reference() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_ReferencePoint_Proto.e_Reference)
  return static_cast< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Reference_Proto >(e_reference_);
}
inline void AERO_t_TrafPartic_ReferencePoint_Proto::set_e_reference(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Reference_Proto value) {
  assert(::aero_trafpartic_protobuf::AERO_t_TrafPartic_Reference_Proto_IsValid(value));
  set_has_e_reference();
  e_reference_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafPartic_ReferencePoint_Proto.e_Reference)
}

// -------------------------------------------------------------------

// AERO_t_TrafParticGeomProp_Proto

// optional .aero_type_protobuf.AERO_t_Point3D_Proto Position = 1;
inline bool AERO_t_TrafParticGeomProp_Proto::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_position() {
  if (position_ != NULL) position_->::aero_type_protobuf::AERO_t_Point3D_Proto::Clear();
  clear_has_position();
}
inline const ::aero_type_protobuf::AERO_t_Point3D_Proto& AERO_t_TrafParticGeomProp_Proto::position() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::aero_type_protobuf::AERO_t_Point3D_Proto* AERO_t_TrafParticGeomProp_Proto::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::aero_type_protobuf::AERO_t_Point3D_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Position)
  return position_;
}
inline ::aero_type_protobuf::AERO_t_Point3D_Proto* AERO_t_TrafParticGeomProp_Proto::release_position() {
  clear_has_position();
  ::aero_type_protobuf::AERO_t_Point3D_Proto* temp = position_;
  position_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_allocated_position(::aero_type_protobuf::AERO_t_Point3D_Proto* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Position)
}

// optional .aero_type_protobuf.AERO_t_Point3DStatus_Proto PositionStdev = 2;
inline bool AERO_t_TrafParticGeomProp_Proto::has_positionstdev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_has_positionstdev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_has_positionstdev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_positionstdev() {
  if (positionstdev_ != NULL) positionstdev_->::aero_type_protobuf::AERO_t_Point3DStatus_Proto::Clear();
  clear_has_positionstdev();
}
inline const ::aero_type_protobuf::AERO_t_Point3DStatus_Proto& AERO_t_TrafParticGeomProp_Proto::positionstdev() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.PositionStdev)
  return positionstdev_ != NULL ? *positionstdev_ : *default_instance_->positionstdev_;
}
inline ::aero_type_protobuf::AERO_t_Point3DStatus_Proto* AERO_t_TrafParticGeomProp_Proto::mutable_positionstdev() {
  set_has_positionstdev();
  if (positionstdev_ == NULL) positionstdev_ = new ::aero_type_protobuf::AERO_t_Point3DStatus_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.PositionStdev)
  return positionstdev_;
}
inline ::aero_type_protobuf::AERO_t_Point3DStatus_Proto* AERO_t_TrafParticGeomProp_Proto::release_positionstdev() {
  clear_has_positionstdev();
  ::aero_type_protobuf::AERO_t_Point3DStatus_Proto* temp = positionstdev_;
  positionstdev_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_allocated_positionstdev(::aero_type_protobuf::AERO_t_Point3DStatus_Proto* positionstdev) {
  delete positionstdev_;
  positionstdev_ = positionstdev;
  if (positionstdev) {
    set_has_positionstdev();
  } else {
    clear_has_positionstdev();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.PositionStdev)
}

// optional .aero_trafpartic_protobuf.AERO_t_TrafPartic_ReferencePoint_Proto ReferencePoint = 3;
inline bool AERO_t_TrafParticGeomProp_Proto::has_referencepoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_has_referencepoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_has_referencepoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_referencepoint() {
  if (referencepoint_ != NULL) referencepoint_->::aero_trafpartic_protobuf::AERO_t_TrafPartic_ReferencePoint_Proto::Clear();
  clear_has_referencepoint();
}
inline const ::aero_trafpartic_protobuf::AERO_t_TrafPartic_ReferencePoint_Proto& AERO_t_TrafParticGeomProp_Proto::referencepoint() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.ReferencePoint)
  return referencepoint_ != NULL ? *referencepoint_ : *default_instance_->referencepoint_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_ReferencePoint_Proto* AERO_t_TrafParticGeomProp_Proto::mutable_referencepoint() {
  set_has_referencepoint();
  if (referencepoint_ == NULL) referencepoint_ = new ::aero_trafpartic_protobuf::AERO_t_TrafPartic_ReferencePoint_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.ReferencePoint)
  return referencepoint_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_ReferencePoint_Proto* AERO_t_TrafParticGeomProp_Proto::release_referencepoint() {
  clear_has_referencepoint();
  ::aero_trafpartic_protobuf::AERO_t_TrafPartic_ReferencePoint_Proto* temp = referencepoint_;
  referencepoint_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_allocated_referencepoint(::aero_trafpartic_protobuf::AERO_t_TrafPartic_ReferencePoint_Proto* referencepoint) {
  delete referencepoint_;
  referencepoint_ = referencepoint;
  if (referencepoint) {
    set_has_referencepoint();
  } else {
    clear_has_referencepoint();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.ReferencePoint)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto Length = 4;
inline bool AERO_t_TrafParticGeomProp_Proto::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_length() {
  if (length_ != NULL) length_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_length();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticGeomProp_Proto::length() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Length)
  return length_ != NULL ? *length_ : *default_instance_->length_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::mutable_length() {
  set_has_length();
  if (length_ == NULL) length_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Length)
  return length_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::release_length() {
  clear_has_length();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = length_;
  length_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_allocated_length(::aero_type_protobuf::AERO_t_float32Status_Proto* length) {
  delete length_;
  length_ = length;
  if (length) {
    set_has_length();
  } else {
    clear_has_length();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Length)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto LengthStdev = 5;
inline bool AERO_t_TrafParticGeomProp_Proto::has_lengthstdev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_has_lengthstdev() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_has_lengthstdev() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_lengthstdev() {
  if (lengthstdev_ != NULL) lengthstdev_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_lengthstdev();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticGeomProp_Proto::lengthstdev() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.LengthStdev)
  return lengthstdev_ != NULL ? *lengthstdev_ : *default_instance_->lengthstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::mutable_lengthstdev() {
  set_has_lengthstdev();
  if (lengthstdev_ == NULL) lengthstdev_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.LengthStdev)
  return lengthstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::release_lengthstdev() {
  clear_has_lengthstdev();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = lengthstdev_;
  lengthstdev_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_allocated_lengthstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* lengthstdev) {
  delete lengthstdev_;
  lengthstdev_ = lengthstdev;
  if (lengthstdev) {
    set_has_lengthstdev();
  } else {
    clear_has_lengthstdev();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.LengthStdev)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto Width = 6;
inline bool AERO_t_TrafParticGeomProp_Proto::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_width() {
  if (width_ != NULL) width_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_width();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticGeomProp_Proto::width() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Width)
  return width_ != NULL ? *width_ : *default_instance_->width_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::mutable_width() {
  set_has_width();
  if (width_ == NULL) width_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Width)
  return width_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::release_width() {
  clear_has_width();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = width_;
  width_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_allocated_width(::aero_type_protobuf::AERO_t_float32Status_Proto* width) {
  delete width_;
  width_ = width;
  if (width) {
    set_has_width();
  } else {
    clear_has_width();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Width)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto WidthStdev = 7;
inline bool AERO_t_TrafParticGeomProp_Proto::has_widthstdev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_has_widthstdev() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_has_widthstdev() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_widthstdev() {
  if (widthstdev_ != NULL) widthstdev_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_widthstdev();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticGeomProp_Proto::widthstdev() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.WidthStdev)
  return widthstdev_ != NULL ? *widthstdev_ : *default_instance_->widthstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::mutable_widthstdev() {
  set_has_widthstdev();
  if (widthstdev_ == NULL) widthstdev_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.WidthStdev)
  return widthstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::release_widthstdev() {
  clear_has_widthstdev();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = widthstdev_;
  widthstdev_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_allocated_widthstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* widthstdev) {
  delete widthstdev_;
  widthstdev_ = widthstdev;
  if (widthstdev) {
    set_has_widthstdev();
  } else {
    clear_has_widthstdev();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.WidthStdev)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto Height = 8;
inline bool AERO_t_TrafParticGeomProp_Proto::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_height() {
  if (height_ != NULL) height_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_height();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticGeomProp_Proto::height() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Height)
  return height_ != NULL ? *height_ : *default_instance_->height_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::mutable_height() {
  set_has_height();
  if (height_ == NULL) height_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Height)
  return height_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::release_height() {
  clear_has_height();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = height_;
  height_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_allocated_height(::aero_type_protobuf::AERO_t_float32Status_Proto* height) {
  delete height_;
  height_ = height;
  if (height) {
    set_has_height();
  } else {
    clear_has_height();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Height)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto HeightStdev = 9;
inline bool AERO_t_TrafParticGeomProp_Proto::has_heightstdev() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_has_heightstdev() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_has_heightstdev() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_heightstdev() {
  if (heightstdev_ != NULL) heightstdev_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_heightstdev();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticGeomProp_Proto::heightstdev() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.HeightStdev)
  return heightstdev_ != NULL ? *heightstdev_ : *default_instance_->heightstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::mutable_heightstdev() {
  set_has_heightstdev();
  if (heightstdev_ == NULL) heightstdev_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.HeightStdev)
  return heightstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::release_heightstdev() {
  clear_has_heightstdev();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = heightstdev_;
  heightstdev_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_allocated_heightstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* heightstdev) {
  delete heightstdev_;
  heightstdev_ = heightstdev;
  if (heightstdev) {
    set_has_heightstdev();
  } else {
    clear_has_heightstdev();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.HeightStdev)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto Heading = 10;
inline bool AERO_t_TrafParticGeomProp_Proto::has_heading() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_has_heading() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_has_heading() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_heading() {
  if (heading_ != NULL) heading_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_heading();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticGeomProp_Proto::heading() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Heading)
  return heading_ != NULL ? *heading_ : *default_instance_->heading_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::mutable_heading() {
  set_has_heading();
  if (heading_ == NULL) heading_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Heading)
  return heading_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::release_heading() {
  clear_has_heading();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = heading_;
  heading_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_allocated_heading(::aero_type_protobuf::AERO_t_float32Status_Proto* heading) {
  delete heading_;
  heading_ = heading;
  if (heading) {
    set_has_heading();
  } else {
    clear_has_heading();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.Heading)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto HeadingStdev = 11;
inline bool AERO_t_TrafParticGeomProp_Proto::has_headingstdev() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_has_headingstdev() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_has_headingstdev() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_headingstdev() {
  if (headingstdev_ != NULL) headingstdev_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_headingstdev();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticGeomProp_Proto::headingstdev() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.HeadingStdev)
  return headingstdev_ != NULL ? *headingstdev_ : *default_instance_->headingstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::mutable_headingstdev() {
  set_has_headingstdev();
  if (headingstdev_ == NULL) headingstdev_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.HeadingStdev)
  return headingstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::release_headingstdev() {
  clear_has_headingstdev();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = headingstdev_;
  headingstdev_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_allocated_headingstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* headingstdev) {
  delete headingstdev_;
  headingstdev_ = headingstdev;
  if (headingstdev) {
    set_has_headingstdev();
  } else {
    clear_has_headingstdev();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.HeadingStdev)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto PositionXYCrossStdev = 12;
inline bool AERO_t_TrafParticGeomProp_Proto::has_positionxycrossstdev() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_has_positionxycrossstdev() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_has_positionxycrossstdev() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AERO_t_TrafParticGeomProp_Proto::clear_positionxycrossstdev() {
  if (positionxycrossstdev_ != NULL) positionxycrossstdev_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_positionxycrossstdev();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticGeomProp_Proto::positionxycrossstdev() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.PositionXYCrossStdev)
  return positionxycrossstdev_ != NULL ? *positionxycrossstdev_ : *default_instance_->positionxycrossstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::mutable_positionxycrossstdev() {
  set_has_positionxycrossstdev();
  if (positionxycrossstdev_ == NULL) positionxycrossstdev_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.PositionXYCrossStdev)
  return positionxycrossstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticGeomProp_Proto::release_positionxycrossstdev() {
  clear_has_positionxycrossstdev();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = positionxycrossstdev_;
  positionxycrossstdev_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticGeomProp_Proto::set_allocated_positionxycrossstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* positionxycrossstdev) {
  delete positionxycrossstdev_;
  positionxycrossstdev_ = positionxycrossstdev;
  if (positionxycrossstdev) {
    set_has_positionxycrossstdev();
  } else {
    clear_has_positionxycrossstdev();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto.PositionXYCrossStdev)
}

// -------------------------------------------------------------------

// AERO_t_TrafParticDynProp_Proto

// optional .aero_type_protobuf.AERO_t_Point2DStatus_Proto Velocity = 1;
inline bool AERO_t_TrafParticDynProp_Proto::has_velocity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_TrafParticDynProp_Proto::set_has_velocity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_velocity() {
  if (velocity_ != NULL) velocity_->::aero_type_protobuf::AERO_t_Point2DStatus_Proto::Clear();
  clear_has_velocity();
}
inline const ::aero_type_protobuf::AERO_t_Point2DStatus_Proto& AERO_t_TrafParticDynProp_Proto::velocity() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.Velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::aero_type_protobuf::AERO_t_Point2DStatus_Proto* AERO_t_TrafParticDynProp_Proto::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::aero_type_protobuf::AERO_t_Point2DStatus_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.Velocity)
  return velocity_;
}
inline ::aero_type_protobuf::AERO_t_Point2DStatus_Proto* AERO_t_TrafParticDynProp_Proto::release_velocity() {
  clear_has_velocity();
  ::aero_type_protobuf::AERO_t_Point2DStatus_Proto* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticDynProp_Proto::set_allocated_velocity(::aero_type_protobuf::AERO_t_Point2DStatus_Proto* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.Velocity)
}

// optional .aero_type_protobuf.AERO_t_Point2DStatus_Proto VelocityStdev = 2;
inline bool AERO_t_TrafParticDynProp_Proto::has_velocitystdev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_TrafParticDynProp_Proto::set_has_velocitystdev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_has_velocitystdev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_velocitystdev() {
  if (velocitystdev_ != NULL) velocitystdev_->::aero_type_protobuf::AERO_t_Point2DStatus_Proto::Clear();
  clear_has_velocitystdev();
}
inline const ::aero_type_protobuf::AERO_t_Point2DStatus_Proto& AERO_t_TrafParticDynProp_Proto::velocitystdev() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.VelocityStdev)
  return velocitystdev_ != NULL ? *velocitystdev_ : *default_instance_->velocitystdev_;
}
inline ::aero_type_protobuf::AERO_t_Point2DStatus_Proto* AERO_t_TrafParticDynProp_Proto::mutable_velocitystdev() {
  set_has_velocitystdev();
  if (velocitystdev_ == NULL) velocitystdev_ = new ::aero_type_protobuf::AERO_t_Point2DStatus_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.VelocityStdev)
  return velocitystdev_;
}
inline ::aero_type_protobuf::AERO_t_Point2DStatus_Proto* AERO_t_TrafParticDynProp_Proto::release_velocitystdev() {
  clear_has_velocitystdev();
  ::aero_type_protobuf::AERO_t_Point2DStatus_Proto* temp = velocitystdev_;
  velocitystdev_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticDynProp_Proto::set_allocated_velocitystdev(::aero_type_protobuf::AERO_t_Point2DStatus_Proto* velocitystdev) {
  delete velocitystdev_;
  velocitystdev_ = velocitystdev;
  if (velocitystdev) {
    set_has_velocitystdev();
  } else {
    clear_has_velocitystdev();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.VelocityStdev)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto AccelerationX = 3;
inline bool AERO_t_TrafParticDynProp_Proto::has_accelerationx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_TrafParticDynProp_Proto::set_has_accelerationx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_has_accelerationx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_accelerationx() {
  if (accelerationx_ != NULL) accelerationx_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_accelerationx();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticDynProp_Proto::accelerationx() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationX)
  return accelerationx_ != NULL ? *accelerationx_ : *default_instance_->accelerationx_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticDynProp_Proto::mutable_accelerationx() {
  set_has_accelerationx();
  if (accelerationx_ == NULL) accelerationx_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationX)
  return accelerationx_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticDynProp_Proto::release_accelerationx() {
  clear_has_accelerationx();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = accelerationx_;
  accelerationx_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticDynProp_Proto::set_allocated_accelerationx(::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationx) {
  delete accelerationx_;
  accelerationx_ = accelerationx;
  if (accelerationx) {
    set_has_accelerationx();
  } else {
    clear_has_accelerationx();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationX)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto AccelerationXStdev = 4;
inline bool AERO_t_TrafParticDynProp_Proto::has_accelerationxstdev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_TrafParticDynProp_Proto::set_has_accelerationxstdev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_has_accelerationxstdev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_accelerationxstdev() {
  if (accelerationxstdev_ != NULL) accelerationxstdev_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_accelerationxstdev();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticDynProp_Proto::accelerationxstdev() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationXStdev)
  return accelerationxstdev_ != NULL ? *accelerationxstdev_ : *default_instance_->accelerationxstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticDynProp_Proto::mutable_accelerationxstdev() {
  set_has_accelerationxstdev();
  if (accelerationxstdev_ == NULL) accelerationxstdev_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationXStdev)
  return accelerationxstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticDynProp_Proto::release_accelerationxstdev() {
  clear_has_accelerationxstdev();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = accelerationxstdev_;
  accelerationxstdev_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticDynProp_Proto::set_allocated_accelerationxstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationxstdev) {
  delete accelerationxstdev_;
  accelerationxstdev_ = accelerationxstdev;
  if (accelerationxstdev) {
    set_has_accelerationxstdev();
  } else {
    clear_has_accelerationxstdev();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationXStdev)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto AccelerationY = 5;
inline bool AERO_t_TrafParticDynProp_Proto::has_accelerationy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_TrafParticDynProp_Proto::set_has_accelerationy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_has_accelerationy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_accelerationy() {
  if (accelerationy_ != NULL) accelerationy_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_accelerationy();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticDynProp_Proto::accelerationy() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationY)
  return accelerationy_ != NULL ? *accelerationy_ : *default_instance_->accelerationy_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticDynProp_Proto::mutable_accelerationy() {
  set_has_accelerationy();
  if (accelerationy_ == NULL) accelerationy_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationY)
  return accelerationy_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticDynProp_Proto::release_accelerationy() {
  clear_has_accelerationy();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = accelerationy_;
  accelerationy_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticDynProp_Proto::set_allocated_accelerationy(::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationy) {
  delete accelerationy_;
  accelerationy_ = accelerationy;
  if (accelerationy) {
    set_has_accelerationy();
  } else {
    clear_has_accelerationy();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationY)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto AccelerationYStdev = 6;
inline bool AERO_t_TrafParticDynProp_Proto::has_accelerationystdev() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AERO_t_TrafParticDynProp_Proto::set_has_accelerationystdev() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_has_accelerationystdev() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_accelerationystdev() {
  if (accelerationystdev_ != NULL) accelerationystdev_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_accelerationystdev();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticDynProp_Proto::accelerationystdev() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationYStdev)
  return accelerationystdev_ != NULL ? *accelerationystdev_ : *default_instance_->accelerationystdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticDynProp_Proto::mutable_accelerationystdev() {
  set_has_accelerationystdev();
  if (accelerationystdev_ == NULL) accelerationystdev_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationYStdev)
  return accelerationystdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticDynProp_Proto::release_accelerationystdev() {
  clear_has_accelerationystdev();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = accelerationystdev_;
  accelerationystdev_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticDynProp_Proto::set_allocated_accelerationystdev(::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationystdev) {
  delete accelerationystdev_;
  accelerationystdev_ = accelerationystdev;
  if (accelerationystdev) {
    set_has_accelerationystdev();
  } else {
    clear_has_accelerationystdev();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationYStdev)
}

// optional float f_MaxObsSpeed = 7;
inline bool AERO_t_TrafParticDynProp_Proto::has_f_maxobsspeed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AERO_t_TrafParticDynProp_Proto::set_has_f_maxobsspeed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_has_f_maxobsspeed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_f_maxobsspeed() {
  f_maxobsspeed_ = 0;
  clear_has_f_maxobsspeed();
}
inline float AERO_t_TrafParticDynProp_Proto::f_maxobsspeed() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.f_MaxObsSpeed)
  return f_maxobsspeed_;
}
inline void AERO_t_TrafParticDynProp_Proto::set_f_maxobsspeed(float value) {
  set_has_f_maxobsspeed();
  f_maxobsspeed_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.f_MaxObsSpeed)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto VelocityUVCrossStdev = 8;
inline bool AERO_t_TrafParticDynProp_Proto::has_velocityuvcrossstdev() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AERO_t_TrafParticDynProp_Proto::set_has_velocityuvcrossstdev() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_has_velocityuvcrossstdev() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_velocityuvcrossstdev() {
  if (velocityuvcrossstdev_ != NULL) velocityuvcrossstdev_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_velocityuvcrossstdev();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticDynProp_Proto::velocityuvcrossstdev() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.VelocityUVCrossStdev)
  return velocityuvcrossstdev_ != NULL ? *velocityuvcrossstdev_ : *default_instance_->velocityuvcrossstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticDynProp_Proto::mutable_velocityuvcrossstdev() {
  set_has_velocityuvcrossstdev();
  if (velocityuvcrossstdev_ == NULL) velocityuvcrossstdev_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.VelocityUVCrossStdev)
  return velocityuvcrossstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticDynProp_Proto::release_velocityuvcrossstdev() {
  clear_has_velocityuvcrossstdev();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = velocityuvcrossstdev_;
  velocityuvcrossstdev_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticDynProp_Proto::set_allocated_velocityuvcrossstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* velocityuvcrossstdev) {
  delete velocityuvcrossstdev_;
  velocityuvcrossstdev_ = velocityuvcrossstdev;
  if (velocityuvcrossstdev) {
    set_has_velocityuvcrossstdev();
  } else {
    clear_has_velocityuvcrossstdev();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.VelocityUVCrossStdev)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto AccelerationXYCrossStdev = 9;
inline bool AERO_t_TrafParticDynProp_Proto::has_accelerationxycrossstdev() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AERO_t_TrafParticDynProp_Proto::set_has_accelerationxycrossstdev() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_has_accelerationxycrossstdev() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AERO_t_TrafParticDynProp_Proto::clear_accelerationxycrossstdev() {
  if (accelerationxycrossstdev_ != NULL) accelerationxycrossstdev_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_accelerationxycrossstdev();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_TrafParticDynProp_Proto::accelerationxycrossstdev() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationXYCrossStdev)
  return accelerationxycrossstdev_ != NULL ? *accelerationxycrossstdev_ : *default_instance_->accelerationxycrossstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticDynProp_Proto::mutable_accelerationxycrossstdev() {
  set_has_accelerationxycrossstdev();
  if (accelerationxycrossstdev_ == NULL) accelerationxycrossstdev_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationXYCrossStdev)
  return accelerationxycrossstdev_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_TrafParticDynProp_Proto::release_accelerationxycrossstdev() {
  clear_has_accelerationxycrossstdev();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = accelerationxycrossstdev_;
  accelerationxycrossstdev_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticDynProp_Proto::set_allocated_accelerationxycrossstdev(::aero_type_protobuf::AERO_t_float32Status_Proto* accelerationxycrossstdev) {
  delete accelerationxycrossstdev_;
  accelerationxycrossstdev_ = accelerationxycrossstdev;
  if (accelerationxycrossstdev) {
    set_has_accelerationxycrossstdev();
  } else {
    clear_has_accelerationxycrossstdev();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto.AccelerationXYCrossStdev)
}

// -------------------------------------------------------------------

// AERO_t_TrafParticSupportProp_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_TrafParticSupportProp_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_TrafParticSupportProp_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_TrafParticSupportProp_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_TrafParticSupportProp_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_TrafParticSupportProp_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticSupportProp_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_TrafParticSupportProp_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafParticSupportProp_Proto.e_SignalStatus)
}

// optional uint32 u_SupportFlag = 2;
inline bool AERO_t_TrafParticSupportProp_Proto::has_u_supportflag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_TrafParticSupportProp_Proto::set_has_u_supportflag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_TrafParticSupportProp_Proto::clear_has_u_supportflag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_TrafParticSupportProp_Proto::clear_u_supportflag() {
  u_supportflag_ = 0u;
  clear_has_u_supportflag();
}
inline ::google::protobuf::uint32 AERO_t_TrafParticSupportProp_Proto::u_supportflag() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticSupportProp_Proto.u_SupportFlag)
  return u_supportflag_;
}
inline void AERO_t_TrafParticSupportProp_Proto::set_u_supportflag(::google::protobuf::uint32 value) {
  set_has_u_supportflag();
  u_supportflag_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafParticSupportProp_Proto.u_SupportFlag)
}

// -------------------------------------------------------------------

// AERO_t_TrafParticDebugProp_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_TrafParticDebugProp_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_TrafParticDebugProp_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_TrafParticDebugProp_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_TrafParticDebugProp_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_TrafParticDebugProp_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticDebugProp_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_TrafParticDebugProp_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafParticDebugProp_Proto.e_SignalStatus)
}

// -------------------------------------------------------------------

// AERO_t_TrafPartic_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_TrafPartic_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_TrafPartic_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_TrafPartic_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_TrafPartic_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_TrafPartic_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_TrafPartic_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.e_SignalStatus)
}

// optional .aero_trafpartic_protobuf.AERO_t_TrafParticAdminProp_Proto AdminProp = 2;
inline bool AERO_t_TrafPartic_Proto::has_adminprop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_TrafPartic_Proto::set_has_adminprop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_TrafPartic_Proto::clear_has_adminprop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_TrafPartic_Proto::clear_adminprop() {
  if (adminprop_ != NULL) adminprop_->::aero_trafpartic_protobuf::AERO_t_TrafParticAdminProp_Proto::Clear();
  clear_has_adminprop();
}
inline const ::aero_trafpartic_protobuf::AERO_t_TrafParticAdminProp_Proto& AERO_t_TrafPartic_Proto::adminprop() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.AdminProp)
  return adminprop_ != NULL ? *adminprop_ : *default_instance_->adminprop_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafParticAdminProp_Proto* AERO_t_TrafPartic_Proto::mutable_adminprop() {
  set_has_adminprop();
  if (adminprop_ == NULL) adminprop_ = new ::aero_trafpartic_protobuf::AERO_t_TrafParticAdminProp_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.AdminProp)
  return adminprop_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafParticAdminProp_Proto* AERO_t_TrafPartic_Proto::release_adminprop() {
  clear_has_adminprop();
  ::aero_trafpartic_protobuf::AERO_t_TrafParticAdminProp_Proto* temp = adminprop_;
  adminprop_ = NULL;
  return temp;
}
inline void AERO_t_TrafPartic_Proto::set_allocated_adminprop(::aero_trafpartic_protobuf::AERO_t_TrafParticAdminProp_Proto* adminprop) {
  delete adminprop_;
  adminprop_ = adminprop;
  if (adminprop) {
    set_has_adminprop();
  } else {
    clear_has_adminprop();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.AdminProp)
}

// optional .aero_trafpartic_protobuf.AERO_t_TrafParticGeomProp_Proto GeomProp = 3;
inline bool AERO_t_TrafPartic_Proto::has_geomprop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_TrafPartic_Proto::set_has_geomprop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_TrafPartic_Proto::clear_has_geomprop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_TrafPartic_Proto::clear_geomprop() {
  if (geomprop_ != NULL) geomprop_->::aero_trafpartic_protobuf::AERO_t_TrafParticGeomProp_Proto::Clear();
  clear_has_geomprop();
}
inline const ::aero_trafpartic_protobuf::AERO_t_TrafParticGeomProp_Proto& AERO_t_TrafPartic_Proto::geomprop() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.GeomProp)
  return geomprop_ != NULL ? *geomprop_ : *default_instance_->geomprop_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafParticGeomProp_Proto* AERO_t_TrafPartic_Proto::mutable_geomprop() {
  set_has_geomprop();
  if (geomprop_ == NULL) geomprop_ = new ::aero_trafpartic_protobuf::AERO_t_TrafParticGeomProp_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.GeomProp)
  return geomprop_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafParticGeomProp_Proto* AERO_t_TrafPartic_Proto::release_geomprop() {
  clear_has_geomprop();
  ::aero_trafpartic_protobuf::AERO_t_TrafParticGeomProp_Proto* temp = geomprop_;
  geomprop_ = NULL;
  return temp;
}
inline void AERO_t_TrafPartic_Proto::set_allocated_geomprop(::aero_trafpartic_protobuf::AERO_t_TrafParticGeomProp_Proto* geomprop) {
  delete geomprop_;
  geomprop_ = geomprop;
  if (geomprop) {
    set_has_geomprop();
  } else {
    clear_has_geomprop();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.GeomProp)
}

// optional .aero_trafpartic_protobuf.AERO_t_TrafParticDynProp_Proto DynProp = 4;
inline bool AERO_t_TrafPartic_Proto::has_dynprop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_TrafPartic_Proto::set_has_dynprop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_TrafPartic_Proto::clear_has_dynprop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_TrafPartic_Proto::clear_dynprop() {
  if (dynprop_ != NULL) dynprop_->::aero_trafpartic_protobuf::AERO_t_TrafParticDynProp_Proto::Clear();
  clear_has_dynprop();
}
inline const ::aero_trafpartic_protobuf::AERO_t_TrafParticDynProp_Proto& AERO_t_TrafPartic_Proto::dynprop() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.DynProp)
  return dynprop_ != NULL ? *dynprop_ : *default_instance_->dynprop_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafParticDynProp_Proto* AERO_t_TrafPartic_Proto::mutable_dynprop() {
  set_has_dynprop();
  if (dynprop_ == NULL) dynprop_ = new ::aero_trafpartic_protobuf::AERO_t_TrafParticDynProp_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.DynProp)
  return dynprop_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafParticDynProp_Proto* AERO_t_TrafPartic_Proto::release_dynprop() {
  clear_has_dynprop();
  ::aero_trafpartic_protobuf::AERO_t_TrafParticDynProp_Proto* temp = dynprop_;
  dynprop_ = NULL;
  return temp;
}
inline void AERO_t_TrafPartic_Proto::set_allocated_dynprop(::aero_trafpartic_protobuf::AERO_t_TrafParticDynProp_Proto* dynprop) {
  delete dynprop_;
  dynprop_ = dynprop;
  if (dynprop) {
    set_has_dynprop();
  } else {
    clear_has_dynprop();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.DynProp)
}

// optional .aero_trafpartic_protobuf.AERO_t_TrafParticSupportProp_Proto SupportProp = 5;
inline bool AERO_t_TrafPartic_Proto::has_supportprop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_TrafPartic_Proto::set_has_supportprop() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_TrafPartic_Proto::clear_has_supportprop() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_TrafPartic_Proto::clear_supportprop() {
  if (supportprop_ != NULL) supportprop_->::aero_trafpartic_protobuf::AERO_t_TrafParticSupportProp_Proto::Clear();
  clear_has_supportprop();
}
inline const ::aero_trafpartic_protobuf::AERO_t_TrafParticSupportProp_Proto& AERO_t_TrafPartic_Proto::supportprop() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.SupportProp)
  return supportprop_ != NULL ? *supportprop_ : *default_instance_->supportprop_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafParticSupportProp_Proto* AERO_t_TrafPartic_Proto::mutable_supportprop() {
  set_has_supportprop();
  if (supportprop_ == NULL) supportprop_ = new ::aero_trafpartic_protobuf::AERO_t_TrafParticSupportProp_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.SupportProp)
  return supportprop_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafParticSupportProp_Proto* AERO_t_TrafPartic_Proto::release_supportprop() {
  clear_has_supportprop();
  ::aero_trafpartic_protobuf::AERO_t_TrafParticSupportProp_Proto* temp = supportprop_;
  supportprop_ = NULL;
  return temp;
}
inline void AERO_t_TrafPartic_Proto::set_allocated_supportprop(::aero_trafpartic_protobuf::AERO_t_TrafParticSupportProp_Proto* supportprop) {
  delete supportprop_;
  supportprop_ = supportprop;
  if (supportprop) {
    set_has_supportprop();
  } else {
    clear_has_supportprop();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.SupportProp)
}

// optional .aero_trafpartic_protobuf.AERO_t_TrafParticDebugProp_Proto DebugProp = 6;
inline bool AERO_t_TrafPartic_Proto::has_debugprop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AERO_t_TrafPartic_Proto::set_has_debugprop() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AERO_t_TrafPartic_Proto::clear_has_debugprop() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AERO_t_TrafPartic_Proto::clear_debugprop() {
  if (debugprop_ != NULL) debugprop_->::aero_trafpartic_protobuf::AERO_t_TrafParticDebugProp_Proto::Clear();
  clear_has_debugprop();
}
inline const ::aero_trafpartic_protobuf::AERO_t_TrafParticDebugProp_Proto& AERO_t_TrafPartic_Proto::debugprop() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.DebugProp)
  return debugprop_ != NULL ? *debugprop_ : *default_instance_->debugprop_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafParticDebugProp_Proto* AERO_t_TrafPartic_Proto::mutable_debugprop() {
  set_has_debugprop();
  if (debugprop_ == NULL) debugprop_ = new ::aero_trafpartic_protobuf::AERO_t_TrafParticDebugProp_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.DebugProp)
  return debugprop_;
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafParticDebugProp_Proto* AERO_t_TrafPartic_Proto::release_debugprop() {
  clear_has_debugprop();
  ::aero_trafpartic_protobuf::AERO_t_TrafParticDebugProp_Proto* temp = debugprop_;
  debugprop_ = NULL;
  return temp;
}
inline void AERO_t_TrafPartic_Proto::set_allocated_debugprop(::aero_trafpartic_protobuf::AERO_t_TrafParticDebugProp_Proto* debugprop) {
  delete debugprop_;
  debugprop_ = debugprop;
  if (debugprop) {
    set_has_debugprop();
  } else {
    clear_has_debugprop();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto.DebugProp)
}

// -------------------------------------------------------------------

// AERO_t_TrafParticList_Proto

// optional .aero_type_protobuf.AERO_t_SignalHeader_Proto SignalHeader = 1;
inline bool AERO_t_TrafParticList_Proto::has_signalheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_TrafParticList_Proto::set_has_signalheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_TrafParticList_Proto::clear_has_signalheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_TrafParticList_Proto::clear_signalheader() {
  if (signalheader_ != NULL) signalheader_->::aero_type_protobuf::AERO_t_SignalHeader_Proto::Clear();
  clear_has_signalheader();
}
inline const ::aero_type_protobuf::AERO_t_SignalHeader_Proto& AERO_t_TrafParticList_Proto::signalheader() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.SignalHeader)
  return signalheader_ != NULL ? *signalheader_ : *default_instance_->signalheader_;
}
inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* AERO_t_TrafParticList_Proto::mutable_signalheader() {
  set_has_signalheader();
  if (signalheader_ == NULL) signalheader_ = new ::aero_type_protobuf::AERO_t_SignalHeader_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.SignalHeader)
  return signalheader_;
}
inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* AERO_t_TrafParticList_Proto::release_signalheader() {
  clear_has_signalheader();
  ::aero_type_protobuf::AERO_t_SignalHeader_Proto* temp = signalheader_;
  signalheader_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticList_Proto::set_allocated_signalheader(::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader) {
  delete signalheader_;
  signalheader_ = signalheader;
  if (signalheader) {
    set_has_signalheader();
  } else {
    clear_has_signalheader();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.SignalHeader)
}

// optional .aero_type_protobuf.AERO_t_SensorStatus_Proto SensorStatus = 5;
inline bool AERO_t_TrafParticList_Proto::has_sensorstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_TrafParticList_Proto::set_has_sensorstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_TrafParticList_Proto::clear_has_sensorstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_TrafParticList_Proto::clear_sensorstatus() {
  if (sensorstatus_ != NULL) sensorstatus_->::aero_type_protobuf::AERO_t_SensorStatus_Proto::Clear();
  clear_has_sensorstatus();
}
inline const ::aero_type_protobuf::AERO_t_SensorStatus_Proto& AERO_t_TrafParticList_Proto::sensorstatus() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.SensorStatus)
  return sensorstatus_ != NULL ? *sensorstatus_ : *default_instance_->sensorstatus_;
}
inline ::aero_type_protobuf::AERO_t_SensorStatus_Proto* AERO_t_TrafParticList_Proto::mutable_sensorstatus() {
  set_has_sensorstatus();
  if (sensorstatus_ == NULL) sensorstatus_ = new ::aero_type_protobuf::AERO_t_SensorStatus_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.SensorStatus)
  return sensorstatus_;
}
inline ::aero_type_protobuf::AERO_t_SensorStatus_Proto* AERO_t_TrafParticList_Proto::release_sensorstatus() {
  clear_has_sensorstatus();
  ::aero_type_protobuf::AERO_t_SensorStatus_Proto* temp = sensorstatus_;
  sensorstatus_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticList_Proto::set_allocated_sensorstatus(::aero_type_protobuf::AERO_t_SensorStatus_Proto* sensorstatus) {
  delete sensorstatus_;
  sensorstatus_ = sensorstatus;
  if (sensorstatus) {
    set_has_sensorstatus();
  } else {
    clear_has_sensorstatus();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.SensorStatus)
}

// optional uint32 u_NumTrafficParticipants = 2;
inline bool AERO_t_TrafParticList_Proto::has_u_numtrafficparticipants() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_TrafParticList_Proto::set_has_u_numtrafficparticipants() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_TrafParticList_Proto::clear_has_u_numtrafficparticipants() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_TrafParticList_Proto::clear_u_numtrafficparticipants() {
  u_numtrafficparticipants_ = 0u;
  clear_has_u_numtrafficparticipants();
}
inline ::google::protobuf::uint32 AERO_t_TrafParticList_Proto::u_numtrafficparticipants() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.u_NumTrafficParticipants)
  return u_numtrafficparticipants_;
}
inline void AERO_t_TrafParticList_Proto::set_u_numtrafficparticipants(::google::protobuf::uint32 value) {
  set_has_u_numtrafficparticipants();
  u_numtrafficparticipants_ = value;
  // @@protoc_insertion_point(field_set:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.u_NumTrafficParticipants)
}

// optional .aero_type_protobuf.AERO_t_Motion_Proto EgoMotion = 3;
inline bool AERO_t_TrafParticList_Proto::has_egomotion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_TrafParticList_Proto::set_has_egomotion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_TrafParticList_Proto::clear_has_egomotion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_TrafParticList_Proto::clear_egomotion() {
  if (egomotion_ != NULL) egomotion_->::aero_type_protobuf::AERO_t_Motion_Proto::Clear();
  clear_has_egomotion();
}
inline const ::aero_type_protobuf::AERO_t_Motion_Proto& AERO_t_TrafParticList_Proto::egomotion() const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.EgoMotion)
  return egomotion_ != NULL ? *egomotion_ : *default_instance_->egomotion_;
}
inline ::aero_type_protobuf::AERO_t_Motion_Proto* AERO_t_TrafParticList_Proto::mutable_egomotion() {
  set_has_egomotion();
  if (egomotion_ == NULL) egomotion_ = new ::aero_type_protobuf::AERO_t_Motion_Proto;
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.EgoMotion)
  return egomotion_;
}
inline ::aero_type_protobuf::AERO_t_Motion_Proto* AERO_t_TrafParticList_Proto::release_egomotion() {
  clear_has_egomotion();
  ::aero_type_protobuf::AERO_t_Motion_Proto* temp = egomotion_;
  egomotion_ = NULL;
  return temp;
}
inline void AERO_t_TrafParticList_Proto::set_allocated_egomotion(::aero_type_protobuf::AERO_t_Motion_Proto* egomotion) {
  delete egomotion_;
  egomotion_ = egomotion;
  if (egomotion) {
    set_has_egomotion();
  } else {
    clear_has_egomotion();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.EgoMotion)
}

// repeated .aero_trafpartic_protobuf.AERO_t_TrafPartic_Proto TrafPart = 4;
inline int AERO_t_TrafParticList_Proto::trafpart_size() const {
  return trafpart_.size();
}
inline void AERO_t_TrafParticList_Proto::clear_trafpart() {
  trafpart_.Clear();
}
inline const ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Proto& AERO_t_TrafParticList_Proto::trafpart(int index) const {
  // @@protoc_insertion_point(field_get:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.TrafPart)
  return trafpart_.Get(index);
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Proto* AERO_t_TrafParticList_Proto::mutable_trafpart(int index) {
  // @@protoc_insertion_point(field_mutable:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.TrafPart)
  return trafpart_.Mutable(index);
}
inline ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Proto* AERO_t_TrafParticList_Proto::add_trafpart() {
  // @@protoc_insertion_point(field_add:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.TrafPart)
  return trafpart_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Proto >&
AERO_t_TrafParticList_Proto::trafpart() const {
  // @@protoc_insertion_point(field_list:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.TrafPart)
  return trafpart_;
}
inline ::google::protobuf::RepeatedPtrField< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Proto >*
AERO_t_TrafParticList_Proto::mutable_trafpart() {
  // @@protoc_insertion_point(field_mutable_list:aero_trafpartic_protobuf.AERO_t_TrafParticList_Proto.TrafPart)
  return &trafpart_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace aero_trafpartic_protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_State_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_State_Proto>() {
  return ::aero_trafpartic_protobuf::AERO_t_TrafPartic_State_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto>() {
  return ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Class_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Track_Status_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Track_Status_Proto>() {
  return ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Track_Status_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Reference_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Reference_Proto>() {
  return ::aero_trafpartic_protobuf::AERO_t_TrafPartic_Reference_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_SFlag_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_trafpartic_protobuf::AERO_t_TrafPartic_SFlag_Proto>() {
  return ::aero_trafpartic_protobuf::AERO_t_TrafPartic_SFlag_Proto_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_aero_5ftraffic_5fparticipants_2eproto__INCLUDED

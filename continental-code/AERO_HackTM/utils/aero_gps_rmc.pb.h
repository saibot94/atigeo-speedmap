// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aero_gps_rmc.proto

#ifndef PROTOBUF_aero_5fgps_5frmc_2eproto__INCLUDED
#define PROTOBUF_aero_5fgps_5frmc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "aero_type.pb.h"
// @@protoc_insertion_point(includes)

namespace aero_gps_rmc_protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_aero_5fgps_5frmc_2eproto();
void protobuf_AssignDesc_aero_5fgps_5frmc_2eproto();
void protobuf_ShutdownFile_aero_5fgps_5frmc_2eproto();

class AERO_t_GpsRmc_Proto;

// ===================================================================

class AERO_t_GpsRmc_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_GpsRmc_Proto();
  virtual ~AERO_t_GpsRmc_Proto();

  AERO_t_GpsRmc_Proto(const AERO_t_GpsRmc_Proto& from);

  inline AERO_t_GpsRmc_Proto& operator=(const AERO_t_GpsRmc_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_GpsRmc_Proto& default_instance();

  void Swap(AERO_t_GpsRmc_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_GpsRmc_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_GpsRmc_Proto& from);
  void MergeFrom(const AERO_t_GpsRmc_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalHeader_Proto signalHeader = 1;
  inline bool has_signalheader() const;
  inline void clear_signalheader();
  static const int kSignalHeaderFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_SignalHeader_Proto& signalheader() const;
  inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* mutable_signalheader();
  inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* release_signalheader();
  inline void set_allocated_signalheader(::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader);

  // optional sint32 s_GpsStatus = 2;
  inline bool has_s_gpsstatus() const;
  inline void clear_s_gpsstatus();
  static const int kSGpsStatusFieldNumber = 2;
  inline ::google::protobuf::int32 s_gpsstatus() const;
  inline void set_s_gpsstatus(::google::protobuf::int32 value);

  // optional uint64 u_UTCTime = 3;
  inline bool has_u_utctime() const;
  inline void clear_u_utctime();
  static const int kUUTCTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 u_utctime() const;
  inline void set_u_utctime(::google::protobuf::uint64 value);

  // optional double f_LatitudeRad = 4;
  inline bool has_f_latituderad() const;
  inline void clear_f_latituderad();
  static const int kFLatitudeRadFieldNumber = 4;
  inline double f_latituderad() const;
  inline void set_f_latituderad(double value);

  // optional double f_Latitude = 5;
  inline bool has_f_latitude() const;
  inline void clear_f_latitude();
  static const int kFLatitudeFieldNumber = 5;
  inline double f_latitude() const;
  inline void set_f_latitude(double value);

  // optional sint32 s_LatitudeHemi = 6;
  inline bool has_s_latitudehemi() const;
  inline void clear_s_latitudehemi();
  static const int kSLatitudeHemiFieldNumber = 6;
  inline ::google::protobuf::int32 s_latitudehemi() const;
  inline void set_s_latitudehemi(::google::protobuf::int32 value);

  // optional double f_LongitudeRad = 7;
  inline bool has_f_longituderad() const;
  inline void clear_f_longituderad();
  static const int kFLongitudeRadFieldNumber = 7;
  inline double f_longituderad() const;
  inline void set_f_longituderad(double value);

  // optional double f_Longitude = 8;
  inline bool has_f_longitude() const;
  inline void clear_f_longitude();
  static const int kFLongitudeFieldNumber = 8;
  inline double f_longitude() const;
  inline void set_f_longitude(double value);

  // optional sint32 s_LongitudeHemi = 9;
  inline bool has_s_longitudehemi() const;
  inline void clear_s_longitudehemi();
  static const int kSLongitudeHemiFieldNumber = 9;
  inline ::google::protobuf::int32 s_longitudehemi() const;
  inline void set_s_longitudehemi(::google::protobuf::int32 value);

  // optional double f_SpeedOverGround = 10;
  inline bool has_f_speedoverground() const;
  inline void clear_f_speedoverground();
  static const int kFSpeedOverGroundFieldNumber = 10;
  inline double f_speedoverground() const;
  inline void set_f_speedoverground(double value);

  // optional double f_CourseOverGround = 11;
  inline bool has_f_courseoverground() const;
  inline void clear_f_courseoverground();
  static const int kFCourseOverGroundFieldNumber = 11;
  inline double f_courseoverground() const;
  inline void set_f_courseoverground(double value);

  // optional double f_MagneticVariationRad = 12;
  inline bool has_f_magneticvariationrad() const;
  inline void clear_f_magneticvariationrad();
  static const int kFMagneticVariationRadFieldNumber = 12;
  inline double f_magneticvariationrad() const;
  inline void set_f_magneticvariationrad(double value);

  // optional double f_MagneticVariation = 13;
  inline bool has_f_magneticvariation() const;
  inline void clear_f_magneticvariation();
  static const int kFMagneticVariationFieldNumber = 13;
  inline double f_magneticvariation() const;
  inline void set_f_magneticvariation(double value);

  // optional sint32 s_MagneticVariationDir = 14;
  inline bool has_s_magneticvariationdir() const;
  inline void clear_s_magneticvariationdir();
  static const int kSMagneticVariationDirFieldNumber = 14;
  inline ::google::protobuf::int32 s_magneticvariationdir() const;
  inline void set_s_magneticvariationdir(::google::protobuf::int32 value);

  // optional sint32 s_Mode = 15;
  inline bool has_s_mode() const;
  inline void clear_s_mode();
  static const int kSModeFieldNumber = 15;
  inline ::google::protobuf::int32 s_mode() const;
  inline void set_s_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto)
 private:
  inline void set_has_signalheader();
  inline void clear_has_signalheader();
  inline void set_has_s_gpsstatus();
  inline void clear_has_s_gpsstatus();
  inline void set_has_u_utctime();
  inline void clear_has_u_utctime();
  inline void set_has_f_latituderad();
  inline void clear_has_f_latituderad();
  inline void set_has_f_latitude();
  inline void clear_has_f_latitude();
  inline void set_has_s_latitudehemi();
  inline void clear_has_s_latitudehemi();
  inline void set_has_f_longituderad();
  inline void clear_has_f_longituderad();
  inline void set_has_f_longitude();
  inline void clear_has_f_longitude();
  inline void set_has_s_longitudehemi();
  inline void clear_has_s_longitudehemi();
  inline void set_has_f_speedoverground();
  inline void clear_has_f_speedoverground();
  inline void set_has_f_courseoverground();
  inline void clear_has_f_courseoverground();
  inline void set_has_f_magneticvariationrad();
  inline void clear_has_f_magneticvariationrad();
  inline void set_has_f_magneticvariation();
  inline void clear_has_f_magneticvariation();
  inline void set_has_s_magneticvariationdir();
  inline void clear_has_s_magneticvariationdir();
  inline void set_has_s_mode();
  inline void clear_has_s_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader_;
  ::google::protobuf::uint64 u_utctime_;
  double f_latituderad_;
  ::google::protobuf::int32 s_gpsstatus_;
  ::google::protobuf::int32 s_latitudehemi_;
  double f_latitude_;
  double f_longituderad_;
  double f_longitude_;
  double f_speedoverground_;
  double f_courseoverground_;
  ::google::protobuf::int32 s_longitudehemi_;
  ::google::protobuf::int32 s_magneticvariationdir_;
  double f_magneticvariationrad_;
  double f_magneticvariation_;
  ::google::protobuf::int32 s_mode_;
  friend void  protobuf_AddDesc_aero_5fgps_5frmc_2eproto();
  friend void protobuf_AssignDesc_aero_5fgps_5frmc_2eproto();
  friend void protobuf_ShutdownFile_aero_5fgps_5frmc_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_GpsRmc_Proto* default_instance_;
};
// ===================================================================


// ===================================================================

// AERO_t_GpsRmc_Proto

// optional .aero_type_protobuf.AERO_t_SignalHeader_Proto signalHeader = 1;
inline bool AERO_t_GpsRmc_Proto::has_signalheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_signalheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_signalheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_GpsRmc_Proto::clear_signalheader() {
  if (signalheader_ != NULL) signalheader_->::aero_type_protobuf::AERO_t_SignalHeader_Proto::Clear();
  clear_has_signalheader();
}
inline const ::aero_type_protobuf::AERO_t_SignalHeader_Proto& AERO_t_GpsRmc_Proto::signalheader() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.signalHeader)
  return signalheader_ != NULL ? *signalheader_ : *default_instance_->signalheader_;
}
inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* AERO_t_GpsRmc_Proto::mutable_signalheader() {
  set_has_signalheader();
  if (signalheader_ == NULL) signalheader_ = new ::aero_type_protobuf::AERO_t_SignalHeader_Proto;
  // @@protoc_insertion_point(field_mutable:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.signalHeader)
  return signalheader_;
}
inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* AERO_t_GpsRmc_Proto::release_signalheader() {
  clear_has_signalheader();
  ::aero_type_protobuf::AERO_t_SignalHeader_Proto* temp = signalheader_;
  signalheader_ = NULL;
  return temp;
}
inline void AERO_t_GpsRmc_Proto::set_allocated_signalheader(::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader) {
  delete signalheader_;
  signalheader_ = signalheader;
  if (signalheader) {
    set_has_signalheader();
  } else {
    clear_has_signalheader();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.signalHeader)
}

// optional sint32 s_GpsStatus = 2;
inline bool AERO_t_GpsRmc_Proto::has_s_gpsstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_s_gpsstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_s_gpsstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_GpsRmc_Proto::clear_s_gpsstatus() {
  s_gpsstatus_ = 0;
  clear_has_s_gpsstatus();
}
inline ::google::protobuf::int32 AERO_t_GpsRmc_Proto::s_gpsstatus() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.s_GpsStatus)
  return s_gpsstatus_;
}
inline void AERO_t_GpsRmc_Proto::set_s_gpsstatus(::google::protobuf::int32 value) {
  set_has_s_gpsstatus();
  s_gpsstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.s_GpsStatus)
}

// optional uint64 u_UTCTime = 3;
inline bool AERO_t_GpsRmc_Proto::has_u_utctime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_u_utctime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_u_utctime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_GpsRmc_Proto::clear_u_utctime() {
  u_utctime_ = GOOGLE_ULONGLONG(0);
  clear_has_u_utctime();
}
inline ::google::protobuf::uint64 AERO_t_GpsRmc_Proto::u_utctime() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.u_UTCTime)
  return u_utctime_;
}
inline void AERO_t_GpsRmc_Proto::set_u_utctime(::google::protobuf::uint64 value) {
  set_has_u_utctime();
  u_utctime_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.u_UTCTime)
}

// optional double f_LatitudeRad = 4;
inline bool AERO_t_GpsRmc_Proto::has_f_latituderad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_f_latituderad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_f_latituderad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_GpsRmc_Proto::clear_f_latituderad() {
  f_latituderad_ = 0;
  clear_has_f_latituderad();
}
inline double AERO_t_GpsRmc_Proto::f_latituderad() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_LatitudeRad)
  return f_latituderad_;
}
inline void AERO_t_GpsRmc_Proto::set_f_latituderad(double value) {
  set_has_f_latituderad();
  f_latituderad_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_LatitudeRad)
}

// optional double f_Latitude = 5;
inline bool AERO_t_GpsRmc_Proto::has_f_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_f_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_f_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_GpsRmc_Proto::clear_f_latitude() {
  f_latitude_ = 0;
  clear_has_f_latitude();
}
inline double AERO_t_GpsRmc_Proto::f_latitude() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_Latitude)
  return f_latitude_;
}
inline void AERO_t_GpsRmc_Proto::set_f_latitude(double value) {
  set_has_f_latitude();
  f_latitude_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_Latitude)
}

// optional sint32 s_LatitudeHemi = 6;
inline bool AERO_t_GpsRmc_Proto::has_s_latitudehemi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_s_latitudehemi() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_s_latitudehemi() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AERO_t_GpsRmc_Proto::clear_s_latitudehemi() {
  s_latitudehemi_ = 0;
  clear_has_s_latitudehemi();
}
inline ::google::protobuf::int32 AERO_t_GpsRmc_Proto::s_latitudehemi() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.s_LatitudeHemi)
  return s_latitudehemi_;
}
inline void AERO_t_GpsRmc_Proto::set_s_latitudehemi(::google::protobuf::int32 value) {
  set_has_s_latitudehemi();
  s_latitudehemi_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.s_LatitudeHemi)
}

// optional double f_LongitudeRad = 7;
inline bool AERO_t_GpsRmc_Proto::has_f_longituderad() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_f_longituderad() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_f_longituderad() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AERO_t_GpsRmc_Proto::clear_f_longituderad() {
  f_longituderad_ = 0;
  clear_has_f_longituderad();
}
inline double AERO_t_GpsRmc_Proto::f_longituderad() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_LongitudeRad)
  return f_longituderad_;
}
inline void AERO_t_GpsRmc_Proto::set_f_longituderad(double value) {
  set_has_f_longituderad();
  f_longituderad_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_LongitudeRad)
}

// optional double f_Longitude = 8;
inline bool AERO_t_GpsRmc_Proto::has_f_longitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_f_longitude() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_f_longitude() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AERO_t_GpsRmc_Proto::clear_f_longitude() {
  f_longitude_ = 0;
  clear_has_f_longitude();
}
inline double AERO_t_GpsRmc_Proto::f_longitude() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_Longitude)
  return f_longitude_;
}
inline void AERO_t_GpsRmc_Proto::set_f_longitude(double value) {
  set_has_f_longitude();
  f_longitude_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_Longitude)
}

// optional sint32 s_LongitudeHemi = 9;
inline bool AERO_t_GpsRmc_Proto::has_s_longitudehemi() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_s_longitudehemi() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_s_longitudehemi() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AERO_t_GpsRmc_Proto::clear_s_longitudehemi() {
  s_longitudehemi_ = 0;
  clear_has_s_longitudehemi();
}
inline ::google::protobuf::int32 AERO_t_GpsRmc_Proto::s_longitudehemi() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.s_LongitudeHemi)
  return s_longitudehemi_;
}
inline void AERO_t_GpsRmc_Proto::set_s_longitudehemi(::google::protobuf::int32 value) {
  set_has_s_longitudehemi();
  s_longitudehemi_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.s_LongitudeHemi)
}

// optional double f_SpeedOverGround = 10;
inline bool AERO_t_GpsRmc_Proto::has_f_speedoverground() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_f_speedoverground() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_f_speedoverground() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AERO_t_GpsRmc_Proto::clear_f_speedoverground() {
  f_speedoverground_ = 0;
  clear_has_f_speedoverground();
}
inline double AERO_t_GpsRmc_Proto::f_speedoverground() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_SpeedOverGround)
  return f_speedoverground_;
}
inline void AERO_t_GpsRmc_Proto::set_f_speedoverground(double value) {
  set_has_f_speedoverground();
  f_speedoverground_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_SpeedOverGround)
}

// optional double f_CourseOverGround = 11;
inline bool AERO_t_GpsRmc_Proto::has_f_courseoverground() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_f_courseoverground() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_f_courseoverground() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AERO_t_GpsRmc_Proto::clear_f_courseoverground() {
  f_courseoverground_ = 0;
  clear_has_f_courseoverground();
}
inline double AERO_t_GpsRmc_Proto::f_courseoverground() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_CourseOverGround)
  return f_courseoverground_;
}
inline void AERO_t_GpsRmc_Proto::set_f_courseoverground(double value) {
  set_has_f_courseoverground();
  f_courseoverground_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_CourseOverGround)
}

// optional double f_MagneticVariationRad = 12;
inline bool AERO_t_GpsRmc_Proto::has_f_magneticvariationrad() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_f_magneticvariationrad() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_f_magneticvariationrad() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AERO_t_GpsRmc_Proto::clear_f_magneticvariationrad() {
  f_magneticvariationrad_ = 0;
  clear_has_f_magneticvariationrad();
}
inline double AERO_t_GpsRmc_Proto::f_magneticvariationrad() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_MagneticVariationRad)
  return f_magneticvariationrad_;
}
inline void AERO_t_GpsRmc_Proto::set_f_magneticvariationrad(double value) {
  set_has_f_magneticvariationrad();
  f_magneticvariationrad_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_MagneticVariationRad)
}

// optional double f_MagneticVariation = 13;
inline bool AERO_t_GpsRmc_Proto::has_f_magneticvariation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_f_magneticvariation() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_f_magneticvariation() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AERO_t_GpsRmc_Proto::clear_f_magneticvariation() {
  f_magneticvariation_ = 0;
  clear_has_f_magneticvariation();
}
inline double AERO_t_GpsRmc_Proto::f_magneticvariation() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_MagneticVariation)
  return f_magneticvariation_;
}
inline void AERO_t_GpsRmc_Proto::set_f_magneticvariation(double value) {
  set_has_f_magneticvariation();
  f_magneticvariation_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.f_MagneticVariation)
}

// optional sint32 s_MagneticVariationDir = 14;
inline bool AERO_t_GpsRmc_Proto::has_s_magneticvariationdir() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_s_magneticvariationdir() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_s_magneticvariationdir() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AERO_t_GpsRmc_Proto::clear_s_magneticvariationdir() {
  s_magneticvariationdir_ = 0;
  clear_has_s_magneticvariationdir();
}
inline ::google::protobuf::int32 AERO_t_GpsRmc_Proto::s_magneticvariationdir() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.s_MagneticVariationDir)
  return s_magneticvariationdir_;
}
inline void AERO_t_GpsRmc_Proto::set_s_magneticvariationdir(::google::protobuf::int32 value) {
  set_has_s_magneticvariationdir();
  s_magneticvariationdir_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.s_MagneticVariationDir)
}

// optional sint32 s_Mode = 15;
inline bool AERO_t_GpsRmc_Proto::has_s_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AERO_t_GpsRmc_Proto::set_has_s_mode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AERO_t_GpsRmc_Proto::clear_has_s_mode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AERO_t_GpsRmc_Proto::clear_s_mode() {
  s_mode_ = 0;
  clear_has_s_mode();
}
inline ::google::protobuf::int32 AERO_t_GpsRmc_Proto::s_mode() const {
  // @@protoc_insertion_point(field_get:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.s_Mode)
  return s_mode_;
}
inline void AERO_t_GpsRmc_Proto::set_s_mode(::google::protobuf::int32 value) {
  set_has_s_mode();
  s_mode_ = value;
  // @@protoc_insertion_point(field_set:aero_gps_rmc_protobuf.AERO_t_GpsRmc_Proto.s_Mode)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace aero_gps_rmc_protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_aero_5fgps_5frmc_2eproto__INCLUDED

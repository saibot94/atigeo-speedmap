// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aero_type.proto

#ifndef PROTOBUF_aero_5ftype_2eproto__INCLUDED
#define PROTOBUF_aero_5ftype_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace aero_type_protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_aero_5ftype_2eproto();
void protobuf_AssignDesc_aero_5ftype_2eproto();
void protobuf_ShutdownFile_aero_5ftype_2eproto();

class AERO_t_s_Timestamp_Proto;
class AERO_t_u_CycleCounter_Proto;
class AERO_t_u_Id_Proto;
class AERO_t_float32Status_Proto;
class AERO_t_Point2D_Proto;
class AERO_t_Point2DStatus_Proto;
class AERO_t_BoundaryPoint_Proto;
class AERO_t_Point3D_Proto;
class AERO_t_Point3DStatus_Proto;
class AERO_t_Orientation3D_Proto;
class AERO_t_Pose2D_Proto;
class AERO_t_Pose3D_Proto;
class AERO_t_Motion_Proto;
class AERO_t_SignalHeader_Proto;
class AERO_t_Clothoid_Proto;
class AERO_t_PolyChain_Proto;
class AERO_t_PolyChainQuality_Proto;
class AERO_t_SensorPose_Proto;
class AERO_t_VehicleDynParams_Proto;
class AERO_t_VehicleConfig_Proto;
class AERO_t_booleanStatus_Proto;
class AERO_t_uint16Status_Proto;
class AERO_t_SensorStatus_Proto;

enum AERO_t_SignalStatus_Proto {
  AERO_SIGNAL_STATUS_INIT_PROTO = 0,
  AERO_SIGNAL_STATUS_OK_PROTO = 1,
  AERO_SIGNAL_STATUS_INVALID_PROTO = 2
};
bool AERO_t_SignalStatus_Proto_IsValid(int value);
const AERO_t_SignalStatus_Proto AERO_t_SignalStatus_Proto_MIN = AERO_SIGNAL_STATUS_INIT_PROTO;
const AERO_t_SignalStatus_Proto AERO_t_SignalStatus_Proto_MAX = AERO_SIGNAL_STATUS_INVALID_PROTO;
const int AERO_t_SignalStatus_Proto_ARRAYSIZE = AERO_t_SignalStatus_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_SignalStatus_Proto_descriptor();
inline const ::std::string& AERO_t_SignalStatus_Proto_Name(AERO_t_SignalStatus_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_SignalStatus_Proto_descriptor(), value);
}
inline bool AERO_t_SignalStatus_Proto_Parse(
    const ::std::string& name, AERO_t_SignalStatus_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_SignalStatus_Proto>(
    AERO_t_SignalStatus_Proto_descriptor(), name, value);
}
enum AERO_t_TriState_Proto {
  AERO_TRISTATE_UNKNOWN_PROTO = 0,
  AERO_TRISTATE_TRUE_PROTO = 1,
  AERO_TRISTATE_FALSE_PROTO = 2
};
bool AERO_t_TriState_Proto_IsValid(int value);
const AERO_t_TriState_Proto AERO_t_TriState_Proto_MIN = AERO_TRISTATE_UNKNOWN_PROTO;
const AERO_t_TriState_Proto AERO_t_TriState_Proto_MAX = AERO_TRISTATE_FALSE_PROTO;
const int AERO_t_TriState_Proto_ARRAYSIZE = AERO_t_TriState_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_TriState_Proto_descriptor();
inline const ::std::string& AERO_t_TriState_Proto_Name(AERO_t_TriState_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_TriState_Proto_descriptor(), value);
}
inline bool AERO_t_TriState_Proto_Parse(
    const ::std::string& name, AERO_t_TriState_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_TriState_Proto>(
    AERO_t_TriState_Proto_descriptor(), name, value);
}
enum AERO_t_SensorDescriptor_Proto {
  AERO_SENSORDESC_NONE_PROTO = 0,
  AERO_SENSORDESC_STEREO_CAM_FRONT_LEFT_PROTO = 1,
  AERO_SENSORDESC_STEREO_CAM_FRONT_RIGHT_PROTO = 2,
  AERO_SENSORDESC_MONO_CAM_FRONT_LONG_RANGE_PROTO = 4,
  AERO_SENSORDESC_MONO_CAM_FRONT_STD_RANGE_PROTO = 8,
  AERO_SENSORDESC_RADAR_FRONT_LONG_RANGE_PROTO = 32,
  AERO_SENSORDESC_RADAR_REAR_CENTRE_LONG_RANGE_PROTO = 64,
  AERO_SENSORDESC_RADAR_REAR_LEFT_LONG_RANGE_PROTO = 128,
  AERO_SENSORDESC_RADAR_REAR_RIGHT_LONG_RANGE_PROTO = 256,
  AERO_SENSORDESC_RADAR_FRONT_LEFT_SHORT_RANGE_PROTO = 512,
  AERO_SENSORDESC_RADAR_REAR_LEFT_SHORT_RANGE_PROTO = 1024,
  AERO_SENSORDESC_RADAR_REAR_RIGHT_SHORT_RANGE_PROTO = 2048,
  AERO_SENSORDESC_RADAR_FRONT_RIGHT_SHORT_RANGE_PROTO = 4096,
  AERO_SENSORDESC_LIDAR_FRONT_PROTO = 8192,
  AERO_SENSORDESC_LIDAR_LEFT_PROTO = 16384,
  AERO_SENSORDESC_LIDAR_REAR_PROTO = 32768,
  AERO_SENSORDESC_LIDAR_RIGHT_PROTO = 65536,
  AERO_SENSORDESC_LIDAR_CENTRE_PROTO = 131072,
  AERO_SENSORDESC_MAP_INPUT_PROTO = 262144,
  AERO_SENSORDESC_MODEL_ASSUMPTION_PROTO = 524288
};
bool AERO_t_SensorDescriptor_Proto_IsValid(int value);
const AERO_t_SensorDescriptor_Proto AERO_t_SensorDescriptor_Proto_MIN = AERO_SENSORDESC_NONE_PROTO;
const AERO_t_SensorDescriptor_Proto AERO_t_SensorDescriptor_Proto_MAX = AERO_SENSORDESC_MODEL_ASSUMPTION_PROTO;
const int AERO_t_SensorDescriptor_Proto_ARRAYSIZE = AERO_t_SensorDescriptor_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_SensorDescriptor_Proto_descriptor();
inline const ::std::string& AERO_t_SensorDescriptor_Proto_Name(AERO_t_SensorDescriptor_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_SensorDescriptor_Proto_descriptor(), value);
}
inline bool AERO_t_SensorDescriptor_Proto_Parse(
    const ::std::string& name, AERO_t_SensorDescriptor_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_SensorDescriptor_Proto>(
    AERO_t_SensorDescriptor_Proto_descriptor(), name, value);
}
enum AERO_t_SensorMake_Proto {
  AERO_SENSORMAKE_UNKNOWN_PROTO = 0,
  AERO_SENSORMAKE_CONTI_STEREO_CAM_MFC3XX_PROTO = 1,
  AERO_SENSORMAKE_CONTI_STEREO_CAM_MFC4XX_PROTO = 2,
  AERO_SENSORMAKE_CONTI_MONO_CAM_MFC3XX_PROTO = 4,
  AERO_SENSORMAKE_CONTI_MONO_CAM_MFC4XX_PROTO = 8,
  AERO_SENSORMAKE_CONTI_LRR_ARS3XX_PROTO = 256,
  AERO_SENSORMAKE_CONTI_LRR_ARS4XX_PROTO = 512,
  AERO_SENSORMAKE_CONTI_SRR_SRR2XX_PROTO = 65536,
  AERO_SENSORMAKE_CONTI_SRR_SRR3XX_PROTO = 131072,
  AERO_SENSORMAKE_IBEO_LIDAR_LUX3_PROTO = 16777216
};
bool AERO_t_SensorMake_Proto_IsValid(int value);
const AERO_t_SensorMake_Proto AERO_t_SensorMake_Proto_MIN = AERO_SENSORMAKE_UNKNOWN_PROTO;
const AERO_t_SensorMake_Proto AERO_t_SensorMake_Proto_MAX = AERO_SENSORMAKE_IBEO_LIDAR_LUX3_PROTO;
const int AERO_t_SensorMake_Proto_ARRAYSIZE = AERO_t_SensorMake_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_SensorMake_Proto_descriptor();
inline const ::std::string& AERO_t_SensorMake_Proto_Name(AERO_t_SensorMake_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_SensorMake_Proto_descriptor(), value);
}
inline bool AERO_t_SensorMake_Proto_Parse(
    const ::std::string& name, AERO_t_SensorMake_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_SensorMake_Proto>(
    AERO_t_SensorMake_Proto_descriptor(), name, value);
}
enum AERO_t_SensorFeature_Proto {
  AERO_SENSORFEATURE_NONE_PROTO = 0,
  AERO_SENSORFEATURE_POINTCLOUD_PROTO = 1,
  AERO_SENSORFEATURE_CLUSTERS_PROTO = 2,
  AERO_SENSORFEATURE_CLUSTERS_FAR_PROTO = 4,
  AERO_SENSORFEATURE_TRAFPART_PROTO = 8,
  AERO_SENSORFEATURE_PEDESTRIANS_PROTO = 16,
  AERO_SENSORFEATURE_VEHICLES_PROTO = 32,
  AERO_SENSORFEATURE_PEAKS_PROTO = 64
};
bool AERO_t_SensorFeature_Proto_IsValid(int value);
const AERO_t_SensorFeature_Proto AERO_t_SensorFeature_Proto_MIN = AERO_SENSORFEATURE_NONE_PROTO;
const AERO_t_SensorFeature_Proto AERO_t_SensorFeature_Proto_MAX = AERO_SENSORFEATURE_PEAKS_PROTO;
const int AERO_t_SensorFeature_Proto_ARRAYSIZE = AERO_t_SensorFeature_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_SensorFeature_Proto_descriptor();
inline const ::std::string& AERO_t_SensorFeature_Proto_Name(AERO_t_SensorFeature_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_SensorFeature_Proto_descriptor(), value);
}
inline bool AERO_t_SensorFeature_Proto_Parse(
    const ::std::string& name, AERO_t_SensorFeature_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_SensorFeature_Proto>(
    AERO_t_SensorFeature_Proto_descriptor(), name, value);
}
enum AERO_t_PolyChainFreeSide_Proto {
  AERO_POLYCHAIN_FREESIDE_UNKNOWN_PROTO = 0,
  AERO_POLYCHAIN_POSITIVE_NORMAL_PROTO = 1,
  AERO_POLYCHAIN_NEGATIVE_NORMAL_PROTO = 2,
  AERO_POLYCHAIN_FREESIDE_NA_PROTO = 3
};
bool AERO_t_PolyChainFreeSide_Proto_IsValid(int value);
const AERO_t_PolyChainFreeSide_Proto AERO_t_PolyChainFreeSide_Proto_MIN = AERO_POLYCHAIN_FREESIDE_UNKNOWN_PROTO;
const AERO_t_PolyChainFreeSide_Proto AERO_t_PolyChainFreeSide_Proto_MAX = AERO_POLYCHAIN_FREESIDE_NA_PROTO;
const int AERO_t_PolyChainFreeSide_Proto_ARRAYSIZE = AERO_t_PolyChainFreeSide_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_PolyChainFreeSide_Proto_descriptor();
inline const ::std::string& AERO_t_PolyChainFreeSide_Proto_Name(AERO_t_PolyChainFreeSide_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_PolyChainFreeSide_Proto_descriptor(), value);
}
inline bool AERO_t_PolyChainFreeSide_Proto_Parse(
    const ::std::string& name, AERO_t_PolyChainFreeSide_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_PolyChainFreeSide_Proto>(
    AERO_t_PolyChainFreeSide_Proto_descriptor(), name, value);
}
enum AERO_t_SensorOperationStatus_Proto {
  AERO_SENSOROPERATIONSTATUS_NA_PROTO = 0,
  AERO_SENSOROPERATIONSTATUS_OK_PROTO = 1,
  AERO_SENSOROPERATIONSTATUS_REDUCED_PROTO = 2,
  AERO_SENSOROPERATIONSTATUS_FAILURE_PROTO = 3
};
bool AERO_t_SensorOperationStatus_Proto_IsValid(int value);
const AERO_t_SensorOperationStatus_Proto AERO_t_SensorOperationStatus_Proto_MIN = AERO_SENSOROPERATIONSTATUS_NA_PROTO;
const AERO_t_SensorOperationStatus_Proto AERO_t_SensorOperationStatus_Proto_MAX = AERO_SENSOROPERATIONSTATUS_FAILURE_PROTO;
const int AERO_t_SensorOperationStatus_Proto_ARRAYSIZE = AERO_t_SensorOperationStatus_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_SensorOperationStatus_Proto_descriptor();
inline const ::std::string& AERO_t_SensorOperationStatus_Proto_Name(AERO_t_SensorOperationStatus_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_SensorOperationStatus_Proto_descriptor(), value);
}
inline bool AERO_t_SensorOperationStatus_Proto_Parse(
    const ::std::string& name, AERO_t_SensorOperationStatus_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_SensorOperationStatus_Proto>(
    AERO_t_SensorOperationStatus_Proto_descriptor(), name, value);
}
enum AERO_t_SensorDisturbanceState_Proto {
  AERO_SENSORDISTURBANCESTATE_NONE_PROTO = 0,
  AERO_SENSORDISTURBANCESTATE_PARTIALLY_BLOCKED_PROTO = 1,
  AERO_SENSORDISTURBANCESTATE_BLOCKED_PROTO = 2,
  AERO_SENSORDISTURBANCESTATE_DEADJUSTED_PROTO = 256,
  AERO_SENSORDISTURBANCESTATE_HW_FAILURE_PROTO = 512,
  AERO_SENSORDISTURBANCESTATE_EXT_DISTURBANCE_PROTO = 1024,
  AERO_SENSORDISTURBANCESTATE_OFF_TEMPERATURE_PROTO = 2048,
  AERO_SENSORDISTURBANCESTATE_RAIN_PROTO = 65536,
  AERO_SENSORDISTURBANCESTATE_SNOW_PROTO = 131072,
  AERO_SENSORDISTURBANCESTATE_FOG_PROTO = 262144,
  AERO_SENSORDISTURBANCESTATE_GLARE_PROTO = 524288,
  AERO_SENSORDISTURBANCESTATE_DARKNESS_PROTO = 1048576,
  AERO_SENSORDISTURBANCESTATE_TUNNEL_PROTO = 2097152,
  AERO_SENSORDISTURBANCESTATE_OTHER_PROTO = 268435456
};
bool AERO_t_SensorDisturbanceState_Proto_IsValid(int value);
const AERO_t_SensorDisturbanceState_Proto AERO_t_SensorDisturbanceState_Proto_MIN = AERO_SENSORDISTURBANCESTATE_NONE_PROTO;
const AERO_t_SensorDisturbanceState_Proto AERO_t_SensorDisturbanceState_Proto_MAX = AERO_SENSORDISTURBANCESTATE_OTHER_PROTO;
const int AERO_t_SensorDisturbanceState_Proto_ARRAYSIZE = AERO_t_SensorDisturbanceState_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_SensorDisturbanceState_Proto_descriptor();
inline const ::std::string& AERO_t_SensorDisturbanceState_Proto_Name(AERO_t_SensorDisturbanceState_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_SensorDisturbanceState_Proto_descriptor(), value);
}
inline bool AERO_t_SensorDisturbanceState_Proto_Parse(
    const ::std::string& name, AERO_t_SensorDisturbanceState_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_SensorDisturbanceState_Proto>(
    AERO_t_SensorDisturbanceState_Proto_descriptor(), name, value);
}
// ===================================================================

class AERO_t_s_Timestamp_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_s_Timestamp_Proto();
  virtual ~AERO_t_s_Timestamp_Proto();

  AERO_t_s_Timestamp_Proto(const AERO_t_s_Timestamp_Proto& from);

  inline AERO_t_s_Timestamp_Proto& operator=(const AERO_t_s_Timestamp_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_s_Timestamp_Proto& default_instance();

  void Swap(AERO_t_s_Timestamp_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_s_Timestamp_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_s_Timestamp_Proto& from);
  void MergeFrom(const AERO_t_s_Timestamp_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 s_Timestamp = 1;
  inline bool has_s_timestamp() const;
  inline void clear_s_timestamp();
  static const int kSTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 s_timestamp() const;
  inline void set_s_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_s_Timestamp_Proto)
 private:
  inline void set_has_s_timestamp();
  inline void clear_has_s_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 s_timestamp_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_s_Timestamp_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_u_CycleCounter_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_u_CycleCounter_Proto();
  virtual ~AERO_t_u_CycleCounter_Proto();

  AERO_t_u_CycleCounter_Proto(const AERO_t_u_CycleCounter_Proto& from);

  inline AERO_t_u_CycleCounter_Proto& operator=(const AERO_t_u_CycleCounter_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_u_CycleCounter_Proto& default_instance();

  void Swap(AERO_t_u_CycleCounter_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_u_CycleCounter_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_u_CycleCounter_Proto& from);
  void MergeFrom(const AERO_t_u_CycleCounter_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 u_CycleCounter = 1;
  inline bool has_u_cyclecounter() const;
  inline void clear_u_cyclecounter();
  static const int kUCycleCounterFieldNumber = 1;
  inline ::google::protobuf::uint32 u_cyclecounter() const;
  inline void set_u_cyclecounter(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_u_CycleCounter_Proto)
 private:
  inline void set_has_u_cyclecounter();
  inline void clear_has_u_cyclecounter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 u_cyclecounter_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_u_CycleCounter_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_u_Id_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_u_Id_Proto();
  virtual ~AERO_t_u_Id_Proto();

  AERO_t_u_Id_Proto(const AERO_t_u_Id_Proto& from);

  inline AERO_t_u_Id_Proto& operator=(const AERO_t_u_Id_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_u_Id_Proto& default_instance();

  void Swap(AERO_t_u_Id_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_u_Id_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_u_Id_Proto& from);
  void MergeFrom(const AERO_t_u_Id_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 u_Id = 1;
  inline bool has_u_id() const;
  inline void clear_u_id();
  static const int kUIdFieldNumber = 1;
  inline ::google::protobuf::uint32 u_id() const;
  inline void set_u_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_u_Id_Proto)
 private:
  inline void set_has_u_id();
  inline void clear_has_u_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 u_id_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_u_Id_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_float32Status_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_float32Status_Proto();
  virtual ~AERO_t_float32Status_Proto();

  AERO_t_float32Status_Proto(const AERO_t_float32Status_Proto& from);

  inline AERO_t_float32Status_Proto& operator=(const AERO_t_float32Status_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_float32Status_Proto& default_instance();

  void Swap(AERO_t_float32Status_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_float32Status_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_float32Status_Proto& from);
  void MergeFrom(const AERO_t_float32Status_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional float f_Value = 2;
  inline bool has_f_value() const;
  inline void clear_f_value();
  static const int kFValueFieldNumber = 2;
  inline float f_value() const;
  inline void set_f_value(float value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_float32Status_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_f_value();
  inline void clear_has_f_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  float f_value_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_float32Status_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_Point2D_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_Point2D_Proto();
  virtual ~AERO_t_Point2D_Proto();

  AERO_t_Point2D_Proto(const AERO_t_Point2D_Proto& from);

  inline AERO_t_Point2D_Proto& operator=(const AERO_t_Point2D_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_Point2D_Proto& default_instance();

  void Swap(AERO_t_Point2D_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_Point2D_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_Point2D_Proto& from);
  void MergeFrom(const AERO_t_Point2D_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float f_X = 1;
  inline bool has_f_x() const;
  inline void clear_f_x();
  static const int kFXFieldNumber = 1;
  inline float f_x() const;
  inline void set_f_x(float value);

  // optional float f_Y = 2;
  inline bool has_f_y() const;
  inline void clear_f_y();
  static const int kFYFieldNumber = 2;
  inline float f_y() const;
  inline void set_f_y(float value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_Point2D_Proto)
 private:
  inline void set_has_f_x();
  inline void clear_has_f_x();
  inline void set_has_f_y();
  inline void clear_has_f_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float f_x_;
  float f_y_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_Point2D_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_Point2DStatus_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_Point2DStatus_Proto();
  virtual ~AERO_t_Point2DStatus_Proto();

  AERO_t_Point2DStatus_Proto(const AERO_t_Point2DStatus_Proto& from);

  inline AERO_t_Point2DStatus_Proto& operator=(const AERO_t_Point2DStatus_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_Point2DStatus_Proto& default_instance();

  void Swap(AERO_t_Point2DStatus_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_Point2DStatus_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_Point2DStatus_Proto& from);
  void MergeFrom(const AERO_t_Point2DStatus_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional float f_X = 2;
  inline bool has_f_x() const;
  inline void clear_f_x();
  static const int kFXFieldNumber = 2;
  inline float f_x() const;
  inline void set_f_x(float value);

  // optional float f_Y = 3;
  inline bool has_f_y() const;
  inline void clear_f_y();
  static const int kFYFieldNumber = 3;
  inline float f_y() const;
  inline void set_f_y(float value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_Point2DStatus_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_f_x();
  inline void clear_has_f_x();
  inline void set_has_f_y();
  inline void clear_has_f_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  float f_x_;
  float f_y_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_Point2DStatus_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_BoundaryPoint_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_BoundaryPoint_Proto();
  virtual ~AERO_t_BoundaryPoint_Proto();

  AERO_t_BoundaryPoint_Proto(const AERO_t_BoundaryPoint_Proto& from);

  inline AERO_t_BoundaryPoint_Proto& operator=(const AERO_t_BoundaryPoint_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_BoundaryPoint_Proto& default_instance();

  void Swap(AERO_t_BoundaryPoint_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_BoundaryPoint_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_BoundaryPoint_Proto& from);
  void MergeFrom(const AERO_t_BoundaryPoint_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_Point2D_Proto Position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_Point2D_Proto& position() const;
  inline ::aero_type_protobuf::AERO_t_Point2D_Proto* mutable_position();
  inline ::aero_type_protobuf::AERO_t_Point2D_Proto* release_position();
  inline void set_allocated_position(::aero_type_protobuf::AERO_t_Point2D_Proto* position);

  // optional sint32 s_Height = 2;
  inline bool has_s_height() const;
  inline void clear_s_height();
  static const int kSHeightFieldNumber = 2;
  inline ::google::protobuf::int32 s_height() const;
  inline void set_s_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_BoundaryPoint_Proto)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_s_height();
  inline void clear_has_s_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_Point2D_Proto* position_;
  ::google::protobuf::int32 s_height_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_BoundaryPoint_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_Point3D_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_Point3D_Proto();
  virtual ~AERO_t_Point3D_Proto();

  AERO_t_Point3D_Proto(const AERO_t_Point3D_Proto& from);

  inline AERO_t_Point3D_Proto& operator=(const AERO_t_Point3D_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_Point3D_Proto& default_instance();

  void Swap(AERO_t_Point3D_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_Point3D_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_Point3D_Proto& from);
  void MergeFrom(const AERO_t_Point3D_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float f_X = 1;
  inline bool has_f_x() const;
  inline void clear_f_x();
  static const int kFXFieldNumber = 1;
  inline float f_x() const;
  inline void set_f_x(float value);

  // optional float f_Y = 2;
  inline bool has_f_y() const;
  inline void clear_f_y();
  static const int kFYFieldNumber = 2;
  inline float f_y() const;
  inline void set_f_y(float value);

  // optional float f_Z = 3;
  inline bool has_f_z() const;
  inline void clear_f_z();
  static const int kFZFieldNumber = 3;
  inline float f_z() const;
  inline void set_f_z(float value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_Point3D_Proto)
 private:
  inline void set_has_f_x();
  inline void clear_has_f_x();
  inline void set_has_f_y();
  inline void clear_has_f_y();
  inline void set_has_f_z();
  inline void clear_has_f_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float f_x_;
  float f_y_;
  float f_z_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_Point3D_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_Point3DStatus_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_Point3DStatus_Proto();
  virtual ~AERO_t_Point3DStatus_Proto();

  AERO_t_Point3DStatus_Proto(const AERO_t_Point3DStatus_Proto& from);

  inline AERO_t_Point3DStatus_Proto& operator=(const AERO_t_Point3DStatus_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_Point3DStatus_Proto& default_instance();

  void Swap(AERO_t_Point3DStatus_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_Point3DStatus_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_Point3DStatus_Proto& from);
  void MergeFrom(const AERO_t_Point3DStatus_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional float f_X = 2;
  inline bool has_f_x() const;
  inline void clear_f_x();
  static const int kFXFieldNumber = 2;
  inline float f_x() const;
  inline void set_f_x(float value);

  // optional float f_Y = 3;
  inline bool has_f_y() const;
  inline void clear_f_y();
  static const int kFYFieldNumber = 3;
  inline float f_y() const;
  inline void set_f_y(float value);

  // optional float f_Z = 4;
  inline bool has_f_z() const;
  inline void clear_f_z();
  static const int kFZFieldNumber = 4;
  inline float f_z() const;
  inline void set_f_z(float value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_Point3DStatus_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_f_x();
  inline void clear_has_f_x();
  inline void set_has_f_y();
  inline void clear_has_f_y();
  inline void set_has_f_z();
  inline void clear_has_f_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  float f_x_;
  float f_y_;
  float f_z_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_Point3DStatus_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_Orientation3D_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_Orientation3D_Proto();
  virtual ~AERO_t_Orientation3D_Proto();

  AERO_t_Orientation3D_Proto(const AERO_t_Orientation3D_Proto& from);

  inline AERO_t_Orientation3D_Proto& operator=(const AERO_t_Orientation3D_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_Orientation3D_Proto& default_instance();

  void Swap(AERO_t_Orientation3D_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_Orientation3D_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_Orientation3D_Proto& from);
  void MergeFrom(const AERO_t_Orientation3D_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float f_Roll = 1;
  inline bool has_f_roll() const;
  inline void clear_f_roll();
  static const int kFRollFieldNumber = 1;
  inline float f_roll() const;
  inline void set_f_roll(float value);

  // optional float f_Pitch = 2;
  inline bool has_f_pitch() const;
  inline void clear_f_pitch();
  static const int kFPitchFieldNumber = 2;
  inline float f_pitch() const;
  inline void set_f_pitch(float value);

  // optional float f_Yaw = 3;
  inline bool has_f_yaw() const;
  inline void clear_f_yaw();
  static const int kFYawFieldNumber = 3;
  inline float f_yaw() const;
  inline void set_f_yaw(float value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_Orientation3D_Proto)
 private:
  inline void set_has_f_roll();
  inline void clear_has_f_roll();
  inline void set_has_f_pitch();
  inline void clear_has_f_pitch();
  inline void set_has_f_yaw();
  inline void clear_has_f_yaw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float f_roll_;
  float f_pitch_;
  float f_yaw_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_Orientation3D_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_Pose2D_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_Pose2D_Proto();
  virtual ~AERO_t_Pose2D_Proto();

  AERO_t_Pose2D_Proto(const AERO_t_Pose2D_Proto& from);

  inline AERO_t_Pose2D_Proto& operator=(const AERO_t_Pose2D_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_Pose2D_Proto& default_instance();

  void Swap(AERO_t_Pose2D_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_Pose2D_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_Pose2D_Proto& from);
  void MergeFrom(const AERO_t_Pose2D_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float f_X = 1;
  inline bool has_f_x() const;
  inline void clear_f_x();
  static const int kFXFieldNumber = 1;
  inline float f_x() const;
  inline void set_f_x(float value);

  // optional float f_Y = 2;
  inline bool has_f_y() const;
  inline void clear_f_y();
  static const int kFYFieldNumber = 2;
  inline float f_y() const;
  inline void set_f_y(float value);

  // optional float f_Yaw = 3;
  inline bool has_f_yaw() const;
  inline void clear_f_yaw();
  static const int kFYawFieldNumber = 3;
  inline float f_yaw() const;
  inline void set_f_yaw(float value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_Pose2D_Proto)
 private:
  inline void set_has_f_x();
  inline void clear_has_f_x();
  inline void set_has_f_y();
  inline void clear_has_f_y();
  inline void set_has_f_yaw();
  inline void clear_has_f_yaw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float f_x_;
  float f_y_;
  float f_yaw_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_Pose2D_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_Pose3D_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_Pose3D_Proto();
  virtual ~AERO_t_Pose3D_Proto();

  AERO_t_Pose3D_Proto(const AERO_t_Pose3D_Proto& from);

  inline AERO_t_Pose3D_Proto& operator=(const AERO_t_Pose3D_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_Pose3D_Proto& default_instance();

  void Swap(AERO_t_Pose3D_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_Pose3D_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_Pose3D_Proto& from);
  void MergeFrom(const AERO_t_Pose3D_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 3 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 3;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional .aero_type_protobuf.AERO_t_Point3D_Proto Position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_Point3D_Proto& position() const;
  inline ::aero_type_protobuf::AERO_t_Point3D_Proto* mutable_position();
  inline ::aero_type_protobuf::AERO_t_Point3D_Proto* release_position();
  inline void set_allocated_position(::aero_type_protobuf::AERO_t_Point3D_Proto* position);

  // optional .aero_type_protobuf.AERO_t_Orientation3D_Proto Orientation = 2;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  inline const ::aero_type_protobuf::AERO_t_Orientation3D_Proto& orientation() const;
  inline ::aero_type_protobuf::AERO_t_Orientation3D_Proto* mutable_orientation();
  inline ::aero_type_protobuf::AERO_t_Orientation3D_Proto* release_orientation();
  inline void set_allocated_orientation(::aero_type_protobuf::AERO_t_Orientation3D_Proto* orientation);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_Pose3D_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_orientation();
  inline void clear_has_orientation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_Point3D_Proto* position_;
  ::aero_type_protobuf::AERO_t_Orientation3D_Proto* orientation_;
  int e_signalstatus_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_Pose3D_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_Motion_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_Motion_Proto();
  virtual ~AERO_t_Motion_Proto();

  AERO_t_Motion_Proto(const AERO_t_Motion_Proto& from);

  inline AERO_t_Motion_Proto& operator=(const AERO_t_Motion_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_Motion_Proto& default_instance();

  void Swap(AERO_t_Motion_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_Motion_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_Motion_Proto& from);
  void MergeFrom(const AERO_t_Motion_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional .aero_type_protobuf.AERO_t_Point2D_Proto Velocity = 2;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  inline const ::aero_type_protobuf::AERO_t_Point2D_Proto& velocity() const;
  inline ::aero_type_protobuf::AERO_t_Point2D_Proto* mutable_velocity();
  inline ::aero_type_protobuf::AERO_t_Point2D_Proto* release_velocity();
  inline void set_allocated_velocity(::aero_type_protobuf::AERO_t_Point2D_Proto* velocity);

  // optional float f_YawRate = 3;
  inline bool has_f_yawrate() const;
  inline void clear_f_yawrate();
  static const int kFYawRateFieldNumber = 3;
  inline float f_yawrate() const;
  inline void set_f_yawrate(float value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_Motion_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_f_yawrate();
  inline void clear_has_f_yawrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_Point2D_Proto* velocity_;
  int e_signalstatus_;
  float f_yawrate_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_Motion_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_SignalHeader_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_SignalHeader_Proto();
  virtual ~AERO_t_SignalHeader_Proto();

  AERO_t_SignalHeader_Proto(const AERO_t_SignalHeader_Proto& from);

  inline AERO_t_SignalHeader_Proto& operator=(const AERO_t_SignalHeader_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_SignalHeader_Proto& default_instance();

  void Swap(AERO_t_SignalHeader_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_SignalHeader_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_SignalHeader_Proto& from);
  void MergeFrom(const AERO_t_SignalHeader_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 s_Timestamp = 1;
  inline bool has_s_timestamp() const;
  inline void clear_s_timestamp();
  static const int kSTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 s_timestamp() const;
  inline void set_s_timestamp(::google::protobuf::int64 value);

  // optional uint32 u_CycleCounter = 2;
  inline bool has_u_cyclecounter() const;
  inline void clear_u_cyclecounter();
  static const int kUCycleCounterFieldNumber = 2;
  inline ::google::protobuf::uint32 u_cyclecounter() const;
  inline void set_u_cyclecounter(::google::protobuf::uint32 value);

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 3 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 3;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_SignalHeader_Proto)
 private:
  inline void set_has_s_timestamp();
  inline void clear_has_s_timestamp();
  inline void set_has_u_cyclecounter();
  inline void clear_has_u_cyclecounter();
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 s_timestamp_;
  ::google::protobuf::uint32 u_cyclecounter_;
  int e_signalstatus_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_SignalHeader_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_Clothoid_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_Clothoid_Proto();
  virtual ~AERO_t_Clothoid_Proto();

  AERO_t_Clothoid_Proto(const AERO_t_Clothoid_Proto& from);

  inline AERO_t_Clothoid_Proto& operator=(const AERO_t_Clothoid_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_Clothoid_Proto& default_instance();

  void Swap(AERO_t_Clothoid_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_Clothoid_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_Clothoid_Proto& from);
  void MergeFrom(const AERO_t_Clothoid_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional float f_LateralDistance = 2;
  inline bool has_f_lateraldistance() const;
  inline void clear_f_lateraldistance();
  static const int kFLateralDistanceFieldNumber = 2;
  inline float f_lateraldistance() const;
  inline void set_f_lateraldistance(float value);

  // optional float f_YawAngle = 3;
  inline bool has_f_yawangle() const;
  inline void clear_f_yawangle();
  static const int kFYawAngleFieldNumber = 3;
  inline float f_yawangle() const;
  inline void set_f_yawangle(float value);

  // optional float f_curvature = 4;
  inline bool has_f_curvature() const;
  inline void clear_f_curvature();
  static const int kFCurvatureFieldNumber = 4;
  inline float f_curvature() const;
  inline void set_f_curvature(float value);

  // optional float f_curvatureChange = 5;
  inline bool has_f_curvaturechange() const;
  inline void clear_f_curvaturechange();
  static const int kFCurvatureChangeFieldNumber = 5;
  inline float f_curvaturechange() const;
  inline void set_f_curvaturechange(float value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_Clothoid_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_f_lateraldistance();
  inline void clear_has_f_lateraldistance();
  inline void set_has_f_yawangle();
  inline void clear_has_f_yawangle();
  inline void set_has_f_curvature();
  inline void clear_has_f_curvature();
  inline void set_has_f_curvaturechange();
  inline void clear_has_f_curvaturechange();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  float f_lateraldistance_;
  float f_yawangle_;
  float f_curvature_;
  float f_curvaturechange_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_Clothoid_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_PolyChain_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_PolyChain_Proto();
  virtual ~AERO_t_PolyChain_Proto();

  AERO_t_PolyChain_Proto(const AERO_t_PolyChain_Proto& from);

  inline AERO_t_PolyChain_Proto& operator=(const AERO_t_PolyChain_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_PolyChain_Proto& default_instance();

  void Swap(AERO_t_PolyChain_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_PolyChain_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_PolyChain_Proto& from);
  void MergeFrom(const AERO_t_PolyChain_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional .aero_type_protobuf.AERO_t_PolyChainFreeSide_Proto e_FreeSide = 2;
  inline bool has_e_freeside() const;
  inline void clear_e_freeside();
  static const int kEFreeSideFieldNumber = 2;
  inline ::aero_type_protobuf::AERO_t_PolyChainFreeSide_Proto e_freeside() const;
  inline void set_e_freeside(::aero_type_protobuf::AERO_t_PolyChainFreeSide_Proto value);

  // optional uint32 u_NumPoints = 3;
  inline bool has_u_numpoints() const;
  inline void clear_u_numpoints();
  static const int kUNumPointsFieldNumber = 3;
  inline ::google::protobuf::uint32 u_numpoints() const;
  inline void set_u_numpoints(::google::protobuf::uint32 value);

  // repeated .aero_type_protobuf.AERO_t_BoundaryPoint_Proto BoundaryPoints = 4;
  inline int boundarypoints_size() const;
  inline void clear_boundarypoints();
  static const int kBoundaryPointsFieldNumber = 4;
  inline const ::aero_type_protobuf::AERO_t_BoundaryPoint_Proto& boundarypoints(int index) const;
  inline ::aero_type_protobuf::AERO_t_BoundaryPoint_Proto* mutable_boundarypoints(int index);
  inline ::aero_type_protobuf::AERO_t_BoundaryPoint_Proto* add_boundarypoints();
  inline const ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_BoundaryPoint_Proto >&
      boundarypoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_BoundaryPoint_Proto >*
      mutable_boundarypoints();

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_PolyChain_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_e_freeside();
  inline void clear_has_e_freeside();
  inline void set_has_u_numpoints();
  inline void clear_has_u_numpoints();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  int e_freeside_;
  ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_BoundaryPoint_Proto > boundarypoints_;
  ::google::protobuf::uint32 u_numpoints_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_PolyChain_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_PolyChainQuality_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_PolyChainQuality_Proto();
  virtual ~AERO_t_PolyChainQuality_Proto();

  AERO_t_PolyChainQuality_Proto(const AERO_t_PolyChainQuality_Proto& from);

  inline AERO_t_PolyChainQuality_Proto& operator=(const AERO_t_PolyChainQuality_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_PolyChainQuality_Proto& default_instance();

  void Swap(AERO_t_PolyChainQuality_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_PolyChainQuality_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_PolyChainQuality_Proto& from);
  void MergeFrom(const AERO_t_PolyChainQuality_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // repeated uint32 u_ContribSensors = 2;
  inline int u_contribsensors_size() const;
  inline void clear_u_contribsensors();
  static const int kUContribSensorsFieldNumber = 2;
  inline ::google::protobuf::uint32 u_contribsensors(int index) const;
  inline void set_u_contribsensors(int index, ::google::protobuf::uint32 value);
  inline void add_u_contribsensors(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      u_contribsensors() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_u_contribsensors();

  // repeated sint32 s_Quality = 3;
  inline int s_quality_size() const;
  inline void clear_s_quality();
  static const int kSQualityFieldNumber = 3;
  inline ::google::protobuf::int32 s_quality(int index) const;
  inline void set_s_quality(int index, ::google::protobuf::int32 value);
  inline void add_s_quality(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      s_quality() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_s_quality();

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_PolyChainQuality_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > u_contribsensors_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > s_quality_;
  int e_signalstatus_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_PolyChainQuality_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_SensorPose_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_SensorPose_Proto();
  virtual ~AERO_t_SensorPose_Proto();

  AERO_t_SensorPose_Proto(const AERO_t_SensorPose_Proto& from);

  inline AERO_t_SensorPose_Proto& operator=(const AERO_t_SensorPose_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_SensorPose_Proto& default_instance();

  void Swap(AERO_t_SensorPose_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_SensorPose_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_SensorPose_Proto& from);
  void MergeFrom(const AERO_t_SensorPose_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional .aero_type_protobuf.AERO_t_SensorDescriptor_Proto e_Descriptor = 2;
  inline bool has_e_descriptor() const;
  inline void clear_e_descriptor();
  static const int kEDescriptorFieldNumber = 2;
  inline ::aero_type_protobuf::AERO_t_SensorDescriptor_Proto e_descriptor() const;
  inline void set_e_descriptor(::aero_type_protobuf::AERO_t_SensorDescriptor_Proto value);

  // optional .aero_type_protobuf.AERO_t_SensorMake_Proto e_Make = 4;
  inline bool has_e_make() const;
  inline void clear_e_make();
  static const int kEMakeFieldNumber = 4;
  inline ::aero_type_protobuf::AERO_t_SensorMake_Proto e_make() const;
  inline void set_e_make(::aero_type_protobuf::AERO_t_SensorMake_Proto value);

  // optional .aero_type_protobuf.AERO_t_Pose3D_Proto Pose = 3;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 3;
  inline const ::aero_type_protobuf::AERO_t_Pose3D_Proto& pose() const;
  inline ::aero_type_protobuf::AERO_t_Pose3D_Proto* mutable_pose();
  inline ::aero_type_protobuf::AERO_t_Pose3D_Proto* release_pose();
  inline void set_allocated_pose(::aero_type_protobuf::AERO_t_Pose3D_Proto* pose);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_SensorPose_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_e_descriptor();
  inline void clear_has_e_descriptor();
  inline void set_has_e_make();
  inline void clear_has_e_make();
  inline void set_has_pose();
  inline void clear_has_pose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  int e_descriptor_;
  ::aero_type_protobuf::AERO_t_Pose3D_Proto* pose_;
  int e_make_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_SensorPose_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_VehicleDynParams_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_VehicleDynParams_Proto();
  virtual ~AERO_t_VehicleDynParams_Proto();

  AERO_t_VehicleDynParams_Proto(const AERO_t_VehicleDynParams_Proto& from);

  inline AERO_t_VehicleDynParams_Proto& operator=(const AERO_t_VehicleDynParams_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_VehicleDynParams_Proto& default_instance();

  void Swap(AERO_t_VehicleDynParams_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_VehicleDynParams_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_VehicleDynParams_Proto& from);
  void MergeFrom(const AERO_t_VehicleDynParams_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional float f_DistCoM2FrontAxle = 2;
  inline bool has_f_distcom2frontaxle() const;
  inline void clear_f_distcom2frontaxle();
  static const int kFDistCoM2FrontAxleFieldNumber = 2;
  inline float f_distcom2frontaxle() const;
  inline void set_f_distcom2frontaxle(float value);

  // optional float f_AvgSteeringRatio = 3;
  inline bool has_f_avgsteeringratio() const;
  inline void clear_f_avgsteeringratio();
  static const int kFAvgSteeringRatioFieldNumber = 3;
  inline float f_avgsteeringratio() const;
  inline void set_f_avgsteeringratio(float value);

  // optional float f_MassMomentOfInertia = 4;
  inline bool has_f_massmomentofinertia() const;
  inline void clear_f_massmomentofinertia();
  static const int kFMassMomentOfInertiaFieldNumber = 4;
  inline float f_massmomentofinertia() const;
  inline void set_f_massmomentofinertia(float value);

  // optional float f_SlantStiffnessFront = 5;
  inline bool has_f_slantstiffnessfront() const;
  inline void clear_f_slantstiffnessfront();
  static const int kFSlantStiffnessFrontFieldNumber = 5;
  inline float f_slantstiffnessfront() const;
  inline void set_f_slantstiffnessfront(float value);

  // optional float f_SlantStiffnessRear = 6;
  inline bool has_f_slantstiffnessrear() const;
  inline void clear_f_slantstiffnessrear();
  static const int kFSlantStiffnessRearFieldNumber = 6;
  inline float f_slantstiffnessrear() const;
  inline void set_f_slantstiffnessrear(float value);

  // optional float f_DynamicWheelRadius = 7;
  inline bool has_f_dynamicwheelradius() const;
  inline void clear_f_dynamicwheelradius();
  static const int kFDynamicWheelRadiusFieldNumber = 7;
  inline float f_dynamicwheelradius() const;
  inline void set_f_dynamicwheelradius(float value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_VehicleDynParams_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_f_distcom2frontaxle();
  inline void clear_has_f_distcom2frontaxle();
  inline void set_has_f_avgsteeringratio();
  inline void clear_has_f_avgsteeringratio();
  inline void set_has_f_massmomentofinertia();
  inline void clear_has_f_massmomentofinertia();
  inline void set_has_f_slantstiffnessfront();
  inline void clear_has_f_slantstiffnessfront();
  inline void set_has_f_slantstiffnessrear();
  inline void clear_has_f_slantstiffnessrear();
  inline void set_has_f_dynamicwheelradius();
  inline void clear_has_f_dynamicwheelradius();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  float f_distcom2frontaxle_;
  float f_avgsteeringratio_;
  float f_massmomentofinertia_;
  float f_slantstiffnessfront_;
  float f_slantstiffnessrear_;
  float f_dynamicwheelradius_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_VehicleDynParams_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_VehicleConfig_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_VehicleConfig_Proto();
  virtual ~AERO_t_VehicleConfig_Proto();

  AERO_t_VehicleConfig_Proto(const AERO_t_VehicleConfig_Proto& from);

  inline AERO_t_VehicleConfig_Proto& operator=(const AERO_t_VehicleConfig_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_VehicleConfig_Proto& default_instance();

  void Swap(AERO_t_VehicleConfig_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_VehicleConfig_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_VehicleConfig_Proto& from);
  void MergeFrom(const AERO_t_VehicleConfig_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalHeader_Proto SignalHeader = 1;
  inline bool has_signalheader() const;
  inline void clear_signalheader();
  static const int kSignalHeaderFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_SignalHeader_Proto& signalheader() const;
  inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* mutable_signalheader();
  inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* release_signalheader();
  inline void set_allocated_signalheader(::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader);

  // optional string u_LicenseNumber = 2;
  inline bool has_u_licensenumber() const;
  inline void clear_u_licensenumber();
  static const int kULicenseNumberFieldNumber = 2;
  inline const ::std::string& u_licensenumber() const;
  inline void set_u_licensenumber(const ::std::string& value);
  inline void set_u_licensenumber(const char* value);
  inline void set_u_licensenumber(const char* value, size_t size);
  inline ::std::string* mutable_u_licensenumber();
  inline ::std::string* release_u_licensenumber();
  inline void set_allocated_u_licensenumber(::std::string* u_licensenumber);

  // optional float f_TreadWidthFront = 3;
  inline bool has_f_treadwidthfront() const;
  inline void clear_f_treadwidthfront();
  static const int kFTreadWidthFrontFieldNumber = 3;
  inline float f_treadwidthfront() const;
  inline void set_f_treadwidthfront(float value);

  // optional float f_TreadWidthRear = 4;
  inline bool has_f_treadwidthrear() const;
  inline void clear_f_treadwidthrear();
  static const int kFTreadWidthRearFieldNumber = 4;
  inline float f_treadwidthrear() const;
  inline void set_f_treadwidthrear(float value);

  // optional float f_WheelBase = 5;
  inline bool has_f_wheelbase() const;
  inline void clear_f_wheelbase();
  static const int kFWheelBaseFieldNumber = 5;
  inline float f_wheelbase() const;
  inline void set_f_wheelbase(float value);

  // optional float f_Mass = 6;
  inline bool has_f_mass() const;
  inline void clear_f_mass();
  static const int kFMassFieldNumber = 6;
  inline float f_mass() const;
  inline void set_f_mass(float value);

  // optional float f_Length = 7;
  inline bool has_f_length() const;
  inline void clear_f_length();
  static const int kFLengthFieldNumber = 7;
  inline float f_length() const;
  inline void set_f_length(float value);

  // optional float f_Width = 8;
  inline bool has_f_width() const;
  inline void clear_f_width();
  static const int kFWidthFieldNumber = 8;
  inline float f_width() const;
  inline void set_f_width(float value);

  // optional float f_TotalWidth = 9;
  inline bool has_f_totalwidth() const;
  inline void clear_f_totalwidth();
  static const int kFTotalWidthFieldNumber = 9;
  inline float f_totalwidth() const;
  inline void set_f_totalwidth(float value);

  // optional float f_DistFrontAxle2Front = 10;
  inline bool has_f_distfrontaxle2front() const;
  inline void clear_f_distfrontaxle2front();
  static const int kFDistFrontAxle2FrontFieldNumber = 10;
  inline float f_distfrontaxle2front() const;
  inline void set_f_distfrontaxle2front(float value);

  // optional .aero_type_protobuf.AERO_t_VehicleDynParams_Proto DynamicParams = 11;
  inline bool has_dynamicparams() const;
  inline void clear_dynamicparams();
  static const int kDynamicParamsFieldNumber = 11;
  inline const ::aero_type_protobuf::AERO_t_VehicleDynParams_Proto& dynamicparams() const;
  inline ::aero_type_protobuf::AERO_t_VehicleDynParams_Proto* mutable_dynamicparams();
  inline ::aero_type_protobuf::AERO_t_VehicleDynParams_Proto* release_dynamicparams();
  inline void set_allocated_dynamicparams(::aero_type_protobuf::AERO_t_VehicleDynParams_Proto* dynamicparams);

  // repeated .aero_type_protobuf.AERO_t_SensorPose_Proto SensorPoses = 12;
  inline int sensorposes_size() const;
  inline void clear_sensorposes();
  static const int kSensorPosesFieldNumber = 12;
  inline const ::aero_type_protobuf::AERO_t_SensorPose_Proto& sensorposes(int index) const;
  inline ::aero_type_protobuf::AERO_t_SensorPose_Proto* mutable_sensorposes(int index);
  inline ::aero_type_protobuf::AERO_t_SensorPose_Proto* add_sensorposes();
  inline const ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_SensorPose_Proto >&
      sensorposes() const;
  inline ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_SensorPose_Proto >*
      mutable_sensorposes();

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_VehicleConfig_Proto)
 private:
  inline void set_has_signalheader();
  inline void clear_has_signalheader();
  inline void set_has_u_licensenumber();
  inline void clear_has_u_licensenumber();
  inline void set_has_f_treadwidthfront();
  inline void clear_has_f_treadwidthfront();
  inline void set_has_f_treadwidthrear();
  inline void clear_has_f_treadwidthrear();
  inline void set_has_f_wheelbase();
  inline void clear_has_f_wheelbase();
  inline void set_has_f_mass();
  inline void clear_has_f_mass();
  inline void set_has_f_length();
  inline void clear_has_f_length();
  inline void set_has_f_width();
  inline void clear_has_f_width();
  inline void set_has_f_totalwidth();
  inline void clear_has_f_totalwidth();
  inline void set_has_f_distfrontaxle2front();
  inline void clear_has_f_distfrontaxle2front();
  inline void set_has_dynamicparams();
  inline void clear_has_dynamicparams();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader_;
  ::std::string* u_licensenumber_;
  float f_treadwidthfront_;
  float f_treadwidthrear_;
  float f_wheelbase_;
  float f_mass_;
  float f_length_;
  float f_width_;
  float f_totalwidth_;
  float f_distfrontaxle2front_;
  ::aero_type_protobuf::AERO_t_VehicleDynParams_Proto* dynamicparams_;
  ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_SensorPose_Proto > sensorposes_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_VehicleConfig_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_booleanStatus_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_booleanStatus_Proto();
  virtual ~AERO_t_booleanStatus_Proto();

  AERO_t_booleanStatus_Proto(const AERO_t_booleanStatus_Proto& from);

  inline AERO_t_booleanStatus_Proto& operator=(const AERO_t_booleanStatus_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_booleanStatus_Proto& default_instance();

  void Swap(AERO_t_booleanStatus_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_booleanStatus_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_booleanStatus_Proto& from);
  void MergeFrom(const AERO_t_booleanStatus_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1;
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional bool b_Value = 2;
  inline bool has_b_value() const;
  inline void clear_b_value();
  static const int kBValueFieldNumber = 2;
  inline bool b_value() const;
  inline void set_b_value(bool value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_booleanStatus_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_b_value();
  inline void clear_has_b_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  bool b_value_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_booleanStatus_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_uint16Status_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_uint16Status_Proto();
  virtual ~AERO_t_uint16Status_Proto();

  AERO_t_uint16Status_Proto(const AERO_t_uint16Status_Proto& from);

  inline AERO_t_uint16Status_Proto& operator=(const AERO_t_uint16Status_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_uint16Status_Proto& default_instance();

  void Swap(AERO_t_uint16Status_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_uint16Status_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_uint16Status_Proto& from);
  void MergeFrom(const AERO_t_uint16Status_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1;
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional uint32 u_Value = 2;
  inline bool has_u_value() const;
  inline void clear_u_value();
  static const int kUValueFieldNumber = 2;
  inline ::google::protobuf::uint32 u_value() const;
  inline void set_u_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_uint16Status_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_u_value();
  inline void clear_has_u_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  ::google::protobuf::uint32 u_value_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_uint16Status_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_SensorStatus_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_SensorStatus_Proto();
  virtual ~AERO_t_SensorStatus_Proto();

  AERO_t_SensorStatus_Proto(const AERO_t_SensorStatus_Proto& from);

  inline AERO_t_SensorStatus_Proto& operator=(const AERO_t_SensorStatus_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_SensorStatus_Proto& default_instance();

  void Swap(AERO_t_SensorStatus_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_SensorStatus_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_SensorStatus_Proto& from);
  void MergeFrom(const AERO_t_SensorStatus_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
  inline bool has_e_signalstatus() const;
  inline void clear_e_signalstatus();
  static const int kESignalStatusFieldNumber = 1;
  inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto e_signalstatus() const;
  inline void set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value);

  // optional .aero_type_protobuf.AERO_t_SensorOperationStatus_Proto e_OperationStatus = 2;
  inline bool has_e_operationstatus() const;
  inline void clear_e_operationstatus();
  static const int kEOperationStatusFieldNumber = 2;
  inline ::aero_type_protobuf::AERO_t_SensorOperationStatus_Proto e_operationstatus() const;
  inline void set_e_operationstatus(::aero_type_protobuf::AERO_t_SensorOperationStatus_Proto value);

  // optional uint32 u_DisturbanceState = 3;
  inline bool has_u_disturbancestate() const;
  inline void clear_u_disturbancestate();
  static const int kUDisturbanceStateFieldNumber = 3;
  inline ::google::protobuf::uint32 u_disturbancestate() const;
  inline void set_u_disturbancestate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aero_type_protobuf.AERO_t_SensorStatus_Proto)
 private:
  inline void set_has_e_signalstatus();
  inline void clear_has_e_signalstatus();
  inline void set_has_e_operationstatus();
  inline void clear_has_e_operationstatus();
  inline void set_has_u_disturbancestate();
  inline void clear_has_u_disturbancestate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int e_signalstatus_;
  int e_operationstatus_;
  ::google::protobuf::uint32 u_disturbancestate_;
  friend void  protobuf_AddDesc_aero_5ftype_2eproto();
  friend void protobuf_AssignDesc_aero_5ftype_2eproto();
  friend void protobuf_ShutdownFile_aero_5ftype_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_SensorStatus_Proto* default_instance_;
};
// ===================================================================


// ===================================================================

// AERO_t_s_Timestamp_Proto

// optional sint64 s_Timestamp = 1;
inline bool AERO_t_s_Timestamp_Proto::has_s_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_s_Timestamp_Proto::set_has_s_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_s_Timestamp_Proto::clear_has_s_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_s_Timestamp_Proto::clear_s_timestamp() {
  s_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_s_timestamp();
}
inline ::google::protobuf::int64 AERO_t_s_Timestamp_Proto::s_timestamp() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_s_Timestamp_Proto.s_Timestamp)
  return s_timestamp_;
}
inline void AERO_t_s_Timestamp_Proto::set_s_timestamp(::google::protobuf::int64 value) {
  set_has_s_timestamp();
  s_timestamp_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_s_Timestamp_Proto.s_Timestamp)
}

// -------------------------------------------------------------------

// AERO_t_u_CycleCounter_Proto

// optional uint32 u_CycleCounter = 1;
inline bool AERO_t_u_CycleCounter_Proto::has_u_cyclecounter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_u_CycleCounter_Proto::set_has_u_cyclecounter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_u_CycleCounter_Proto::clear_has_u_cyclecounter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_u_CycleCounter_Proto::clear_u_cyclecounter() {
  u_cyclecounter_ = 0u;
  clear_has_u_cyclecounter();
}
inline ::google::protobuf::uint32 AERO_t_u_CycleCounter_Proto::u_cyclecounter() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_u_CycleCounter_Proto.u_CycleCounter)
  return u_cyclecounter_;
}
inline void AERO_t_u_CycleCounter_Proto::set_u_cyclecounter(::google::protobuf::uint32 value) {
  set_has_u_cyclecounter();
  u_cyclecounter_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_u_CycleCounter_Proto.u_CycleCounter)
}

// -------------------------------------------------------------------

// AERO_t_u_Id_Proto

// optional uint32 u_Id = 1;
inline bool AERO_t_u_Id_Proto::has_u_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_u_Id_Proto::set_has_u_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_u_Id_Proto::clear_has_u_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_u_Id_Proto::clear_u_id() {
  u_id_ = 0u;
  clear_has_u_id();
}
inline ::google::protobuf::uint32 AERO_t_u_Id_Proto::u_id() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_u_Id_Proto.u_Id)
  return u_id_;
}
inline void AERO_t_u_Id_Proto::set_u_id(::google::protobuf::uint32 value) {
  set_has_u_id();
  u_id_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_u_Id_Proto.u_Id)
}

// -------------------------------------------------------------------

// AERO_t_float32Status_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_float32Status_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_float32Status_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_float32Status_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_float32Status_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_float32Status_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_float32Status_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_float32Status_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_float32Status_Proto.e_SignalStatus)
}

// optional float f_Value = 2;
inline bool AERO_t_float32Status_Proto::has_f_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_float32Status_Proto::set_has_f_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_float32Status_Proto::clear_has_f_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_float32Status_Proto::clear_f_value() {
  f_value_ = 0;
  clear_has_f_value();
}
inline float AERO_t_float32Status_Proto::f_value() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_float32Status_Proto.f_Value)
  return f_value_;
}
inline void AERO_t_float32Status_Proto::set_f_value(float value) {
  set_has_f_value();
  f_value_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_float32Status_Proto.f_Value)
}

// -------------------------------------------------------------------

// AERO_t_Point2D_Proto

// optional float f_X = 1;
inline bool AERO_t_Point2D_Proto::has_f_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_Point2D_Proto::set_has_f_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_Point2D_Proto::clear_has_f_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_Point2D_Proto::clear_f_x() {
  f_x_ = 0;
  clear_has_f_x();
}
inline float AERO_t_Point2D_Proto::f_x() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Point2D_Proto.f_X)
  return f_x_;
}
inline void AERO_t_Point2D_Proto::set_f_x(float value) {
  set_has_f_x();
  f_x_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Point2D_Proto.f_X)
}

// optional float f_Y = 2;
inline bool AERO_t_Point2D_Proto::has_f_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_Point2D_Proto::set_has_f_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_Point2D_Proto::clear_has_f_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_Point2D_Proto::clear_f_y() {
  f_y_ = 0;
  clear_has_f_y();
}
inline float AERO_t_Point2D_Proto::f_y() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Point2D_Proto.f_Y)
  return f_y_;
}
inline void AERO_t_Point2D_Proto::set_f_y(float value) {
  set_has_f_y();
  f_y_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Point2D_Proto.f_Y)
}

// -------------------------------------------------------------------

// AERO_t_Point2DStatus_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_Point2DStatus_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_Point2DStatus_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_Point2DStatus_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_Point2DStatus_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_Point2DStatus_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Point2DStatus_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_Point2DStatus_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Point2DStatus_Proto.e_SignalStatus)
}

// optional float f_X = 2;
inline bool AERO_t_Point2DStatus_Proto::has_f_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_Point2DStatus_Proto::set_has_f_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_Point2DStatus_Proto::clear_has_f_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_Point2DStatus_Proto::clear_f_x() {
  f_x_ = 0;
  clear_has_f_x();
}
inline float AERO_t_Point2DStatus_Proto::f_x() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Point2DStatus_Proto.f_X)
  return f_x_;
}
inline void AERO_t_Point2DStatus_Proto::set_f_x(float value) {
  set_has_f_x();
  f_x_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Point2DStatus_Proto.f_X)
}

// optional float f_Y = 3;
inline bool AERO_t_Point2DStatus_Proto::has_f_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_Point2DStatus_Proto::set_has_f_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_Point2DStatus_Proto::clear_has_f_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_Point2DStatus_Proto::clear_f_y() {
  f_y_ = 0;
  clear_has_f_y();
}
inline float AERO_t_Point2DStatus_Proto::f_y() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Point2DStatus_Proto.f_Y)
  return f_y_;
}
inline void AERO_t_Point2DStatus_Proto::set_f_y(float value) {
  set_has_f_y();
  f_y_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Point2DStatus_Proto.f_Y)
}

// -------------------------------------------------------------------

// AERO_t_BoundaryPoint_Proto

// optional .aero_type_protobuf.AERO_t_Point2D_Proto Position = 1;
inline bool AERO_t_BoundaryPoint_Proto::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_BoundaryPoint_Proto::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_BoundaryPoint_Proto::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_BoundaryPoint_Proto::clear_position() {
  if (position_ != NULL) position_->::aero_type_protobuf::AERO_t_Point2D_Proto::Clear();
  clear_has_position();
}
inline const ::aero_type_protobuf::AERO_t_Point2D_Proto& AERO_t_BoundaryPoint_Proto::position() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_BoundaryPoint_Proto.Position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::aero_type_protobuf::AERO_t_Point2D_Proto* AERO_t_BoundaryPoint_Proto::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::aero_type_protobuf::AERO_t_Point2D_Proto;
  // @@protoc_insertion_point(field_mutable:aero_type_protobuf.AERO_t_BoundaryPoint_Proto.Position)
  return position_;
}
inline ::aero_type_protobuf::AERO_t_Point2D_Proto* AERO_t_BoundaryPoint_Proto::release_position() {
  clear_has_position();
  ::aero_type_protobuf::AERO_t_Point2D_Proto* temp = position_;
  position_ = NULL;
  return temp;
}
inline void AERO_t_BoundaryPoint_Proto::set_allocated_position(::aero_type_protobuf::AERO_t_Point2D_Proto* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_type_protobuf.AERO_t_BoundaryPoint_Proto.Position)
}

// optional sint32 s_Height = 2;
inline bool AERO_t_BoundaryPoint_Proto::has_s_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_BoundaryPoint_Proto::set_has_s_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_BoundaryPoint_Proto::clear_has_s_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_BoundaryPoint_Proto::clear_s_height() {
  s_height_ = 0;
  clear_has_s_height();
}
inline ::google::protobuf::int32 AERO_t_BoundaryPoint_Proto::s_height() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_BoundaryPoint_Proto.s_Height)
  return s_height_;
}
inline void AERO_t_BoundaryPoint_Proto::set_s_height(::google::protobuf::int32 value) {
  set_has_s_height();
  s_height_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_BoundaryPoint_Proto.s_Height)
}

// -------------------------------------------------------------------

// AERO_t_Point3D_Proto

// optional float f_X = 1;
inline bool AERO_t_Point3D_Proto::has_f_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_Point3D_Proto::set_has_f_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_Point3D_Proto::clear_has_f_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_Point3D_Proto::clear_f_x() {
  f_x_ = 0;
  clear_has_f_x();
}
inline float AERO_t_Point3D_Proto::f_x() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Point3D_Proto.f_X)
  return f_x_;
}
inline void AERO_t_Point3D_Proto::set_f_x(float value) {
  set_has_f_x();
  f_x_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Point3D_Proto.f_X)
}

// optional float f_Y = 2;
inline bool AERO_t_Point3D_Proto::has_f_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_Point3D_Proto::set_has_f_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_Point3D_Proto::clear_has_f_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_Point3D_Proto::clear_f_y() {
  f_y_ = 0;
  clear_has_f_y();
}
inline float AERO_t_Point3D_Proto::f_y() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Point3D_Proto.f_Y)
  return f_y_;
}
inline void AERO_t_Point3D_Proto::set_f_y(float value) {
  set_has_f_y();
  f_y_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Point3D_Proto.f_Y)
}

// optional float f_Z = 3;
inline bool AERO_t_Point3D_Proto::has_f_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_Point3D_Proto::set_has_f_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_Point3D_Proto::clear_has_f_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_Point3D_Proto::clear_f_z() {
  f_z_ = 0;
  clear_has_f_z();
}
inline float AERO_t_Point3D_Proto::f_z() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Point3D_Proto.f_Z)
  return f_z_;
}
inline void AERO_t_Point3D_Proto::set_f_z(float value) {
  set_has_f_z();
  f_z_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Point3D_Proto.f_Z)
}

// -------------------------------------------------------------------

// AERO_t_Point3DStatus_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_Point3DStatus_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_Point3DStatus_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_Point3DStatus_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_Point3DStatus_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_Point3DStatus_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Point3DStatus_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_Point3DStatus_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Point3DStatus_Proto.e_SignalStatus)
}

// optional float f_X = 2;
inline bool AERO_t_Point3DStatus_Proto::has_f_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_Point3DStatus_Proto::set_has_f_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_Point3DStatus_Proto::clear_has_f_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_Point3DStatus_Proto::clear_f_x() {
  f_x_ = 0;
  clear_has_f_x();
}
inline float AERO_t_Point3DStatus_Proto::f_x() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Point3DStatus_Proto.f_X)
  return f_x_;
}
inline void AERO_t_Point3DStatus_Proto::set_f_x(float value) {
  set_has_f_x();
  f_x_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Point3DStatus_Proto.f_X)
}

// optional float f_Y = 3;
inline bool AERO_t_Point3DStatus_Proto::has_f_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_Point3DStatus_Proto::set_has_f_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_Point3DStatus_Proto::clear_has_f_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_Point3DStatus_Proto::clear_f_y() {
  f_y_ = 0;
  clear_has_f_y();
}
inline float AERO_t_Point3DStatus_Proto::f_y() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Point3DStatus_Proto.f_Y)
  return f_y_;
}
inline void AERO_t_Point3DStatus_Proto::set_f_y(float value) {
  set_has_f_y();
  f_y_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Point3DStatus_Proto.f_Y)
}

// optional float f_Z = 4;
inline bool AERO_t_Point3DStatus_Proto::has_f_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_Point3DStatus_Proto::set_has_f_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_Point3DStatus_Proto::clear_has_f_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_Point3DStatus_Proto::clear_f_z() {
  f_z_ = 0;
  clear_has_f_z();
}
inline float AERO_t_Point3DStatus_Proto::f_z() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Point3DStatus_Proto.f_Z)
  return f_z_;
}
inline void AERO_t_Point3DStatus_Proto::set_f_z(float value) {
  set_has_f_z();
  f_z_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Point3DStatus_Proto.f_Z)
}

// -------------------------------------------------------------------

// AERO_t_Orientation3D_Proto

// optional float f_Roll = 1;
inline bool AERO_t_Orientation3D_Proto::has_f_roll() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_Orientation3D_Proto::set_has_f_roll() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_Orientation3D_Proto::clear_has_f_roll() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_Orientation3D_Proto::clear_f_roll() {
  f_roll_ = 0;
  clear_has_f_roll();
}
inline float AERO_t_Orientation3D_Proto::f_roll() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Orientation3D_Proto.f_Roll)
  return f_roll_;
}
inline void AERO_t_Orientation3D_Proto::set_f_roll(float value) {
  set_has_f_roll();
  f_roll_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Orientation3D_Proto.f_Roll)
}

// optional float f_Pitch = 2;
inline bool AERO_t_Orientation3D_Proto::has_f_pitch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_Orientation3D_Proto::set_has_f_pitch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_Orientation3D_Proto::clear_has_f_pitch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_Orientation3D_Proto::clear_f_pitch() {
  f_pitch_ = 0;
  clear_has_f_pitch();
}
inline float AERO_t_Orientation3D_Proto::f_pitch() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Orientation3D_Proto.f_Pitch)
  return f_pitch_;
}
inline void AERO_t_Orientation3D_Proto::set_f_pitch(float value) {
  set_has_f_pitch();
  f_pitch_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Orientation3D_Proto.f_Pitch)
}

// optional float f_Yaw = 3;
inline bool AERO_t_Orientation3D_Proto::has_f_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_Orientation3D_Proto::set_has_f_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_Orientation3D_Proto::clear_has_f_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_Orientation3D_Proto::clear_f_yaw() {
  f_yaw_ = 0;
  clear_has_f_yaw();
}
inline float AERO_t_Orientation3D_Proto::f_yaw() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Orientation3D_Proto.f_Yaw)
  return f_yaw_;
}
inline void AERO_t_Orientation3D_Proto::set_f_yaw(float value) {
  set_has_f_yaw();
  f_yaw_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Orientation3D_Proto.f_Yaw)
}

// -------------------------------------------------------------------

// AERO_t_Pose2D_Proto

// optional float f_X = 1;
inline bool AERO_t_Pose2D_Proto::has_f_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_Pose2D_Proto::set_has_f_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_Pose2D_Proto::clear_has_f_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_Pose2D_Proto::clear_f_x() {
  f_x_ = 0;
  clear_has_f_x();
}
inline float AERO_t_Pose2D_Proto::f_x() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Pose2D_Proto.f_X)
  return f_x_;
}
inline void AERO_t_Pose2D_Proto::set_f_x(float value) {
  set_has_f_x();
  f_x_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Pose2D_Proto.f_X)
}

// optional float f_Y = 2;
inline bool AERO_t_Pose2D_Proto::has_f_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_Pose2D_Proto::set_has_f_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_Pose2D_Proto::clear_has_f_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_Pose2D_Proto::clear_f_y() {
  f_y_ = 0;
  clear_has_f_y();
}
inline float AERO_t_Pose2D_Proto::f_y() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Pose2D_Proto.f_Y)
  return f_y_;
}
inline void AERO_t_Pose2D_Proto::set_f_y(float value) {
  set_has_f_y();
  f_y_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Pose2D_Proto.f_Y)
}

// optional float f_Yaw = 3;
inline bool AERO_t_Pose2D_Proto::has_f_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_Pose2D_Proto::set_has_f_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_Pose2D_Proto::clear_has_f_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_Pose2D_Proto::clear_f_yaw() {
  f_yaw_ = 0;
  clear_has_f_yaw();
}
inline float AERO_t_Pose2D_Proto::f_yaw() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Pose2D_Proto.f_Yaw)
  return f_yaw_;
}
inline void AERO_t_Pose2D_Proto::set_f_yaw(float value) {
  set_has_f_yaw();
  f_yaw_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Pose2D_Proto.f_Yaw)
}

// -------------------------------------------------------------------

// AERO_t_Pose3D_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 3 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_Pose3D_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_Pose3D_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_Pose3D_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_Pose3D_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_Pose3D_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Pose3D_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_Pose3D_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Pose3D_Proto.e_SignalStatus)
}

// optional .aero_type_protobuf.AERO_t_Point3D_Proto Position = 1;
inline bool AERO_t_Pose3D_Proto::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_Pose3D_Proto::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_Pose3D_Proto::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_Pose3D_Proto::clear_position() {
  if (position_ != NULL) position_->::aero_type_protobuf::AERO_t_Point3D_Proto::Clear();
  clear_has_position();
}
inline const ::aero_type_protobuf::AERO_t_Point3D_Proto& AERO_t_Pose3D_Proto::position() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Pose3D_Proto.Position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::aero_type_protobuf::AERO_t_Point3D_Proto* AERO_t_Pose3D_Proto::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::aero_type_protobuf::AERO_t_Point3D_Proto;
  // @@protoc_insertion_point(field_mutable:aero_type_protobuf.AERO_t_Pose3D_Proto.Position)
  return position_;
}
inline ::aero_type_protobuf::AERO_t_Point3D_Proto* AERO_t_Pose3D_Proto::release_position() {
  clear_has_position();
  ::aero_type_protobuf::AERO_t_Point3D_Proto* temp = position_;
  position_ = NULL;
  return temp;
}
inline void AERO_t_Pose3D_Proto::set_allocated_position(::aero_type_protobuf::AERO_t_Point3D_Proto* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_type_protobuf.AERO_t_Pose3D_Proto.Position)
}

// optional .aero_type_protobuf.AERO_t_Orientation3D_Proto Orientation = 2;
inline bool AERO_t_Pose3D_Proto::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_Pose3D_Proto::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_Pose3D_Proto::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_Pose3D_Proto::clear_orientation() {
  if (orientation_ != NULL) orientation_->::aero_type_protobuf::AERO_t_Orientation3D_Proto::Clear();
  clear_has_orientation();
}
inline const ::aero_type_protobuf::AERO_t_Orientation3D_Proto& AERO_t_Pose3D_Proto::orientation() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Pose3D_Proto.Orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::aero_type_protobuf::AERO_t_Orientation3D_Proto* AERO_t_Pose3D_Proto::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) orientation_ = new ::aero_type_protobuf::AERO_t_Orientation3D_Proto;
  // @@protoc_insertion_point(field_mutable:aero_type_protobuf.AERO_t_Pose3D_Proto.Orientation)
  return orientation_;
}
inline ::aero_type_protobuf::AERO_t_Orientation3D_Proto* AERO_t_Pose3D_Proto::release_orientation() {
  clear_has_orientation();
  ::aero_type_protobuf::AERO_t_Orientation3D_Proto* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void AERO_t_Pose3D_Proto::set_allocated_orientation(::aero_type_protobuf::AERO_t_Orientation3D_Proto* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_type_protobuf.AERO_t_Pose3D_Proto.Orientation)
}

// -------------------------------------------------------------------

// AERO_t_Motion_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_Motion_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_Motion_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_Motion_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_Motion_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_Motion_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Motion_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_Motion_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Motion_Proto.e_SignalStatus)
}

// optional .aero_type_protobuf.AERO_t_Point2D_Proto Velocity = 2;
inline bool AERO_t_Motion_Proto::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_Motion_Proto::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_Motion_Proto::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_Motion_Proto::clear_velocity() {
  if (velocity_ != NULL) velocity_->::aero_type_protobuf::AERO_t_Point2D_Proto::Clear();
  clear_has_velocity();
}
inline const ::aero_type_protobuf::AERO_t_Point2D_Proto& AERO_t_Motion_Proto::velocity() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Motion_Proto.Velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::aero_type_protobuf::AERO_t_Point2D_Proto* AERO_t_Motion_Proto::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::aero_type_protobuf::AERO_t_Point2D_Proto;
  // @@protoc_insertion_point(field_mutable:aero_type_protobuf.AERO_t_Motion_Proto.Velocity)
  return velocity_;
}
inline ::aero_type_protobuf::AERO_t_Point2D_Proto* AERO_t_Motion_Proto::release_velocity() {
  clear_has_velocity();
  ::aero_type_protobuf::AERO_t_Point2D_Proto* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void AERO_t_Motion_Proto::set_allocated_velocity(::aero_type_protobuf::AERO_t_Point2D_Proto* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_type_protobuf.AERO_t_Motion_Proto.Velocity)
}

// optional float f_YawRate = 3;
inline bool AERO_t_Motion_Proto::has_f_yawrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_Motion_Proto::set_has_f_yawrate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_Motion_Proto::clear_has_f_yawrate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_Motion_Proto::clear_f_yawrate() {
  f_yawrate_ = 0;
  clear_has_f_yawrate();
}
inline float AERO_t_Motion_Proto::f_yawrate() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Motion_Proto.f_YawRate)
  return f_yawrate_;
}
inline void AERO_t_Motion_Proto::set_f_yawrate(float value) {
  set_has_f_yawrate();
  f_yawrate_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Motion_Proto.f_YawRate)
}

// -------------------------------------------------------------------

// AERO_t_SignalHeader_Proto

// optional sint64 s_Timestamp = 1;
inline bool AERO_t_SignalHeader_Proto::has_s_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_SignalHeader_Proto::set_has_s_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_SignalHeader_Proto::clear_has_s_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_SignalHeader_Proto::clear_s_timestamp() {
  s_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_s_timestamp();
}
inline ::google::protobuf::int64 AERO_t_SignalHeader_Proto::s_timestamp() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_SignalHeader_Proto.s_Timestamp)
  return s_timestamp_;
}
inline void AERO_t_SignalHeader_Proto::set_s_timestamp(::google::protobuf::int64 value) {
  set_has_s_timestamp();
  s_timestamp_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_SignalHeader_Proto.s_Timestamp)
}

// optional uint32 u_CycleCounter = 2;
inline bool AERO_t_SignalHeader_Proto::has_u_cyclecounter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_SignalHeader_Proto::set_has_u_cyclecounter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_SignalHeader_Proto::clear_has_u_cyclecounter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_SignalHeader_Proto::clear_u_cyclecounter() {
  u_cyclecounter_ = 0u;
  clear_has_u_cyclecounter();
}
inline ::google::protobuf::uint32 AERO_t_SignalHeader_Proto::u_cyclecounter() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_SignalHeader_Proto.u_CycleCounter)
  return u_cyclecounter_;
}
inline void AERO_t_SignalHeader_Proto::set_u_cyclecounter(::google::protobuf::uint32 value) {
  set_has_u_cyclecounter();
  u_cyclecounter_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_SignalHeader_Proto.u_CycleCounter)
}

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 3 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_SignalHeader_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_SignalHeader_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_SignalHeader_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_SignalHeader_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_SignalHeader_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_SignalHeader_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_SignalHeader_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_SignalHeader_Proto.e_SignalStatus)
}

// -------------------------------------------------------------------

// AERO_t_Clothoid_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_Clothoid_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_Clothoid_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_Clothoid_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_Clothoid_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_Clothoid_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Clothoid_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_Clothoid_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Clothoid_Proto.e_SignalStatus)
}

// optional float f_LateralDistance = 2;
inline bool AERO_t_Clothoid_Proto::has_f_lateraldistance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_Clothoid_Proto::set_has_f_lateraldistance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_Clothoid_Proto::clear_has_f_lateraldistance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_Clothoid_Proto::clear_f_lateraldistance() {
  f_lateraldistance_ = 0;
  clear_has_f_lateraldistance();
}
inline float AERO_t_Clothoid_Proto::f_lateraldistance() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Clothoid_Proto.f_LateralDistance)
  return f_lateraldistance_;
}
inline void AERO_t_Clothoid_Proto::set_f_lateraldistance(float value) {
  set_has_f_lateraldistance();
  f_lateraldistance_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Clothoid_Proto.f_LateralDistance)
}

// optional float f_YawAngle = 3;
inline bool AERO_t_Clothoid_Proto::has_f_yawangle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_Clothoid_Proto::set_has_f_yawangle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_Clothoid_Proto::clear_has_f_yawangle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_Clothoid_Proto::clear_f_yawangle() {
  f_yawangle_ = 0;
  clear_has_f_yawangle();
}
inline float AERO_t_Clothoid_Proto::f_yawangle() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Clothoid_Proto.f_YawAngle)
  return f_yawangle_;
}
inline void AERO_t_Clothoid_Proto::set_f_yawangle(float value) {
  set_has_f_yawangle();
  f_yawangle_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Clothoid_Proto.f_YawAngle)
}

// optional float f_curvature = 4;
inline bool AERO_t_Clothoid_Proto::has_f_curvature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_Clothoid_Proto::set_has_f_curvature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_Clothoid_Proto::clear_has_f_curvature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_Clothoid_Proto::clear_f_curvature() {
  f_curvature_ = 0;
  clear_has_f_curvature();
}
inline float AERO_t_Clothoid_Proto::f_curvature() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Clothoid_Proto.f_curvature)
  return f_curvature_;
}
inline void AERO_t_Clothoid_Proto::set_f_curvature(float value) {
  set_has_f_curvature();
  f_curvature_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Clothoid_Proto.f_curvature)
}

// optional float f_curvatureChange = 5;
inline bool AERO_t_Clothoid_Proto::has_f_curvaturechange() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_Clothoid_Proto::set_has_f_curvaturechange() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_Clothoid_Proto::clear_has_f_curvaturechange() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_Clothoid_Proto::clear_f_curvaturechange() {
  f_curvaturechange_ = 0;
  clear_has_f_curvaturechange();
}
inline float AERO_t_Clothoid_Proto::f_curvaturechange() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_Clothoid_Proto.f_curvatureChange)
  return f_curvaturechange_;
}
inline void AERO_t_Clothoid_Proto::set_f_curvaturechange(float value) {
  set_has_f_curvaturechange();
  f_curvaturechange_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_Clothoid_Proto.f_curvatureChange)
}

// -------------------------------------------------------------------

// AERO_t_PolyChain_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_PolyChain_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_PolyChain_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_PolyChain_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_PolyChain_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_PolyChain_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_PolyChain_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_PolyChain_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_PolyChain_Proto.e_SignalStatus)
}

// optional .aero_type_protobuf.AERO_t_PolyChainFreeSide_Proto e_FreeSide = 2;
inline bool AERO_t_PolyChain_Proto::has_e_freeside() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_PolyChain_Proto::set_has_e_freeside() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_PolyChain_Proto::clear_has_e_freeside() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_PolyChain_Proto::clear_e_freeside() {
  e_freeside_ = 0;
  clear_has_e_freeside();
}
inline ::aero_type_protobuf::AERO_t_PolyChainFreeSide_Proto AERO_t_PolyChain_Proto::e_freeside() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_PolyChain_Proto.e_FreeSide)
  return static_cast< ::aero_type_protobuf::AERO_t_PolyChainFreeSide_Proto >(e_freeside_);
}
inline void AERO_t_PolyChain_Proto::set_e_freeside(::aero_type_protobuf::AERO_t_PolyChainFreeSide_Proto value) {
  assert(::aero_type_protobuf::AERO_t_PolyChainFreeSide_Proto_IsValid(value));
  set_has_e_freeside();
  e_freeside_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_PolyChain_Proto.e_FreeSide)
}

// optional uint32 u_NumPoints = 3;
inline bool AERO_t_PolyChain_Proto::has_u_numpoints() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_PolyChain_Proto::set_has_u_numpoints() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_PolyChain_Proto::clear_has_u_numpoints() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_PolyChain_Proto::clear_u_numpoints() {
  u_numpoints_ = 0u;
  clear_has_u_numpoints();
}
inline ::google::protobuf::uint32 AERO_t_PolyChain_Proto::u_numpoints() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_PolyChain_Proto.u_NumPoints)
  return u_numpoints_;
}
inline void AERO_t_PolyChain_Proto::set_u_numpoints(::google::protobuf::uint32 value) {
  set_has_u_numpoints();
  u_numpoints_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_PolyChain_Proto.u_NumPoints)
}

// repeated .aero_type_protobuf.AERO_t_BoundaryPoint_Proto BoundaryPoints = 4;
inline int AERO_t_PolyChain_Proto::boundarypoints_size() const {
  return boundarypoints_.size();
}
inline void AERO_t_PolyChain_Proto::clear_boundarypoints() {
  boundarypoints_.Clear();
}
inline const ::aero_type_protobuf::AERO_t_BoundaryPoint_Proto& AERO_t_PolyChain_Proto::boundarypoints(int index) const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_PolyChain_Proto.BoundaryPoints)
  return boundarypoints_.Get(index);
}
inline ::aero_type_protobuf::AERO_t_BoundaryPoint_Proto* AERO_t_PolyChain_Proto::mutable_boundarypoints(int index) {
  // @@protoc_insertion_point(field_mutable:aero_type_protobuf.AERO_t_PolyChain_Proto.BoundaryPoints)
  return boundarypoints_.Mutable(index);
}
inline ::aero_type_protobuf::AERO_t_BoundaryPoint_Proto* AERO_t_PolyChain_Proto::add_boundarypoints() {
  // @@protoc_insertion_point(field_add:aero_type_protobuf.AERO_t_PolyChain_Proto.BoundaryPoints)
  return boundarypoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_BoundaryPoint_Proto >&
AERO_t_PolyChain_Proto::boundarypoints() const {
  // @@protoc_insertion_point(field_list:aero_type_protobuf.AERO_t_PolyChain_Proto.BoundaryPoints)
  return boundarypoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_BoundaryPoint_Proto >*
AERO_t_PolyChain_Proto::mutable_boundarypoints() {
  // @@protoc_insertion_point(field_mutable_list:aero_type_protobuf.AERO_t_PolyChain_Proto.BoundaryPoints)
  return &boundarypoints_;
}

// -------------------------------------------------------------------

// AERO_t_PolyChainQuality_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_PolyChainQuality_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_PolyChainQuality_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_PolyChainQuality_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_PolyChainQuality_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_PolyChainQuality_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_PolyChainQuality_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_PolyChainQuality_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_PolyChainQuality_Proto.e_SignalStatus)
}

// repeated uint32 u_ContribSensors = 2;
inline int AERO_t_PolyChainQuality_Proto::u_contribsensors_size() const {
  return u_contribsensors_.size();
}
inline void AERO_t_PolyChainQuality_Proto::clear_u_contribsensors() {
  u_contribsensors_.Clear();
}
inline ::google::protobuf::uint32 AERO_t_PolyChainQuality_Proto::u_contribsensors(int index) const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_PolyChainQuality_Proto.u_ContribSensors)
  return u_contribsensors_.Get(index);
}
inline void AERO_t_PolyChainQuality_Proto::set_u_contribsensors(int index, ::google::protobuf::uint32 value) {
  u_contribsensors_.Set(index, value);
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_PolyChainQuality_Proto.u_ContribSensors)
}
inline void AERO_t_PolyChainQuality_Proto::add_u_contribsensors(::google::protobuf::uint32 value) {
  u_contribsensors_.Add(value);
  // @@protoc_insertion_point(field_add:aero_type_protobuf.AERO_t_PolyChainQuality_Proto.u_ContribSensors)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AERO_t_PolyChainQuality_Proto::u_contribsensors() const {
  // @@protoc_insertion_point(field_list:aero_type_protobuf.AERO_t_PolyChainQuality_Proto.u_ContribSensors)
  return u_contribsensors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AERO_t_PolyChainQuality_Proto::mutable_u_contribsensors() {
  // @@protoc_insertion_point(field_mutable_list:aero_type_protobuf.AERO_t_PolyChainQuality_Proto.u_ContribSensors)
  return &u_contribsensors_;
}

// repeated sint32 s_Quality = 3;
inline int AERO_t_PolyChainQuality_Proto::s_quality_size() const {
  return s_quality_.size();
}
inline void AERO_t_PolyChainQuality_Proto::clear_s_quality() {
  s_quality_.Clear();
}
inline ::google::protobuf::int32 AERO_t_PolyChainQuality_Proto::s_quality(int index) const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_PolyChainQuality_Proto.s_Quality)
  return s_quality_.Get(index);
}
inline void AERO_t_PolyChainQuality_Proto::set_s_quality(int index, ::google::protobuf::int32 value) {
  s_quality_.Set(index, value);
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_PolyChainQuality_Proto.s_Quality)
}
inline void AERO_t_PolyChainQuality_Proto::add_s_quality(::google::protobuf::int32 value) {
  s_quality_.Add(value);
  // @@protoc_insertion_point(field_add:aero_type_protobuf.AERO_t_PolyChainQuality_Proto.s_Quality)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AERO_t_PolyChainQuality_Proto::s_quality() const {
  // @@protoc_insertion_point(field_list:aero_type_protobuf.AERO_t_PolyChainQuality_Proto.s_Quality)
  return s_quality_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AERO_t_PolyChainQuality_Proto::mutable_s_quality() {
  // @@protoc_insertion_point(field_mutable_list:aero_type_protobuf.AERO_t_PolyChainQuality_Proto.s_Quality)
  return &s_quality_;
}

// -------------------------------------------------------------------

// AERO_t_SensorPose_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_SensorPose_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_SensorPose_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_SensorPose_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_SensorPose_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_SensorPose_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_SensorPose_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_SensorPose_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_SensorPose_Proto.e_SignalStatus)
}

// optional .aero_type_protobuf.AERO_t_SensorDescriptor_Proto e_Descriptor = 2;
inline bool AERO_t_SensorPose_Proto::has_e_descriptor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_SensorPose_Proto::set_has_e_descriptor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_SensorPose_Proto::clear_has_e_descriptor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_SensorPose_Proto::clear_e_descriptor() {
  e_descriptor_ = 0;
  clear_has_e_descriptor();
}
inline ::aero_type_protobuf::AERO_t_SensorDescriptor_Proto AERO_t_SensorPose_Proto::e_descriptor() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_SensorPose_Proto.e_Descriptor)
  return static_cast< ::aero_type_protobuf::AERO_t_SensorDescriptor_Proto >(e_descriptor_);
}
inline void AERO_t_SensorPose_Proto::set_e_descriptor(::aero_type_protobuf::AERO_t_SensorDescriptor_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SensorDescriptor_Proto_IsValid(value));
  set_has_e_descriptor();
  e_descriptor_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_SensorPose_Proto.e_Descriptor)
}

// optional .aero_type_protobuf.AERO_t_SensorMake_Proto e_Make = 4;
inline bool AERO_t_SensorPose_Proto::has_e_make() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_SensorPose_Proto::set_has_e_make() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_SensorPose_Proto::clear_has_e_make() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_SensorPose_Proto::clear_e_make() {
  e_make_ = 0;
  clear_has_e_make();
}
inline ::aero_type_protobuf::AERO_t_SensorMake_Proto AERO_t_SensorPose_Proto::e_make() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_SensorPose_Proto.e_Make)
  return static_cast< ::aero_type_protobuf::AERO_t_SensorMake_Proto >(e_make_);
}
inline void AERO_t_SensorPose_Proto::set_e_make(::aero_type_protobuf::AERO_t_SensorMake_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SensorMake_Proto_IsValid(value));
  set_has_e_make();
  e_make_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_SensorPose_Proto.e_Make)
}

// optional .aero_type_protobuf.AERO_t_Pose3D_Proto Pose = 3;
inline bool AERO_t_SensorPose_Proto::has_pose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_SensorPose_Proto::set_has_pose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_SensorPose_Proto::clear_has_pose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_SensorPose_Proto::clear_pose() {
  if (pose_ != NULL) pose_->::aero_type_protobuf::AERO_t_Pose3D_Proto::Clear();
  clear_has_pose();
}
inline const ::aero_type_protobuf::AERO_t_Pose3D_Proto& AERO_t_SensorPose_Proto::pose() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_SensorPose_Proto.Pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::aero_type_protobuf::AERO_t_Pose3D_Proto* AERO_t_SensorPose_Proto::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::aero_type_protobuf::AERO_t_Pose3D_Proto;
  // @@protoc_insertion_point(field_mutable:aero_type_protobuf.AERO_t_SensorPose_Proto.Pose)
  return pose_;
}
inline ::aero_type_protobuf::AERO_t_Pose3D_Proto* AERO_t_SensorPose_Proto::release_pose() {
  clear_has_pose();
  ::aero_type_protobuf::AERO_t_Pose3D_Proto* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void AERO_t_SensorPose_Proto::set_allocated_pose(::aero_type_protobuf::AERO_t_Pose3D_Proto* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_type_protobuf.AERO_t_SensorPose_Proto.Pose)
}

// -------------------------------------------------------------------

// AERO_t_VehicleDynParams_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_VehicleDynParams_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_VehicleDynParams_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_VehicleDynParams_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_VehicleDynParams_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.e_SignalStatus)
}

// optional float f_DistCoM2FrontAxle = 2;
inline bool AERO_t_VehicleDynParams_Proto::has_f_distcom2frontaxle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_VehicleDynParams_Proto::set_has_f_distcom2frontaxle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_has_f_distcom2frontaxle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_f_distcom2frontaxle() {
  f_distcom2frontaxle_ = 0;
  clear_has_f_distcom2frontaxle();
}
inline float AERO_t_VehicleDynParams_Proto::f_distcom2frontaxle() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.f_DistCoM2FrontAxle)
  return f_distcom2frontaxle_;
}
inline void AERO_t_VehicleDynParams_Proto::set_f_distcom2frontaxle(float value) {
  set_has_f_distcom2frontaxle();
  f_distcom2frontaxle_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.f_DistCoM2FrontAxle)
}

// optional float f_AvgSteeringRatio = 3;
inline bool AERO_t_VehicleDynParams_Proto::has_f_avgsteeringratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_VehicleDynParams_Proto::set_has_f_avgsteeringratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_has_f_avgsteeringratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_f_avgsteeringratio() {
  f_avgsteeringratio_ = 0;
  clear_has_f_avgsteeringratio();
}
inline float AERO_t_VehicleDynParams_Proto::f_avgsteeringratio() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.f_AvgSteeringRatio)
  return f_avgsteeringratio_;
}
inline void AERO_t_VehicleDynParams_Proto::set_f_avgsteeringratio(float value) {
  set_has_f_avgsteeringratio();
  f_avgsteeringratio_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.f_AvgSteeringRatio)
}

// optional float f_MassMomentOfInertia = 4;
inline bool AERO_t_VehicleDynParams_Proto::has_f_massmomentofinertia() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_VehicleDynParams_Proto::set_has_f_massmomentofinertia() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_has_f_massmomentofinertia() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_f_massmomentofinertia() {
  f_massmomentofinertia_ = 0;
  clear_has_f_massmomentofinertia();
}
inline float AERO_t_VehicleDynParams_Proto::f_massmomentofinertia() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.f_MassMomentOfInertia)
  return f_massmomentofinertia_;
}
inline void AERO_t_VehicleDynParams_Proto::set_f_massmomentofinertia(float value) {
  set_has_f_massmomentofinertia();
  f_massmomentofinertia_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.f_MassMomentOfInertia)
}

// optional float f_SlantStiffnessFront = 5;
inline bool AERO_t_VehicleDynParams_Proto::has_f_slantstiffnessfront() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_VehicleDynParams_Proto::set_has_f_slantstiffnessfront() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_has_f_slantstiffnessfront() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_f_slantstiffnessfront() {
  f_slantstiffnessfront_ = 0;
  clear_has_f_slantstiffnessfront();
}
inline float AERO_t_VehicleDynParams_Proto::f_slantstiffnessfront() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.f_SlantStiffnessFront)
  return f_slantstiffnessfront_;
}
inline void AERO_t_VehicleDynParams_Proto::set_f_slantstiffnessfront(float value) {
  set_has_f_slantstiffnessfront();
  f_slantstiffnessfront_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.f_SlantStiffnessFront)
}

// optional float f_SlantStiffnessRear = 6;
inline bool AERO_t_VehicleDynParams_Proto::has_f_slantstiffnessrear() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AERO_t_VehicleDynParams_Proto::set_has_f_slantstiffnessrear() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_has_f_slantstiffnessrear() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_f_slantstiffnessrear() {
  f_slantstiffnessrear_ = 0;
  clear_has_f_slantstiffnessrear();
}
inline float AERO_t_VehicleDynParams_Proto::f_slantstiffnessrear() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.f_SlantStiffnessRear)
  return f_slantstiffnessrear_;
}
inline void AERO_t_VehicleDynParams_Proto::set_f_slantstiffnessrear(float value) {
  set_has_f_slantstiffnessrear();
  f_slantstiffnessrear_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.f_SlantStiffnessRear)
}

// optional float f_DynamicWheelRadius = 7;
inline bool AERO_t_VehicleDynParams_Proto::has_f_dynamicwheelradius() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AERO_t_VehicleDynParams_Proto::set_has_f_dynamicwheelradius() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_has_f_dynamicwheelradius() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AERO_t_VehicleDynParams_Proto::clear_f_dynamicwheelradius() {
  f_dynamicwheelradius_ = 0;
  clear_has_f_dynamicwheelradius();
}
inline float AERO_t_VehicleDynParams_Proto::f_dynamicwheelradius() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.f_DynamicWheelRadius)
  return f_dynamicwheelradius_;
}
inline void AERO_t_VehicleDynParams_Proto::set_f_dynamicwheelradius(float value) {
  set_has_f_dynamicwheelradius();
  f_dynamicwheelradius_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleDynParams_Proto.f_DynamicWheelRadius)
}

// -------------------------------------------------------------------

// AERO_t_VehicleConfig_Proto

// optional .aero_type_protobuf.AERO_t_SignalHeader_Proto SignalHeader = 1;
inline bool AERO_t_VehicleConfig_Proto::has_signalheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_VehicleConfig_Proto::set_has_signalheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_VehicleConfig_Proto::clear_has_signalheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_VehicleConfig_Proto::clear_signalheader() {
  if (signalheader_ != NULL) signalheader_->::aero_type_protobuf::AERO_t_SignalHeader_Proto::Clear();
  clear_has_signalheader();
}
inline const ::aero_type_protobuf::AERO_t_SignalHeader_Proto& AERO_t_VehicleConfig_Proto::signalheader() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleConfig_Proto.SignalHeader)
  return signalheader_ != NULL ? *signalheader_ : *default_instance_->signalheader_;
}
inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* AERO_t_VehicleConfig_Proto::mutable_signalheader() {
  set_has_signalheader();
  if (signalheader_ == NULL) signalheader_ = new ::aero_type_protobuf::AERO_t_SignalHeader_Proto;
  // @@protoc_insertion_point(field_mutable:aero_type_protobuf.AERO_t_VehicleConfig_Proto.SignalHeader)
  return signalheader_;
}
inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* AERO_t_VehicleConfig_Proto::release_signalheader() {
  clear_has_signalheader();
  ::aero_type_protobuf::AERO_t_SignalHeader_Proto* temp = signalheader_;
  signalheader_ = NULL;
  return temp;
}
inline void AERO_t_VehicleConfig_Proto::set_allocated_signalheader(::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader) {
  delete signalheader_;
  signalheader_ = signalheader;
  if (signalheader) {
    set_has_signalheader();
  } else {
    clear_has_signalheader();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_type_protobuf.AERO_t_VehicleConfig_Proto.SignalHeader)
}

// optional string u_LicenseNumber = 2;
inline bool AERO_t_VehicleConfig_Proto::has_u_licensenumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_VehicleConfig_Proto::set_has_u_licensenumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_VehicleConfig_Proto::clear_has_u_licensenumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_VehicleConfig_Proto::clear_u_licensenumber() {
  if (u_licensenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_licensenumber_->clear();
  }
  clear_has_u_licensenumber();
}
inline const ::std::string& AERO_t_VehicleConfig_Proto::u_licensenumber() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleConfig_Proto.u_LicenseNumber)
  return *u_licensenumber_;
}
inline void AERO_t_VehicleConfig_Proto::set_u_licensenumber(const ::std::string& value) {
  set_has_u_licensenumber();
  if (u_licensenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_licensenumber_ = new ::std::string;
  }
  u_licensenumber_->assign(value);
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleConfig_Proto.u_LicenseNumber)
}
inline void AERO_t_VehicleConfig_Proto::set_u_licensenumber(const char* value) {
  set_has_u_licensenumber();
  if (u_licensenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_licensenumber_ = new ::std::string;
  }
  u_licensenumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:aero_type_protobuf.AERO_t_VehicleConfig_Proto.u_LicenseNumber)
}
inline void AERO_t_VehicleConfig_Proto::set_u_licensenumber(const char* value, size_t size) {
  set_has_u_licensenumber();
  if (u_licensenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_licensenumber_ = new ::std::string;
  }
  u_licensenumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aero_type_protobuf.AERO_t_VehicleConfig_Proto.u_LicenseNumber)
}
inline ::std::string* AERO_t_VehicleConfig_Proto::mutable_u_licensenumber() {
  set_has_u_licensenumber();
  if (u_licensenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    u_licensenumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:aero_type_protobuf.AERO_t_VehicleConfig_Proto.u_LicenseNumber)
  return u_licensenumber_;
}
inline ::std::string* AERO_t_VehicleConfig_Proto::release_u_licensenumber() {
  clear_has_u_licensenumber();
  if (u_licensenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = u_licensenumber_;
    u_licensenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AERO_t_VehicleConfig_Proto::set_allocated_u_licensenumber(::std::string* u_licensenumber) {
  if (u_licensenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete u_licensenumber_;
  }
  if (u_licensenumber) {
    set_has_u_licensenumber();
    u_licensenumber_ = u_licensenumber;
  } else {
    clear_has_u_licensenumber();
    u_licensenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:aero_type_protobuf.AERO_t_VehicleConfig_Proto.u_LicenseNumber)
}

// optional float f_TreadWidthFront = 3;
inline bool AERO_t_VehicleConfig_Proto::has_f_treadwidthfront() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_VehicleConfig_Proto::set_has_f_treadwidthfront() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_VehicleConfig_Proto::clear_has_f_treadwidthfront() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_VehicleConfig_Proto::clear_f_treadwidthfront() {
  f_treadwidthfront_ = 0;
  clear_has_f_treadwidthfront();
}
inline float AERO_t_VehicleConfig_Proto::f_treadwidthfront() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_TreadWidthFront)
  return f_treadwidthfront_;
}
inline void AERO_t_VehicleConfig_Proto::set_f_treadwidthfront(float value) {
  set_has_f_treadwidthfront();
  f_treadwidthfront_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_TreadWidthFront)
}

// optional float f_TreadWidthRear = 4;
inline bool AERO_t_VehicleConfig_Proto::has_f_treadwidthrear() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_VehicleConfig_Proto::set_has_f_treadwidthrear() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_VehicleConfig_Proto::clear_has_f_treadwidthrear() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_VehicleConfig_Proto::clear_f_treadwidthrear() {
  f_treadwidthrear_ = 0;
  clear_has_f_treadwidthrear();
}
inline float AERO_t_VehicleConfig_Proto::f_treadwidthrear() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_TreadWidthRear)
  return f_treadwidthrear_;
}
inline void AERO_t_VehicleConfig_Proto::set_f_treadwidthrear(float value) {
  set_has_f_treadwidthrear();
  f_treadwidthrear_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_TreadWidthRear)
}

// optional float f_WheelBase = 5;
inline bool AERO_t_VehicleConfig_Proto::has_f_wheelbase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_VehicleConfig_Proto::set_has_f_wheelbase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_VehicleConfig_Proto::clear_has_f_wheelbase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_VehicleConfig_Proto::clear_f_wheelbase() {
  f_wheelbase_ = 0;
  clear_has_f_wheelbase();
}
inline float AERO_t_VehicleConfig_Proto::f_wheelbase() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_WheelBase)
  return f_wheelbase_;
}
inline void AERO_t_VehicleConfig_Proto::set_f_wheelbase(float value) {
  set_has_f_wheelbase();
  f_wheelbase_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_WheelBase)
}

// optional float f_Mass = 6;
inline bool AERO_t_VehicleConfig_Proto::has_f_mass() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AERO_t_VehicleConfig_Proto::set_has_f_mass() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AERO_t_VehicleConfig_Proto::clear_has_f_mass() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AERO_t_VehicleConfig_Proto::clear_f_mass() {
  f_mass_ = 0;
  clear_has_f_mass();
}
inline float AERO_t_VehicleConfig_Proto::f_mass() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_Mass)
  return f_mass_;
}
inline void AERO_t_VehicleConfig_Proto::set_f_mass(float value) {
  set_has_f_mass();
  f_mass_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_Mass)
}

// optional float f_Length = 7;
inline bool AERO_t_VehicleConfig_Proto::has_f_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AERO_t_VehicleConfig_Proto::set_has_f_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AERO_t_VehicleConfig_Proto::clear_has_f_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AERO_t_VehicleConfig_Proto::clear_f_length() {
  f_length_ = 0;
  clear_has_f_length();
}
inline float AERO_t_VehicleConfig_Proto::f_length() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_Length)
  return f_length_;
}
inline void AERO_t_VehicleConfig_Proto::set_f_length(float value) {
  set_has_f_length();
  f_length_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_Length)
}

// optional float f_Width = 8;
inline bool AERO_t_VehicleConfig_Proto::has_f_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AERO_t_VehicleConfig_Proto::set_has_f_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AERO_t_VehicleConfig_Proto::clear_has_f_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AERO_t_VehicleConfig_Proto::clear_f_width() {
  f_width_ = 0;
  clear_has_f_width();
}
inline float AERO_t_VehicleConfig_Proto::f_width() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_Width)
  return f_width_;
}
inline void AERO_t_VehicleConfig_Proto::set_f_width(float value) {
  set_has_f_width();
  f_width_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_Width)
}

// optional float f_TotalWidth = 9;
inline bool AERO_t_VehicleConfig_Proto::has_f_totalwidth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AERO_t_VehicleConfig_Proto::set_has_f_totalwidth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AERO_t_VehicleConfig_Proto::clear_has_f_totalwidth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AERO_t_VehicleConfig_Proto::clear_f_totalwidth() {
  f_totalwidth_ = 0;
  clear_has_f_totalwidth();
}
inline float AERO_t_VehicleConfig_Proto::f_totalwidth() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_TotalWidth)
  return f_totalwidth_;
}
inline void AERO_t_VehicleConfig_Proto::set_f_totalwidth(float value) {
  set_has_f_totalwidth();
  f_totalwidth_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_TotalWidth)
}

// optional float f_DistFrontAxle2Front = 10;
inline bool AERO_t_VehicleConfig_Proto::has_f_distfrontaxle2front() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AERO_t_VehicleConfig_Proto::set_has_f_distfrontaxle2front() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AERO_t_VehicleConfig_Proto::clear_has_f_distfrontaxle2front() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AERO_t_VehicleConfig_Proto::clear_f_distfrontaxle2front() {
  f_distfrontaxle2front_ = 0;
  clear_has_f_distfrontaxle2front();
}
inline float AERO_t_VehicleConfig_Proto::f_distfrontaxle2front() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_DistFrontAxle2Front)
  return f_distfrontaxle2front_;
}
inline void AERO_t_VehicleConfig_Proto::set_f_distfrontaxle2front(float value) {
  set_has_f_distfrontaxle2front();
  f_distfrontaxle2front_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_VehicleConfig_Proto.f_DistFrontAxle2Front)
}

// optional .aero_type_protobuf.AERO_t_VehicleDynParams_Proto DynamicParams = 11;
inline bool AERO_t_VehicleConfig_Proto::has_dynamicparams() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AERO_t_VehicleConfig_Proto::set_has_dynamicparams() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AERO_t_VehicleConfig_Proto::clear_has_dynamicparams() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AERO_t_VehicleConfig_Proto::clear_dynamicparams() {
  if (dynamicparams_ != NULL) dynamicparams_->::aero_type_protobuf::AERO_t_VehicleDynParams_Proto::Clear();
  clear_has_dynamicparams();
}
inline const ::aero_type_protobuf::AERO_t_VehicleDynParams_Proto& AERO_t_VehicleConfig_Proto::dynamicparams() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleConfig_Proto.DynamicParams)
  return dynamicparams_ != NULL ? *dynamicparams_ : *default_instance_->dynamicparams_;
}
inline ::aero_type_protobuf::AERO_t_VehicleDynParams_Proto* AERO_t_VehicleConfig_Proto::mutable_dynamicparams() {
  set_has_dynamicparams();
  if (dynamicparams_ == NULL) dynamicparams_ = new ::aero_type_protobuf::AERO_t_VehicleDynParams_Proto;
  // @@protoc_insertion_point(field_mutable:aero_type_protobuf.AERO_t_VehicleConfig_Proto.DynamicParams)
  return dynamicparams_;
}
inline ::aero_type_protobuf::AERO_t_VehicleDynParams_Proto* AERO_t_VehicleConfig_Proto::release_dynamicparams() {
  clear_has_dynamicparams();
  ::aero_type_protobuf::AERO_t_VehicleDynParams_Proto* temp = dynamicparams_;
  dynamicparams_ = NULL;
  return temp;
}
inline void AERO_t_VehicleConfig_Proto::set_allocated_dynamicparams(::aero_type_protobuf::AERO_t_VehicleDynParams_Proto* dynamicparams) {
  delete dynamicparams_;
  dynamicparams_ = dynamicparams;
  if (dynamicparams) {
    set_has_dynamicparams();
  } else {
    clear_has_dynamicparams();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_type_protobuf.AERO_t_VehicleConfig_Proto.DynamicParams)
}

// repeated .aero_type_protobuf.AERO_t_SensorPose_Proto SensorPoses = 12;
inline int AERO_t_VehicleConfig_Proto::sensorposes_size() const {
  return sensorposes_.size();
}
inline void AERO_t_VehicleConfig_Proto::clear_sensorposes() {
  sensorposes_.Clear();
}
inline const ::aero_type_protobuf::AERO_t_SensorPose_Proto& AERO_t_VehicleConfig_Proto::sensorposes(int index) const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_VehicleConfig_Proto.SensorPoses)
  return sensorposes_.Get(index);
}
inline ::aero_type_protobuf::AERO_t_SensorPose_Proto* AERO_t_VehicleConfig_Proto::mutable_sensorposes(int index) {
  // @@protoc_insertion_point(field_mutable:aero_type_protobuf.AERO_t_VehicleConfig_Proto.SensorPoses)
  return sensorposes_.Mutable(index);
}
inline ::aero_type_protobuf::AERO_t_SensorPose_Proto* AERO_t_VehicleConfig_Proto::add_sensorposes() {
  // @@protoc_insertion_point(field_add:aero_type_protobuf.AERO_t_VehicleConfig_Proto.SensorPoses)
  return sensorposes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_SensorPose_Proto >&
AERO_t_VehicleConfig_Proto::sensorposes() const {
  // @@protoc_insertion_point(field_list:aero_type_protobuf.AERO_t_VehicleConfig_Proto.SensorPoses)
  return sensorposes_;
}
inline ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_SensorPose_Proto >*
AERO_t_VehicleConfig_Proto::mutable_sensorposes() {
  // @@protoc_insertion_point(field_mutable_list:aero_type_protobuf.AERO_t_VehicleConfig_Proto.SensorPoses)
  return &sensorposes_;
}

// -------------------------------------------------------------------

// AERO_t_booleanStatus_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1;
inline bool AERO_t_booleanStatus_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_booleanStatus_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_booleanStatus_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_booleanStatus_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 0;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_booleanStatus_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_booleanStatus_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_booleanStatus_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_booleanStatus_Proto.e_SignalStatus)
}

// optional bool b_Value = 2;
inline bool AERO_t_booleanStatus_Proto::has_b_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_booleanStatus_Proto::set_has_b_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_booleanStatus_Proto::clear_has_b_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_booleanStatus_Proto::clear_b_value() {
  b_value_ = false;
  clear_has_b_value();
}
inline bool AERO_t_booleanStatus_Proto::b_value() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_booleanStatus_Proto.b_Value)
  return b_value_;
}
inline void AERO_t_booleanStatus_Proto::set_b_value(bool value) {
  set_has_b_value();
  b_value_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_booleanStatus_Proto.b_Value)
}

// -------------------------------------------------------------------

// AERO_t_uint16Status_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1;
inline bool AERO_t_uint16Status_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_uint16Status_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_uint16Status_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_uint16Status_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 0;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_uint16Status_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_uint16Status_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_uint16Status_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_uint16Status_Proto.e_SignalStatus)
}

// optional uint32 u_Value = 2;
inline bool AERO_t_uint16Status_Proto::has_u_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_uint16Status_Proto::set_has_u_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_uint16Status_Proto::clear_has_u_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_uint16Status_Proto::clear_u_value() {
  u_value_ = 0u;
  clear_has_u_value();
}
inline ::google::protobuf::uint32 AERO_t_uint16Status_Proto::u_value() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_uint16Status_Proto.u_Value)
  return u_value_;
}
inline void AERO_t_uint16Status_Proto::set_u_value(::google::protobuf::uint32 value) {
  set_has_u_value();
  u_value_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_uint16Status_Proto.u_Value)
}

// -------------------------------------------------------------------

// AERO_t_SensorStatus_Proto

// optional .aero_type_protobuf.AERO_t_SignalStatus_Proto e_SignalStatus = 1 [default = AERO_SIGNAL_STATUS_INVALID_PROTO];
inline bool AERO_t_SensorStatus_Proto::has_e_signalstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_SensorStatus_Proto::set_has_e_signalstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_SensorStatus_Proto::clear_has_e_signalstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_SensorStatus_Proto::clear_e_signalstatus() {
  e_signalstatus_ = 2;
  clear_has_e_signalstatus();
}
inline ::aero_type_protobuf::AERO_t_SignalStatus_Proto AERO_t_SensorStatus_Proto::e_signalstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_SensorStatus_Proto.e_SignalStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SignalStatus_Proto >(e_signalstatus_);
}
inline void AERO_t_SensorStatus_Proto::set_e_signalstatus(::aero_type_protobuf::AERO_t_SignalStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SignalStatus_Proto_IsValid(value));
  set_has_e_signalstatus();
  e_signalstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_SensorStatus_Proto.e_SignalStatus)
}

// optional .aero_type_protobuf.AERO_t_SensorOperationStatus_Proto e_OperationStatus = 2;
inline bool AERO_t_SensorStatus_Proto::has_e_operationstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_SensorStatus_Proto::set_has_e_operationstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_SensorStatus_Proto::clear_has_e_operationstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_SensorStatus_Proto::clear_e_operationstatus() {
  e_operationstatus_ = 0;
  clear_has_e_operationstatus();
}
inline ::aero_type_protobuf::AERO_t_SensorOperationStatus_Proto AERO_t_SensorStatus_Proto::e_operationstatus() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_SensorStatus_Proto.e_OperationStatus)
  return static_cast< ::aero_type_protobuf::AERO_t_SensorOperationStatus_Proto >(e_operationstatus_);
}
inline void AERO_t_SensorStatus_Proto::set_e_operationstatus(::aero_type_protobuf::AERO_t_SensorOperationStatus_Proto value) {
  assert(::aero_type_protobuf::AERO_t_SensorOperationStatus_Proto_IsValid(value));
  set_has_e_operationstatus();
  e_operationstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_SensorStatus_Proto.e_OperationStatus)
}

// optional uint32 u_DisturbanceState = 3;
inline bool AERO_t_SensorStatus_Proto::has_u_disturbancestate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_SensorStatus_Proto::set_has_u_disturbancestate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_SensorStatus_Proto::clear_has_u_disturbancestate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_SensorStatus_Proto::clear_u_disturbancestate() {
  u_disturbancestate_ = 0u;
  clear_has_u_disturbancestate();
}
inline ::google::protobuf::uint32 AERO_t_SensorStatus_Proto::u_disturbancestate() const {
  // @@protoc_insertion_point(field_get:aero_type_protobuf.AERO_t_SensorStatus_Proto.u_DisturbanceState)
  return u_disturbancestate_;
}
inline void AERO_t_SensorStatus_Proto::set_u_disturbancestate(::google::protobuf::uint32 value) {
  set_has_u_disturbancestate();
  u_disturbancestate_ = value;
  // @@protoc_insertion_point(field_set:aero_type_protobuf.AERO_t_SensorStatus_Proto.u_DisturbanceState)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace aero_type_protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aero_type_protobuf::AERO_t_SignalStatus_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_type_protobuf::AERO_t_SignalStatus_Proto>() {
  return ::aero_type_protobuf::AERO_t_SignalStatus_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_type_protobuf::AERO_t_TriState_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_type_protobuf::AERO_t_TriState_Proto>() {
  return ::aero_type_protobuf::AERO_t_TriState_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_type_protobuf::AERO_t_SensorDescriptor_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_type_protobuf::AERO_t_SensorDescriptor_Proto>() {
  return ::aero_type_protobuf::AERO_t_SensorDescriptor_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_type_protobuf::AERO_t_SensorMake_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_type_protobuf::AERO_t_SensorMake_Proto>() {
  return ::aero_type_protobuf::AERO_t_SensorMake_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_type_protobuf::AERO_t_SensorFeature_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_type_protobuf::AERO_t_SensorFeature_Proto>() {
  return ::aero_type_protobuf::AERO_t_SensorFeature_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_type_protobuf::AERO_t_PolyChainFreeSide_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_type_protobuf::AERO_t_PolyChainFreeSide_Proto>() {
  return ::aero_type_protobuf::AERO_t_PolyChainFreeSide_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_type_protobuf::AERO_t_SensorOperationStatus_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_type_protobuf::AERO_t_SensorOperationStatus_Proto>() {
  return ::aero_type_protobuf::AERO_t_SensorOperationStatus_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_type_protobuf::AERO_t_SensorDisturbanceState_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_type_protobuf::AERO_t_SensorDisturbanceState_Proto>() {
  return ::aero_type_protobuf::AERO_t_SensorDisturbanceState_Proto_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_aero_5ftype_2eproto__INCLUDED

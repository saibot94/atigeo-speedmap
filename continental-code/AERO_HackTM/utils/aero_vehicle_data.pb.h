// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aero_vehicle_data.proto

#ifndef PROTOBUF_aero_5fvehicle_5fdata_2eproto__INCLUDED
#define PROTOBUF_aero_5fvehicle_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "aero_type.pb.h"
// @@protoc_insertion_point(includes)

namespace aero_vehicle_data_protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_aero_5fvehicle_5fdata_2eproto();
void protobuf_AssignDesc_aero_5fvehicle_5fdata_2eproto();
void protobuf_ShutdownFile_aero_5fvehicle_5fdata_2eproto();

class AERO_t_VehicleDynamics_Proto;
class AERO_t_PowerTrain_Proto;
class AERO_t_Brake_Proto;
class AERO_t_WheelTicks_Proto;
class AERO_t_CS_Status_Proto;
class AERO_t_CS_Signal_Proto;
class AERO_t_CarSwitches_Proto;
class AERO_t_VehiclePose_Proto;

enum AERO_t_PT_Gear_Proto {
  AERO_VD_GEAR_N_PROTO = 0,
  AERO_VD_GEAR_R_PROTO = 1,
  AERO_VD_GEAR_P_PROTO = 2,
  AERO_VD_GEAR_D_PROTO = 3,
  AERO_VD_GEAR_D1_PROTO = 4,
  AERO_VD_GEAR_D2_PROTO = 5,
  AERO_VD_GEAR_D3_PROTO = 6,
  AERO_VD_GEAR_D4_PROTO = 7,
  AERO_VD_GEAR_D5_PROTO = 8,
  AERO_VD_GEAR_D6_PROTO = 9,
  AERO_VD_GEAR_D7_PROTO = 10,
  AERO_VD_GEAR_SNA_PROTO = 11,
  AERO_VD_GEAR_UNDEF_PROTO = 12
};
bool AERO_t_PT_Gear_Proto_IsValid(int value);
const AERO_t_PT_Gear_Proto AERO_t_PT_Gear_Proto_MIN = AERO_VD_GEAR_N_PROTO;
const AERO_t_PT_Gear_Proto AERO_t_PT_Gear_Proto_MAX = AERO_VD_GEAR_UNDEF_PROTO;
const int AERO_t_PT_Gear_Proto_ARRAYSIZE = AERO_t_PT_Gear_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_PT_Gear_Proto_descriptor();
inline const ::std::string& AERO_t_PT_Gear_Proto_Name(AERO_t_PT_Gear_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_PT_Gear_Proto_descriptor(), value);
}
inline bool AERO_t_PT_Gear_Proto_Parse(
    const ::std::string& name, AERO_t_PT_Gear_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_PT_Gear_Proto>(
    AERO_t_PT_Gear_Proto_descriptor(), name, value);
}
enum AERO_t_ABSECS_State_Proto {
  AERO_BR_ABSESC_OFF_PROTO = 0,
  AERO_BR_ABSESC_STANDBY_PROTO = 1,
  AERO_BR_ABSESC_ACTIVE_PROTO = 2
};
bool AERO_t_ABSECS_State_Proto_IsValid(int value);
const AERO_t_ABSECS_State_Proto AERO_t_ABSECS_State_Proto_MIN = AERO_BR_ABSESC_OFF_PROTO;
const AERO_t_ABSECS_State_Proto AERO_t_ABSECS_State_Proto_MAX = AERO_BR_ABSESC_ACTIVE_PROTO;
const int AERO_t_ABSECS_State_Proto_ARRAYSIZE = AERO_t_ABSECS_State_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_ABSECS_State_Proto_descriptor();
inline const ::std::string& AERO_t_ABSECS_State_Proto_Name(AERO_t_ABSECS_State_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_ABSECS_State_Proto_descriptor(), value);
}
inline bool AERO_t_ABSECS_State_Proto_Parse(
    const ::std::string& name, AERO_t_ABSECS_State_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_ABSECS_State_Proto>(
    AERO_t_ABSECS_State_Proto_descriptor(), name, value);
}
enum AERO_t_CS_Wiper_Proto {
  AERO_CS_WI_OFF_PROTO = 0,
  AERO_CS_WI_WISCHWASCH_PROTO = 1,
  AERO_CS_WI_SLOW_PROTO = 2,
  AERO_CS_WI_FAST_PROTO = 3,
  AERO_CS_WI_AUTO_WISCHWASCH_PROTO = 4,
  AERO_CS_WI_AUTO_SLOW_PROTO = 5,
  AERO_CS_WI_AUTO_FAST_PROTO = 6
};
bool AERO_t_CS_Wiper_Proto_IsValid(int value);
const AERO_t_CS_Wiper_Proto AERO_t_CS_Wiper_Proto_MIN = AERO_CS_WI_OFF_PROTO;
const AERO_t_CS_Wiper_Proto AERO_t_CS_Wiper_Proto_MAX = AERO_CS_WI_AUTO_FAST_PROTO;
const int AERO_t_CS_Wiper_Proto_ARRAYSIZE = AERO_t_CS_Wiper_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_CS_Wiper_Proto_descriptor();
inline const ::std::string& AERO_t_CS_Wiper_Proto_Name(AERO_t_CS_Wiper_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_CS_Wiper_Proto_descriptor(), value);
}
inline bool AERO_t_CS_Wiper_Proto_Parse(
    const ::std::string& name, AERO_t_CS_Wiper_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_CS_Wiper_Proto>(
    AERO_t_CS_Wiper_Proto_descriptor(), name, value);
}
enum AERO_t_CS_Blinker_Proto {
  AERO_CS_BL_OFF_PROTO = 0,
  AERO_CS_BL_RIGHT_PROTO = 1,
  AERO_CS_BL_LEFT_PROTO = 2,
  AERO_CS_BL_WARN_PROTO = 3
};
bool AERO_t_CS_Blinker_Proto_IsValid(int value);
const AERO_t_CS_Blinker_Proto AERO_t_CS_Blinker_Proto_MIN = AERO_CS_BL_OFF_PROTO;
const AERO_t_CS_Blinker_Proto AERO_t_CS_Blinker_Proto_MAX = AERO_CS_BL_WARN_PROTO;
const int AERO_t_CS_Blinker_Proto_ARRAYSIZE = AERO_t_CS_Blinker_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_CS_Blinker_Proto_descriptor();
inline const ::std::string& AERO_t_CS_Blinker_Proto_Name(AERO_t_CS_Blinker_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_CS_Blinker_Proto_descriptor(), value);
}
inline bool AERO_t_CS_Blinker_Proto_Parse(
    const ::std::string& name, AERO_t_CS_Blinker_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_CS_Blinker_Proto>(
    AERO_t_CS_Blinker_Proto_descriptor(), name, value);
}
enum AERO_t_CS_Lamps_Proto {
  AERO_CS_LAMP_OFF_PROTO = 0,
  AERO_CS_LAMP_LOWBEAM_PROTO = 1,
  AERO_CS_LAMP_HIGHBEAM_PROTO = 2,
  AERO_CS_LAMP_FOG_FRONT_PROTO = 4,
  AERO_CS_LAMP_FOG_REAR_PROTO = 8,
  AERO_CS_LAMP_DAYLIGHT_PROTO = 16,
  AERO_CS_LAMP_PARKING_PROTO = 32,
  AERO_CS_LAMP_BRAKE_PROTO = 64
};
bool AERO_t_CS_Lamps_Proto_IsValid(int value);
const AERO_t_CS_Lamps_Proto AERO_t_CS_Lamps_Proto_MIN = AERO_CS_LAMP_OFF_PROTO;
const AERO_t_CS_Lamps_Proto AERO_t_CS_Lamps_Proto_MAX = AERO_CS_LAMP_BRAKE_PROTO;
const int AERO_t_CS_Lamps_Proto_ARRAYSIZE = AERO_t_CS_Lamps_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_CS_Lamps_Proto_descriptor();
inline const ::std::string& AERO_t_CS_Lamps_Proto_Name(AERO_t_CS_Lamps_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_CS_Lamps_Proto_descriptor(), value);
}
inline bool AERO_t_CS_Lamps_Proto_Parse(
    const ::std::string& name, AERO_t_CS_Lamps_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_CS_Lamps_Proto>(
    AERO_t_CS_Lamps_Proto_descriptor(), name, value);
}
enum AERO_t_CS_Doors_Proto {
  AERO_CS_DOOR_FRONT_DRIVER_PROTO = 1,
  AERO_CS_DOOR_FRONT_PASS_PROTO = 2,
  AERO_CS_DOOR_REAR_DRIVER_PROTO = 4,
  AERO_CS_DOOR_REAR_PASS_PROTO = 8,
  AERO_CS_DOOR_REAR_TRUNK_PROTO = 16,
  AERO_CS_DOOR_FRONT_HOOD_PROTO = 32,
  AERO_CS_DOOR_OPENER_LEFT_PROTO = 64,
  AERO_CS_DOOR_OPENER_RIGHT_PROTO = 128,
  AERO_CS_DOOR_CAP_SENS_FR_PROTO = 256,
  AERO_CS_DOOR_CAP_SENS_RR_PROTO = 512,
  AERO_CS_DOOR_CAP_SENS_RL_PROTO = 1024,
  AERO_CS_DOOR_CAP_SENS_FL_PROTO = 2048
};
bool AERO_t_CS_Doors_Proto_IsValid(int value);
const AERO_t_CS_Doors_Proto AERO_t_CS_Doors_Proto_MIN = AERO_CS_DOOR_FRONT_DRIVER_PROTO;
const AERO_t_CS_Doors_Proto AERO_t_CS_Doors_Proto_MAX = AERO_CS_DOOR_CAP_SENS_FL_PROTO;
const int AERO_t_CS_Doors_Proto_ARRAYSIZE = AERO_t_CS_Doors_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_CS_Doors_Proto_descriptor();
inline const ::std::string& AERO_t_CS_Doors_Proto_Name(AERO_t_CS_Doors_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_CS_Doors_Proto_descriptor(), value);
}
inline bool AERO_t_CS_Doors_Proto_Parse(
    const ::std::string& name, AERO_t_CS_Doors_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_CS_Doors_Proto>(
    AERO_t_CS_Doors_Proto_descriptor(), name, value);
}
enum AERO_t_CS_CruiseControl_Proto {
  AERO_CS_ACC_RESUME_PRESSED_PROTO = 1,
  AERO_CS_ACC_IS_ACTIVE_PROTO = 2,
  AERO_CS_ACC_DRV_OVERRIDE_PROTO = 4,
  AERO_CS_ACC_INCREASE_PRESSED_PROTO = 8,
  AERO_CS_ACC_DECREASE_PRESSED_PROTO = 16
};
bool AERO_t_CS_CruiseControl_Proto_IsValid(int value);
const AERO_t_CS_CruiseControl_Proto AERO_t_CS_CruiseControl_Proto_MIN = AERO_CS_ACC_RESUME_PRESSED_PROTO;
const AERO_t_CS_CruiseControl_Proto AERO_t_CS_CruiseControl_Proto_MAX = AERO_CS_ACC_DECREASE_PRESSED_PROTO;
const int AERO_t_CS_CruiseControl_Proto_ARRAYSIZE = AERO_t_CS_CruiseControl_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_CS_CruiseControl_Proto_descriptor();
inline const ::std::string& AERO_t_CS_CruiseControl_Proto_Name(AERO_t_CS_CruiseControl_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_CS_CruiseControl_Proto_descriptor(), value);
}
inline bool AERO_t_CS_CruiseControl_Proto_Parse(
    const ::std::string& name, AERO_t_CS_CruiseControl_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_CS_CruiseControl_Proto>(
    AERO_t_CS_CruiseControl_Proto_descriptor(), name, value);
}
enum AERO_t_CS_ParkBarke_Proto {
  AERO_CS_PARK_UNKNOWN_PROTO = 0,
  AERO_CS_PARK_OPEN_PROTO = 1,
  AERO_CS_PARK_ENAGED_PROTO = 2
};
bool AERO_t_CS_ParkBarke_Proto_IsValid(int value);
const AERO_t_CS_ParkBarke_Proto AERO_t_CS_ParkBarke_Proto_MIN = AERO_CS_PARK_UNKNOWN_PROTO;
const AERO_t_CS_ParkBarke_Proto AERO_t_CS_ParkBarke_Proto_MAX = AERO_CS_PARK_ENAGED_PROTO;
const int AERO_t_CS_ParkBarke_Proto_ARRAYSIZE = AERO_t_CS_ParkBarke_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_CS_ParkBarke_Proto_descriptor();
inline const ::std::string& AERO_t_CS_ParkBarke_Proto_Name(AERO_t_CS_ParkBarke_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_CS_ParkBarke_Proto_descriptor(), value);
}
inline bool AERO_t_CS_ParkBarke_Proto_Parse(
    const ::std::string& name, AERO_t_CS_ParkBarke_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_CS_ParkBarke_Proto>(
    AERO_t_CS_ParkBarke_Proto_descriptor(), name, value);
}
enum AERO_t_CS_GearLever_Proto {
  AERO_CS_GL_UNKNOWN_PROTO = 0,
  AERO_CS_GL_P_PROTO = 1,
  AERO_CS_GL_R_PROTO = 2,
  AERO_CS_GL_N_PROTO = 3,
  AERO_CS_GL_D_PROTO = 4,
  AERO_CS_GL_MANUAL_PROTO = 5
};
bool AERO_t_CS_GearLever_Proto_IsValid(int value);
const AERO_t_CS_GearLever_Proto AERO_t_CS_GearLever_Proto_MIN = AERO_CS_GL_UNKNOWN_PROTO;
const AERO_t_CS_GearLever_Proto AERO_t_CS_GearLever_Proto_MAX = AERO_CS_GL_MANUAL_PROTO;
const int AERO_t_CS_GearLever_Proto_ARRAYSIZE = AERO_t_CS_GearLever_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_CS_GearLever_Proto_descriptor();
inline const ::std::string& AERO_t_CS_GearLever_Proto_Name(AERO_t_CS_GearLever_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_CS_GearLever_Proto_descriptor(), value);
}
inline bool AERO_t_CS_GearLever_Proto_Parse(
    const ::std::string& name, AERO_t_CS_GearLever_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_CS_GearLever_Proto>(
    AERO_t_CS_GearLever_Proto_descriptor(), name, value);
}
enum AERO_t_CS_ActuatorStatus_Proto {
  AERO_CS_ACT_STAT_UNKNOWN_PROTO = 0,
  AERO_CS_ACT_STAT_CONTROLABLE_PROTO = 1,
  AERO_CS_ACT_STAT_NOT_CONTROLABLE_PROTO = 2
};
bool AERO_t_CS_ActuatorStatus_Proto_IsValid(int value);
const AERO_t_CS_ActuatorStatus_Proto AERO_t_CS_ActuatorStatus_Proto_MIN = AERO_CS_ACT_STAT_UNKNOWN_PROTO;
const AERO_t_CS_ActuatorStatus_Proto AERO_t_CS_ActuatorStatus_Proto_MAX = AERO_CS_ACT_STAT_NOT_CONTROLABLE_PROTO;
const int AERO_t_CS_ActuatorStatus_Proto_ARRAYSIZE = AERO_t_CS_ActuatorStatus_Proto_MAX + 1;

const ::google::protobuf::EnumDescriptor* AERO_t_CS_ActuatorStatus_Proto_descriptor();
inline const ::std::string& AERO_t_CS_ActuatorStatus_Proto_Name(AERO_t_CS_ActuatorStatus_Proto value) {
  return ::google::protobuf::internal::NameOfEnum(
    AERO_t_CS_ActuatorStatus_Proto_descriptor(), value);
}
inline bool AERO_t_CS_ActuatorStatus_Proto_Parse(
    const ::std::string& name, AERO_t_CS_ActuatorStatus_Proto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AERO_t_CS_ActuatorStatus_Proto>(
    AERO_t_CS_ActuatorStatus_Proto_descriptor(), name, value);
}
// ===================================================================

class AERO_t_VehicleDynamics_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_VehicleDynamics_Proto();
  virtual ~AERO_t_VehicleDynamics_Proto();

  AERO_t_VehicleDynamics_Proto(const AERO_t_VehicleDynamics_Proto& from);

  inline AERO_t_VehicleDynamics_Proto& operator=(const AERO_t_VehicleDynamics_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_VehicleDynamics_Proto& default_instance();

  void Swap(AERO_t_VehicleDynamics_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_VehicleDynamics_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_VehicleDynamics_Proto& from);
  void MergeFrom(const AERO_t_VehicleDynamics_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalHeader_Proto SignalHeader = 1;
  inline bool has_signalheader() const;
  inline void clear_signalheader();
  static const int kSignalHeaderFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_SignalHeader_Proto& signalheader() const;
  inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* mutable_signalheader();
  inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* release_signalheader();
  inline void set_allocated_signalheader(::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto Speed = 2;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 2;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& speed() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_speed();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_speed();
  inline void set_allocated_speed(::aero_type_protobuf::AERO_t_float32Status_Proto* speed);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto SpeedDisplayed = 3;
  inline bool has_speeddisplayed() const;
  inline void clear_speeddisplayed();
  static const int kSpeedDisplayedFieldNumber = 3;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& speeddisplayed() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_speeddisplayed();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_speeddisplayed();
  inline void set_allocated_speeddisplayed(::aero_type_protobuf::AERO_t_float32Status_Proto* speeddisplayed);

  // repeated .aero_type_protobuf.AERO_t_float32Status_Proto RotSpeedPerWheel = 4;
  inline int rotspeedperwheel_size() const;
  inline void clear_rotspeedperwheel();
  static const int kRotSpeedPerWheelFieldNumber = 4;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& rotspeedperwheel(int index) const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_rotspeedperwheel(int index);
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* add_rotspeedperwheel();
  inline const ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_float32Status_Proto >&
      rotspeedperwheel() const;
  inline ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_float32Status_Proto >*
      mutable_rotspeedperwheel();

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto LongAcc = 5;
  inline bool has_longacc() const;
  inline void clear_longacc();
  static const int kLongAccFieldNumber = 5;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& longacc() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_longacc();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_longacc();
  inline void set_allocated_longacc(::aero_type_protobuf::AERO_t_float32Status_Proto* longacc);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto LatAcc = 6;
  inline bool has_latacc() const;
  inline void clear_latacc();
  static const int kLatAccFieldNumber = 6;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& latacc() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_latacc();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_latacc();
  inline void set_allocated_latacc(::aero_type_protobuf::AERO_t_float32Status_Proto* latacc);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto Yawrate = 7;
  inline bool has_yawrate() const;
  inline void clear_yawrate();
  static const int kYawrateFieldNumber = 7;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& yawrate() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_yawrate();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_yawrate();
  inline void set_allocated_yawrate(::aero_type_protobuf::AERO_t_float32Status_Proto* yawrate);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto SteeringWheelAngle = 8;
  inline bool has_steeringwheelangle() const;
  inline void clear_steeringwheelangle();
  static const int kSteeringWheelAngleFieldNumber = 8;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& steeringwheelangle() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_steeringwheelangle();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_steeringwheelangle();
  inline void set_allocated_steeringwheelangle(::aero_type_protobuf::AERO_t_float32Status_Proto* steeringwheelangle);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto SteeringWheelAngleSpeed = 9;
  inline bool has_steeringwheelanglespeed() const;
  inline void clear_steeringwheelanglespeed();
  static const int kSteeringWheelAngleSpeedFieldNumber = 9;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& steeringwheelanglespeed() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_steeringwheelanglespeed();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_steeringwheelanglespeed();
  inline void set_allocated_steeringwheelanglespeed(::aero_type_protobuf::AERO_t_float32Status_Proto* steeringwheelanglespeed);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto DrvSteerTorque = 10;
  inline bool has_drvsteertorque() const;
  inline void clear_drvsteertorque();
  static const int kDrvSteerTorqueFieldNumber = 10;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& drvsteertorque() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_drvsteertorque();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_drvsteertorque();
  inline void set_allocated_drvsteertorque(::aero_type_protobuf::AERO_t_float32Status_Proto* drvsteertorque);

  // optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto TimeSinceLastTick = 11;
  inline bool has_timesincelasttick() const;
  inline void clear_timesincelasttick();
  static const int kTimeSinceLastTickFieldNumber = 11;
  inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& timesincelasttick() const;
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* mutable_timesincelasttick();
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* release_timesincelasttick();
  inline void set_allocated_timesincelasttick(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timesincelasttick);

  // @@protoc_insertion_point(class_scope:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto)
 private:
  inline void set_has_signalheader();
  inline void clear_has_signalheader();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_speeddisplayed();
  inline void clear_has_speeddisplayed();
  inline void set_has_longacc();
  inline void clear_has_longacc();
  inline void set_has_latacc();
  inline void clear_has_latacc();
  inline void set_has_yawrate();
  inline void clear_has_yawrate();
  inline void set_has_steeringwheelangle();
  inline void clear_has_steeringwheelangle();
  inline void set_has_steeringwheelanglespeed();
  inline void clear_has_steeringwheelanglespeed();
  inline void set_has_drvsteertorque();
  inline void clear_has_drvsteertorque();
  inline void set_has_timesincelasttick();
  inline void clear_has_timesincelasttick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* speed_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* speeddisplayed_;
  ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_float32Status_Proto > rotspeedperwheel_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* longacc_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* latacc_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* yawrate_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* steeringwheelangle_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* steeringwheelanglespeed_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* drvsteertorque_;
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timesincelasttick_;
  friend void  protobuf_AddDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_AssignDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_ShutdownFile_aero_5fvehicle_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_VehicleDynamics_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_PowerTrain_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_PowerTrain_Proto();
  virtual ~AERO_t_PowerTrain_Proto();

  AERO_t_PowerTrain_Proto(const AERO_t_PowerTrain_Proto& from);

  inline AERO_t_PowerTrain_Proto& operator=(const AERO_t_PowerTrain_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_PowerTrain_Proto& default_instance();

  void Swap(AERO_t_PowerTrain_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_PowerTrain_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_PowerTrain_Proto& from);
  void MergeFrom(const AERO_t_PowerTrain_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto Timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& timestamp() const;
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* mutable_timestamp();
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* release_timestamp();
  inline void set_allocated_timestamp(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timestamp);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto EngineSpeed = 2;
  inline bool has_enginespeed() const;
  inline void clear_enginespeed();
  static const int kEngineSpeedFieldNumber = 2;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& enginespeed() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_enginespeed();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_enginespeed();
  inline void set_allocated_enginespeed(::aero_type_protobuf::AERO_t_float32Status_Proto* enginespeed);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto EngineTorque = 3;
  inline bool has_enginetorque() const;
  inline void clear_enginetorque();
  static const int kEngineTorqueFieldNumber = 3;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& enginetorque() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_enginetorque();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_enginetorque();
  inline void set_allocated_enginetorque(::aero_type_protobuf::AERO_t_float32Status_Proto* enginetorque);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto GasPedalPos = 4;
  inline bool has_gaspedalpos() const;
  inline void clear_gaspedalpos();
  static const int kGasPedalPosFieldNumber = 4;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& gaspedalpos() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_gaspedalpos();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_gaspedalpos();
  inline void set_allocated_gaspedalpos(::aero_type_protobuf::AERO_t_float32Status_Proto* gaspedalpos);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto GasPedalPosGrad = 5;
  inline bool has_gaspedalposgrad() const;
  inline void clear_gaspedalposgrad();
  static const int kGasPedalPosGradFieldNumber = 5;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& gaspedalposgrad() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_gaspedalposgrad();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_gaspedalposgrad();
  inline void set_allocated_gaspedalposgrad(::aero_type_protobuf::AERO_t_float32Status_Proto* gaspedalposgrad);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto FuelConsumption = 6;
  inline bool has_fuelconsumption() const;
  inline void clear_fuelconsumption();
  static const int kFuelConsumptionFieldNumber = 6;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& fuelconsumption() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_fuelconsumption();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_fuelconsumption();
  inline void set_allocated_fuelconsumption(::aero_type_protobuf::AERO_t_float32Status_Proto* fuelconsumption);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto GasPedalPosDriver = 7;
  inline bool has_gaspedalposdriver() const;
  inline void clear_gaspedalposdriver();
  static const int kGasPedalPosDriverFieldNumber = 7;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& gaspedalposdriver() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_gaspedalposdriver();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_gaspedalposdriver();
  inline void set_allocated_gaspedalposdriver(::aero_type_protobuf::AERO_t_float32Status_Proto* gaspedalposdriver);

  // optional .aero_vehicle_data_protobuf.AERO_t_PT_Gear_Proto e_Gear = 8;
  inline bool has_e_gear() const;
  inline void clear_e_gear();
  static const int kEGearFieldNumber = 8;
  inline ::aero_vehicle_data_protobuf::AERO_t_PT_Gear_Proto e_gear() const;
  inline void set_e_gear(::aero_vehicle_data_protobuf::AERO_t_PT_Gear_Proto value);

  // optional uint32 u_GearStatus = 9;
  inline bool has_u_gearstatus() const;
  inline void clear_u_gearstatus();
  static const int kUGearStatusFieldNumber = 9;
  inline ::google::protobuf::uint32 u_gearstatus() const;
  inline void set_u_gearstatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_enginespeed();
  inline void clear_has_enginespeed();
  inline void set_has_enginetorque();
  inline void clear_has_enginetorque();
  inline void set_has_gaspedalpos();
  inline void clear_has_gaspedalpos();
  inline void set_has_gaspedalposgrad();
  inline void clear_has_gaspedalposgrad();
  inline void set_has_fuelconsumption();
  inline void clear_has_fuelconsumption();
  inline void set_has_gaspedalposdriver();
  inline void clear_has_gaspedalposdriver();
  inline void set_has_e_gear();
  inline void clear_has_e_gear();
  inline void set_has_u_gearstatus();
  inline void clear_has_u_gearstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timestamp_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* enginespeed_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* enginetorque_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* gaspedalpos_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* gaspedalposgrad_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* fuelconsumption_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* gaspedalposdriver_;
  int e_gear_;
  ::google::protobuf::uint32 u_gearstatus_;
  friend void  protobuf_AddDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_AssignDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_ShutdownFile_aero_5fvehicle_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_PowerTrain_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_Brake_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_Brake_Proto();
  virtual ~AERO_t_Brake_Proto();

  AERO_t_Brake_Proto(const AERO_t_Brake_Proto& from);

  inline AERO_t_Brake_Proto& operator=(const AERO_t_Brake_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_Brake_Proto& default_instance();

  void Swap(AERO_t_Brake_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_Brake_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_Brake_Proto& from);
  void MergeFrom(const AERO_t_Brake_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto Timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& timestamp() const;
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* mutable_timestamp();
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* release_timestamp();
  inline void set_allocated_timestamp(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timestamp);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto DriverPressure = 2;
  inline bool has_driverpressure() const;
  inline void clear_driverpressure();
  static const int kDriverPressureFieldNumber = 2;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& driverpressure() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_driverpressure();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_driverpressure();
  inline void set_allocated_driverpressure(::aero_type_protobuf::AERO_t_float32Status_Proto* driverpressure);

  // optional .aero_type_protobuf.AERO_t_booleanStatus_Proto IsBrakeApplied = 3;
  inline bool has_isbrakeapplied() const;
  inline void clear_isbrakeapplied();
  static const int kIsBrakeAppliedFieldNumber = 3;
  inline const ::aero_type_protobuf::AERO_t_booleanStatus_Proto& isbrakeapplied() const;
  inline ::aero_type_protobuf::AERO_t_booleanStatus_Proto* mutable_isbrakeapplied();
  inline ::aero_type_protobuf::AERO_t_booleanStatus_Proto* release_isbrakeapplied();
  inline void set_allocated_isbrakeapplied(::aero_type_protobuf::AERO_t_booleanStatus_Proto* isbrakeapplied);

  // optional .aero_type_protobuf.AERO_t_booleanStatus_Proto IsPanicBraking = 4;
  inline bool has_ispanicbraking() const;
  inline void clear_ispanicbraking();
  static const int kIsPanicBrakingFieldNumber = 4;
  inline const ::aero_type_protobuf::AERO_t_booleanStatus_Proto& ispanicbraking() const;
  inline ::aero_type_protobuf::AERO_t_booleanStatus_Proto* mutable_ispanicbraking();
  inline ::aero_type_protobuf::AERO_t_booleanStatus_Proto* release_ispanicbraking();
  inline void set_allocated_ispanicbraking(::aero_type_protobuf::AERO_t_booleanStatus_Proto* ispanicbraking);

  // optional .aero_vehicle_data_protobuf.AERO_t_ABSECS_State_Proto ABS_Value = 5;
  inline bool has_abs_value() const;
  inline void clear_abs_value();
  static const int kABSValueFieldNumber = 5;
  inline ::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto abs_value() const;
  inline void set_abs_value(::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto value);

  // optional uint32 u_ABS_Value = 6;
  inline bool has_u_abs_value() const;
  inline void clear_u_abs_value();
  static const int kUABSValueFieldNumber = 6;
  inline ::google::protobuf::uint32 u_abs_value() const;
  inline void set_u_abs_value(::google::protobuf::uint32 value);

  // optional .aero_vehicle_data_protobuf.AERO_t_ABSECS_State_Proto ESC_Value = 7;
  inline bool has_esc_value() const;
  inline void clear_esc_value();
  static const int kESCValueFieldNumber = 7;
  inline ::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto esc_value() const;
  inline void set_esc_value(::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto value);

  // optional uint32 u_ESC_Value = 8;
  inline bool has_u_esc_value() const;
  inline void clear_u_esc_value();
  static const int kUESCValueFieldNumber = 8;
  inline ::google::protobuf::uint32 u_esc_value() const;
  inline void set_u_esc_value(::google::protobuf::uint32 value);

  // optional .aero_vehicle_data_protobuf.AERO_t_ABSECS_State_Proto TCS_Value = 9;
  inline bool has_tcs_value() const;
  inline void clear_tcs_value();
  static const int kTCSValueFieldNumber = 9;
  inline ::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto tcs_value() const;
  inline void set_tcs_value(::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto value);

  // optional uint32 u_TCS_Value = 10;
  inline bool has_u_tcs_value() const;
  inline void clear_u_tcs_value();
  static const int kUTCSValueFieldNumber = 10;
  inline ::google::protobuf::uint32 u_tcs_value() const;
  inline void set_u_tcs_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aero_vehicle_data_protobuf.AERO_t_Brake_Proto)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_driverpressure();
  inline void clear_has_driverpressure();
  inline void set_has_isbrakeapplied();
  inline void clear_has_isbrakeapplied();
  inline void set_has_ispanicbraking();
  inline void clear_has_ispanicbraking();
  inline void set_has_abs_value();
  inline void clear_has_abs_value();
  inline void set_has_u_abs_value();
  inline void clear_has_u_abs_value();
  inline void set_has_esc_value();
  inline void clear_has_esc_value();
  inline void set_has_u_esc_value();
  inline void clear_has_u_esc_value();
  inline void set_has_tcs_value();
  inline void clear_has_tcs_value();
  inline void set_has_u_tcs_value();
  inline void clear_has_u_tcs_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timestamp_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* driverpressure_;
  ::aero_type_protobuf::AERO_t_booleanStatus_Proto* isbrakeapplied_;
  ::aero_type_protobuf::AERO_t_booleanStatus_Proto* ispanicbraking_;
  int abs_value_;
  ::google::protobuf::uint32 u_abs_value_;
  int esc_value_;
  ::google::protobuf::uint32 u_esc_value_;
  int tcs_value_;
  ::google::protobuf::uint32 u_tcs_value_;
  friend void  protobuf_AddDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_AssignDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_ShutdownFile_aero_5fvehicle_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_Brake_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_WheelTicks_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_WheelTicks_Proto();
  virtual ~AERO_t_WheelTicks_Proto();

  AERO_t_WheelTicks_Proto(const AERO_t_WheelTicks_Proto& from);

  inline AERO_t_WheelTicks_Proto& operator=(const AERO_t_WheelTicks_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_WheelTicks_Proto& default_instance();

  void Swap(AERO_t_WheelTicks_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_WheelTicks_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_WheelTicks_Proto& from);
  void MergeFrom(const AERO_t_WheelTicks_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto Timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& timestamp() const;
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* mutable_timestamp();
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* release_timestamp();
  inline void set_allocated_timestamp(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timestamp);

  // optional .aero_type_protobuf.AERO_t_uint16Status_Proto TicksFL = 2;
  inline bool has_ticksfl() const;
  inline void clear_ticksfl();
  static const int kTicksFLFieldNumber = 2;
  inline const ::aero_type_protobuf::AERO_t_uint16Status_Proto& ticksfl() const;
  inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* mutable_ticksfl();
  inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* release_ticksfl();
  inline void set_allocated_ticksfl(::aero_type_protobuf::AERO_t_uint16Status_Proto* ticksfl);

  // optional .aero_type_protobuf.AERO_t_uint16Status_Proto TicksFR = 3;
  inline bool has_ticksfr() const;
  inline void clear_ticksfr();
  static const int kTicksFRFieldNumber = 3;
  inline const ::aero_type_protobuf::AERO_t_uint16Status_Proto& ticksfr() const;
  inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* mutable_ticksfr();
  inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* release_ticksfr();
  inline void set_allocated_ticksfr(::aero_type_protobuf::AERO_t_uint16Status_Proto* ticksfr);

  // optional .aero_type_protobuf.AERO_t_uint16Status_Proto TicksRL = 4;
  inline bool has_ticksrl() const;
  inline void clear_ticksrl();
  static const int kTicksRLFieldNumber = 4;
  inline const ::aero_type_protobuf::AERO_t_uint16Status_Proto& ticksrl() const;
  inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* mutable_ticksrl();
  inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* release_ticksrl();
  inline void set_allocated_ticksrl(::aero_type_protobuf::AERO_t_uint16Status_Proto* ticksrl);

  // optional .aero_type_protobuf.AERO_t_uint16Status_Proto TicksRR = 5;
  inline bool has_ticksrr() const;
  inline void clear_ticksrr();
  static const int kTicksRRFieldNumber = 5;
  inline const ::aero_type_protobuf::AERO_t_uint16Status_Proto& ticksrr() const;
  inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* mutable_ticksrr();
  inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* release_ticksrr();
  inline void set_allocated_ticksrr(::aero_type_protobuf::AERO_t_uint16Status_Proto* ticksrr);

  // @@protoc_insertion_point(class_scope:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_ticksfl();
  inline void clear_has_ticksfl();
  inline void set_has_ticksfr();
  inline void clear_has_ticksfr();
  inline void set_has_ticksrl();
  inline void clear_has_ticksrl();
  inline void set_has_ticksrr();
  inline void clear_has_ticksrr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timestamp_;
  ::aero_type_protobuf::AERO_t_uint16Status_Proto* ticksfl_;
  ::aero_type_protobuf::AERO_t_uint16Status_Proto* ticksfr_;
  ::aero_type_protobuf::AERO_t_uint16Status_Proto* ticksrl_;
  ::aero_type_protobuf::AERO_t_uint16Status_Proto* ticksrr_;
  friend void  protobuf_AddDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_AssignDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_ShutdownFile_aero_5fvehicle_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_WheelTicks_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_CS_Status_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_CS_Status_Proto();
  virtual ~AERO_t_CS_Status_Proto();

  AERO_t_CS_Status_Proto(const AERO_t_CS_Status_Proto& from);

  inline AERO_t_CS_Status_Proto& operator=(const AERO_t_CS_Status_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_CS_Status_Proto& default_instance();

  void Swap(AERO_t_CS_Status_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_CS_Status_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_CS_Status_Proto& from);
  void MergeFrom(const AERO_t_CS_Status_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 u_Blinker = 1 [default = 0];
  inline bool has_u_blinker() const;
  inline void clear_u_blinker();
  static const int kUBlinkerFieldNumber = 1;
  inline ::google::protobuf::uint32 u_blinker() const;
  inline void set_u_blinker(::google::protobuf::uint32 value);

  // optional uint32 u_Lamps = 2 [default = 0];
  inline bool has_u_lamps() const;
  inline void clear_u_lamps();
  static const int kULampsFieldNumber = 2;
  inline ::google::protobuf::uint32 u_lamps() const;
  inline void set_u_lamps(::google::protobuf::uint32 value);

  // optional uint32 u_WiperFront = 3 [default = 0];
  inline bool has_u_wiperfront() const;
  inline void clear_u_wiperfront();
  static const int kUWiperFrontFieldNumber = 3;
  inline ::google::protobuf::uint32 u_wiperfront() const;
  inline void set_u_wiperfront(::google::protobuf::uint32 value);

  // optional uint32 u_WiperRear = 4 [default = 0];
  inline bool has_u_wiperrear() const;
  inline void clear_u_wiperrear();
  static const int kUWiperRearFieldNumber = 4;
  inline ::google::protobuf::uint32 u_wiperrear() const;
  inline void set_u_wiperrear(::google::protobuf::uint32 value);

  // optional uint32 u_CruiseControl = 5 [default = 0];
  inline bool has_u_cruisecontrol() const;
  inline void clear_u_cruisecontrol();
  static const int kUCruiseControlFieldNumber = 5;
  inline ::google::protobuf::uint32 u_cruisecontrol() const;
  inline void set_u_cruisecontrol(::google::protobuf::uint32 value);

  // optional uint32 u_Doors = 6 [default = 0];
  inline bool has_u_doors() const;
  inline void clear_u_doors();
  static const int kUDoorsFieldNumber = 6;
  inline ::google::protobuf::uint32 u_doors() const;
  inline void set_u_doors(::google::protobuf::uint32 value);

  // optional uint32 u_HandsOff = 7 [default = 0];
  inline bool has_u_handsoff() const;
  inline void clear_u_handsoff();
  static const int kUHandsOffFieldNumber = 7;
  inline ::google::protobuf::uint32 u_handsoff() const;
  inline void set_u_handsoff(::google::protobuf::uint32 value);

  // optional uint32 u_TemperatureExt = 8 [default = 0];
  inline bool has_u_temperatureext() const;
  inline void clear_u_temperatureext();
  static const int kUTemperatureExtFieldNumber = 8;
  inline ::google::protobuf::uint32 u_temperatureext() const;
  inline void set_u_temperatureext(::google::protobuf::uint32 value);

  // optional uint32 u_OdometerTotal = 9 [default = 0];
  inline bool has_u_odometertotal() const;
  inline void clear_u_odometertotal();
  static const int kUOdometerTotalFieldNumber = 9;
  inline ::google::protobuf::uint32 u_odometertotal() const;
  inline void set_u_odometertotal(::google::protobuf::uint32 value);

  // optional uint32 u_CruiseDriverSpeed = 10 [default = 0];
  inline bool has_u_cruisedriverspeed() const;
  inline void clear_u_cruisedriverspeed();
  static const int kUCruiseDriverSpeedFieldNumber = 10;
  inline ::google::protobuf::uint32 u_cruisedriverspeed() const;
  inline void set_u_cruisedriverspeed(::google::protobuf::uint32 value);

  // optional uint32 u_CarId = 11 [default = 0];
  inline bool has_u_carid() const;
  inline void clear_u_carid();
  static const int kUCarIdFieldNumber = 11;
  inline ::google::protobuf::uint32 u_carid() const;
  inline void set_u_carid(::google::protobuf::uint32 value);

  // optional uint32 u_ParkBrakeState = 12 [default = 0];
  inline bool has_u_parkbrakestate() const;
  inline void clear_u_parkbrakestate();
  static const int kUParkBrakeStateFieldNumber = 12;
  inline ::google::protobuf::uint32 u_parkbrakestate() const;
  inline void set_u_parkbrakestate(::google::protobuf::uint32 value);

  // optional uint32 u_GearLever = 13 [default = 0];
  inline bool has_u_gearlever() const;
  inline void clear_u_gearlever();
  static const int kUGearLeverFieldNumber = 13;
  inline ::google::protobuf::uint32 u_gearlever() const;
  inline void set_u_gearlever(::google::protobuf::uint32 value);

  // optional uint32 u_StatusSteeringActuator = 14 [default = 0];
  inline bool has_u_statussteeringactuator() const;
  inline void clear_u_statussteeringactuator();
  static const int kUStatusSteeringActuatorFieldNumber = 14;
  inline ::google::protobuf::uint32 u_statussteeringactuator() const;
  inline void set_u_statussteeringactuator(::google::protobuf::uint32 value);

  // optional uint32 u_StatusAnalogboosterActuator = 15 [default = 0];
  inline bool has_u_statusanalogboosteractuator() const;
  inline void clear_u_statusanalogboosteractuator();
  static const int kUStatusAnalogboosterActuatorFieldNumber = 15;
  inline ::google::protobuf::uint32 u_statusanalogboosteractuator() const;
  inline void set_u_statusanalogboosteractuator(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto)
 private:
  inline void set_has_u_blinker();
  inline void clear_has_u_blinker();
  inline void set_has_u_lamps();
  inline void clear_has_u_lamps();
  inline void set_has_u_wiperfront();
  inline void clear_has_u_wiperfront();
  inline void set_has_u_wiperrear();
  inline void clear_has_u_wiperrear();
  inline void set_has_u_cruisecontrol();
  inline void clear_has_u_cruisecontrol();
  inline void set_has_u_doors();
  inline void clear_has_u_doors();
  inline void set_has_u_handsoff();
  inline void clear_has_u_handsoff();
  inline void set_has_u_temperatureext();
  inline void clear_has_u_temperatureext();
  inline void set_has_u_odometertotal();
  inline void clear_has_u_odometertotal();
  inline void set_has_u_cruisedriverspeed();
  inline void clear_has_u_cruisedriverspeed();
  inline void set_has_u_carid();
  inline void clear_has_u_carid();
  inline void set_has_u_parkbrakestate();
  inline void clear_has_u_parkbrakestate();
  inline void set_has_u_gearlever();
  inline void clear_has_u_gearlever();
  inline void set_has_u_statussteeringactuator();
  inline void clear_has_u_statussteeringactuator();
  inline void set_has_u_statusanalogboosteractuator();
  inline void clear_has_u_statusanalogboosteractuator();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 u_blinker_;
  ::google::protobuf::uint32 u_lamps_;
  ::google::protobuf::uint32 u_wiperfront_;
  ::google::protobuf::uint32 u_wiperrear_;
  ::google::protobuf::uint32 u_cruisecontrol_;
  ::google::protobuf::uint32 u_doors_;
  ::google::protobuf::uint32 u_handsoff_;
  ::google::protobuf::uint32 u_temperatureext_;
  ::google::protobuf::uint32 u_odometertotal_;
  ::google::protobuf::uint32 u_cruisedriverspeed_;
  ::google::protobuf::uint32 u_carid_;
  ::google::protobuf::uint32 u_parkbrakestate_;
  ::google::protobuf::uint32 u_gearlever_;
  ::google::protobuf::uint32 u_statussteeringactuator_;
  ::google::protobuf::uint32 u_statusanalogboosteractuator_;
  friend void  protobuf_AddDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_AssignDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_ShutdownFile_aero_5fvehicle_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_CS_Status_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_CS_Signal_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_CS_Signal_Proto();
  virtual ~AERO_t_CS_Signal_Proto();

  AERO_t_CS_Signal_Proto(const AERO_t_CS_Signal_Proto& from);

  inline AERO_t_CS_Signal_Proto& operator=(const AERO_t_CS_Signal_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_CS_Signal_Proto& default_instance();

  void Swap(AERO_t_CS_Signal_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_CS_Signal_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_CS_Signal_Proto& from);
  void MergeFrom(const AERO_t_CS_Signal_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 u_Blinker = 1 [default = 0];
  inline bool has_u_blinker() const;
  inline void clear_u_blinker();
  static const int kUBlinkerFieldNumber = 1;
  inline ::google::protobuf::uint32 u_blinker() const;
  inline void set_u_blinker(::google::protobuf::uint32 value);

  // optional uint32 u_Lamps = 2 [default = 0];
  inline bool has_u_lamps() const;
  inline void clear_u_lamps();
  static const int kULampsFieldNumber = 2;
  inline ::google::protobuf::uint32 u_lamps() const;
  inline void set_u_lamps(::google::protobuf::uint32 value);

  // optional uint32 u_WiperFront = 3 [default = 0];
  inline bool has_u_wiperfront() const;
  inline void clear_u_wiperfront();
  static const int kUWiperFrontFieldNumber = 3;
  inline ::google::protobuf::uint32 u_wiperfront() const;
  inline void set_u_wiperfront(::google::protobuf::uint32 value);

  // optional uint32 u_WiperRear = 4 [default = 0];
  inline bool has_u_wiperrear() const;
  inline void clear_u_wiperrear();
  static const int kUWiperRearFieldNumber = 4;
  inline ::google::protobuf::uint32 u_wiperrear() const;
  inline void set_u_wiperrear(::google::protobuf::uint32 value);

  // optional uint32 u_CruiseControl = 5 [default = 0];
  inline bool has_u_cruisecontrol() const;
  inline void clear_u_cruisecontrol();
  static const int kUCruiseControlFieldNumber = 5;
  inline ::google::protobuf::uint32 u_cruisecontrol() const;
  inline void set_u_cruisecontrol(::google::protobuf::uint32 value);

  // optional uint32 u_Doors = 6 [default = 0];
  inline bool has_u_doors() const;
  inline void clear_u_doors();
  static const int kUDoorsFieldNumber = 6;
  inline ::google::protobuf::uint32 u_doors() const;
  inline void set_u_doors(::google::protobuf::uint32 value);

  // optional sint32 s_TemperatureExt = 7 [default = 0];
  inline bool has_s_temperatureext() const;
  inline void clear_s_temperatureext();
  static const int kSTemperatureExtFieldNumber = 7;
  inline ::google::protobuf::int32 s_temperatureext() const;
  inline void set_s_temperatureext(::google::protobuf::int32 value);

  // optional uint32 u_CarId = 8 [default = 0];
  inline bool has_u_carid() const;
  inline void clear_u_carid();
  static const int kUCarIdFieldNumber = 8;
  inline ::google::protobuf::uint32 u_carid() const;
  inline void set_u_carid(::google::protobuf::uint32 value);

  // optional uint32 u_ParkBrakeState = 9 [default = 0];
  inline bool has_u_parkbrakestate() const;
  inline void clear_u_parkbrakestate();
  static const int kUParkBrakeStateFieldNumber = 9;
  inline ::google::protobuf::uint32 u_parkbrakestate() const;
  inline void set_u_parkbrakestate(::google::protobuf::uint32 value);

  // optional uint32 u_GearLever = 10 [default = 0];
  inline bool has_u_gearlever() const;
  inline void clear_u_gearlever();
  static const int kUGearLeverFieldNumber = 10;
  inline ::google::protobuf::uint32 u_gearlever() const;
  inline void set_u_gearlever(::google::protobuf::uint32 value);

  // optional uint32 u_StatusSteeringActuator = 11 [default = 0];
  inline bool has_u_statussteeringactuator() const;
  inline void clear_u_statussteeringactuator();
  static const int kUStatusSteeringActuatorFieldNumber = 11;
  inline ::google::protobuf::uint32 u_statussteeringactuator() const;
  inline void set_u_statussteeringactuator(::google::protobuf::uint32 value);

  // optional uint32 u_StatusAnalogboosterActuator = 12 [default = 0];
  inline bool has_u_statusanalogboosteractuator() const;
  inline void clear_u_statusanalogboosteractuator();
  static const int kUStatusAnalogboosterActuatorFieldNumber = 12;
  inline ::google::protobuf::uint32 u_statusanalogboosteractuator() const;
  inline void set_u_statusanalogboosteractuator(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto)
 private:
  inline void set_has_u_blinker();
  inline void clear_has_u_blinker();
  inline void set_has_u_lamps();
  inline void clear_has_u_lamps();
  inline void set_has_u_wiperfront();
  inline void clear_has_u_wiperfront();
  inline void set_has_u_wiperrear();
  inline void clear_has_u_wiperrear();
  inline void set_has_u_cruisecontrol();
  inline void clear_has_u_cruisecontrol();
  inline void set_has_u_doors();
  inline void clear_has_u_doors();
  inline void set_has_s_temperatureext();
  inline void clear_has_s_temperatureext();
  inline void set_has_u_carid();
  inline void clear_has_u_carid();
  inline void set_has_u_parkbrakestate();
  inline void clear_has_u_parkbrakestate();
  inline void set_has_u_gearlever();
  inline void clear_has_u_gearlever();
  inline void set_has_u_statussteeringactuator();
  inline void clear_has_u_statussteeringactuator();
  inline void set_has_u_statusanalogboosteractuator();
  inline void clear_has_u_statusanalogboosteractuator();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 u_blinker_;
  ::google::protobuf::uint32 u_lamps_;
  ::google::protobuf::uint32 u_wiperfront_;
  ::google::protobuf::uint32 u_wiperrear_;
  ::google::protobuf::uint32 u_cruisecontrol_;
  ::google::protobuf::uint32 u_doors_;
  ::google::protobuf::int32 s_temperatureext_;
  ::google::protobuf::uint32 u_carid_;
  ::google::protobuf::uint32 u_parkbrakestate_;
  ::google::protobuf::uint32 u_gearlever_;
  ::google::protobuf::uint32 u_statussteeringactuator_;
  ::google::protobuf::uint32 u_statusanalogboosteractuator_;
  friend void  protobuf_AddDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_AssignDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_ShutdownFile_aero_5fvehicle_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_CS_Signal_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_CarSwitches_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_CarSwitches_Proto();
  virtual ~AERO_t_CarSwitches_Proto();

  AERO_t_CarSwitches_Proto(const AERO_t_CarSwitches_Proto& from);

  inline AERO_t_CarSwitches_Proto& operator=(const AERO_t_CarSwitches_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_CarSwitches_Proto& default_instance();

  void Swap(AERO_t_CarSwitches_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_CarSwitches_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_CarSwitches_Proto& from);
  void MergeFrom(const AERO_t_CarSwitches_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto Timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& timestamp() const;
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* mutable_timestamp();
  inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* release_timestamp();
  inline void set_allocated_timestamp(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timestamp);

  // optional .aero_type_protobuf.AERO_t_booleanStatus_Proto handsOff = 2;
  inline bool has_handsoff() const;
  inline void clear_handsoff();
  static const int kHandsOffFieldNumber = 2;
  inline const ::aero_type_protobuf::AERO_t_booleanStatus_Proto& handsoff() const;
  inline ::aero_type_protobuf::AERO_t_booleanStatus_Proto* mutable_handsoff();
  inline ::aero_type_protobuf::AERO_t_booleanStatus_Proto* release_handsoff();
  inline void set_allocated_handsoff(::aero_type_protobuf::AERO_t_booleanStatus_Proto* handsoff);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto f_OdometerTotal = 3;
  inline bool has_f_odometertotal() const;
  inline void clear_f_odometertotal();
  static const int kFOdometerTotalFieldNumber = 3;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& f_odometertotal() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_f_odometertotal();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_f_odometertotal();
  inline void set_allocated_f_odometertotal(::aero_type_protobuf::AERO_t_float32Status_Proto* f_odometertotal);

  // optional .aero_type_protobuf.AERO_t_float32Status_Proto f_CruiseDriverSpeed = 4;
  inline bool has_f_cruisedriverspeed() const;
  inline void clear_f_cruisedriverspeed();
  static const int kFCruiseDriverSpeedFieldNumber = 4;
  inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& f_cruisedriverspeed() const;
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* mutable_f_cruisedriverspeed();
  inline ::aero_type_protobuf::AERO_t_float32Status_Proto* release_f_cruisedriverspeed();
  inline void set_allocated_f_cruisedriverspeed(::aero_type_protobuf::AERO_t_float32Status_Proto* f_cruisedriverspeed);

  // @@protoc_insertion_point(class_scope:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_handsoff();
  inline void clear_has_handsoff();
  inline void set_has_f_odometertotal();
  inline void clear_has_f_odometertotal();
  inline void set_has_f_cruisedriverspeed();
  inline void clear_has_f_cruisedriverspeed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timestamp_;
  ::aero_type_protobuf::AERO_t_booleanStatus_Proto* handsoff_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* f_odometertotal_;
  ::aero_type_protobuf::AERO_t_float32Status_Proto* f_cruisedriverspeed_;
  friend void  protobuf_AddDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_AssignDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_ShutdownFile_aero_5fvehicle_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_CarSwitches_Proto* default_instance_;
};
// -------------------------------------------------------------------

class AERO_t_VehiclePose_Proto : public ::google::protobuf::Message {
 public:
  AERO_t_VehiclePose_Proto();
  virtual ~AERO_t_VehiclePose_Proto();

  AERO_t_VehiclePose_Proto(const AERO_t_VehiclePose_Proto& from);

  inline AERO_t_VehiclePose_Proto& operator=(const AERO_t_VehiclePose_Proto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AERO_t_VehiclePose_Proto& default_instance();

  void Swap(AERO_t_VehiclePose_Proto* other);

  // implements Message ----------------------------------------------

  AERO_t_VehiclePose_Proto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AERO_t_VehiclePose_Proto& from);
  void MergeFrom(const AERO_t_VehiclePose_Proto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aero_type_protobuf.AERO_t_SignalHeader_Proto SignalHeader = 1;
  inline bool has_signalheader() const;
  inline void clear_signalheader();
  static const int kSignalHeaderFieldNumber = 1;
  inline const ::aero_type_protobuf::AERO_t_SignalHeader_Proto& signalheader() const;
  inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* mutable_signalheader();
  inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* release_signalheader();
  inline void set_allocated_signalheader(::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader);

  // optional .aero_type_protobuf.AERO_t_Pose2D_Proto Pose = 2;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 2;
  inline const ::aero_type_protobuf::AERO_t_Pose2D_Proto& pose() const;
  inline ::aero_type_protobuf::AERO_t_Pose2D_Proto* mutable_pose();
  inline ::aero_type_protobuf::AERO_t_Pose2D_Proto* release_pose();
  inline void set_allocated_pose(::aero_type_protobuf::AERO_t_Pose2D_Proto* pose);

  // optional float f_SlipAngleRA = 4;
  inline bool has_f_slipanglera() const;
  inline void clear_f_slipanglera();
  static const int kFSlipAngleRAFieldNumber = 4;
  inline float f_slipanglera() const;
  inline void set_f_slipanglera(float value);

  // @@protoc_insertion_point(class_scope:aero_vehicle_data_protobuf.AERO_t_VehiclePose_Proto)
 private:
  inline void set_has_signalheader();
  inline void clear_has_signalheader();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_f_slipanglera();
  inline void clear_has_f_slipanglera();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader_;
  ::aero_type_protobuf::AERO_t_Pose2D_Proto* pose_;
  float f_slipanglera_;
  friend void  protobuf_AddDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_AssignDesc_aero_5fvehicle_5fdata_2eproto();
  friend void protobuf_ShutdownFile_aero_5fvehicle_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AERO_t_VehiclePose_Proto* default_instance_;
};
// ===================================================================


// ===================================================================

// AERO_t_VehicleDynamics_Proto

// optional .aero_type_protobuf.AERO_t_SignalHeader_Proto SignalHeader = 1;
inline bool AERO_t_VehicleDynamics_Proto::has_signalheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_VehicleDynamics_Proto::set_has_signalheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_has_signalheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_signalheader() {
  if (signalheader_ != NULL) signalheader_->::aero_type_protobuf::AERO_t_SignalHeader_Proto::Clear();
  clear_has_signalheader();
}
inline const ::aero_type_protobuf::AERO_t_SignalHeader_Proto& AERO_t_VehicleDynamics_Proto::signalheader() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.SignalHeader)
  return signalheader_ != NULL ? *signalheader_ : *default_instance_->signalheader_;
}
inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* AERO_t_VehicleDynamics_Proto::mutable_signalheader() {
  set_has_signalheader();
  if (signalheader_ == NULL) signalheader_ = new ::aero_type_protobuf::AERO_t_SignalHeader_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.SignalHeader)
  return signalheader_;
}
inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* AERO_t_VehicleDynamics_Proto::release_signalheader() {
  clear_has_signalheader();
  ::aero_type_protobuf::AERO_t_SignalHeader_Proto* temp = signalheader_;
  signalheader_ = NULL;
  return temp;
}
inline void AERO_t_VehicleDynamics_Proto::set_allocated_signalheader(::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader) {
  delete signalheader_;
  signalheader_ = signalheader;
  if (signalheader) {
    set_has_signalheader();
  } else {
    clear_has_signalheader();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.SignalHeader)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto Speed = 2;
inline bool AERO_t_VehicleDynamics_Proto::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_VehicleDynamics_Proto::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_speed() {
  if (speed_ != NULL) speed_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_speed();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_VehicleDynamics_Proto::speed() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.Speed)
  return speed_ != NULL ? *speed_ : *default_instance_->speed_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::mutable_speed() {
  set_has_speed();
  if (speed_ == NULL) speed_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.Speed)
  return speed_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::release_speed() {
  clear_has_speed();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = speed_;
  speed_ = NULL;
  return temp;
}
inline void AERO_t_VehicleDynamics_Proto::set_allocated_speed(::aero_type_protobuf::AERO_t_float32Status_Proto* speed) {
  delete speed_;
  speed_ = speed;
  if (speed) {
    set_has_speed();
  } else {
    clear_has_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.Speed)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto SpeedDisplayed = 3;
inline bool AERO_t_VehicleDynamics_Proto::has_speeddisplayed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_VehicleDynamics_Proto::set_has_speeddisplayed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_has_speeddisplayed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_speeddisplayed() {
  if (speeddisplayed_ != NULL) speeddisplayed_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_speeddisplayed();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_VehicleDynamics_Proto::speeddisplayed() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.SpeedDisplayed)
  return speeddisplayed_ != NULL ? *speeddisplayed_ : *default_instance_->speeddisplayed_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::mutable_speeddisplayed() {
  set_has_speeddisplayed();
  if (speeddisplayed_ == NULL) speeddisplayed_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.SpeedDisplayed)
  return speeddisplayed_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::release_speeddisplayed() {
  clear_has_speeddisplayed();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = speeddisplayed_;
  speeddisplayed_ = NULL;
  return temp;
}
inline void AERO_t_VehicleDynamics_Proto::set_allocated_speeddisplayed(::aero_type_protobuf::AERO_t_float32Status_Proto* speeddisplayed) {
  delete speeddisplayed_;
  speeddisplayed_ = speeddisplayed;
  if (speeddisplayed) {
    set_has_speeddisplayed();
  } else {
    clear_has_speeddisplayed();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.SpeedDisplayed)
}

// repeated .aero_type_protobuf.AERO_t_float32Status_Proto RotSpeedPerWheel = 4;
inline int AERO_t_VehicleDynamics_Proto::rotspeedperwheel_size() const {
  return rotspeedperwheel_.size();
}
inline void AERO_t_VehicleDynamics_Proto::clear_rotspeedperwheel() {
  rotspeedperwheel_.Clear();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_VehicleDynamics_Proto::rotspeedperwheel(int index) const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.RotSpeedPerWheel)
  return rotspeedperwheel_.Get(index);
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::mutable_rotspeedperwheel(int index) {
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.RotSpeedPerWheel)
  return rotspeedperwheel_.Mutable(index);
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::add_rotspeedperwheel() {
  // @@protoc_insertion_point(field_add:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.RotSpeedPerWheel)
  return rotspeedperwheel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_float32Status_Proto >&
AERO_t_VehicleDynamics_Proto::rotspeedperwheel() const {
  // @@protoc_insertion_point(field_list:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.RotSpeedPerWheel)
  return rotspeedperwheel_;
}
inline ::google::protobuf::RepeatedPtrField< ::aero_type_protobuf::AERO_t_float32Status_Proto >*
AERO_t_VehicleDynamics_Proto::mutable_rotspeedperwheel() {
  // @@protoc_insertion_point(field_mutable_list:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.RotSpeedPerWheel)
  return &rotspeedperwheel_;
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto LongAcc = 5;
inline bool AERO_t_VehicleDynamics_Proto::has_longacc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_VehicleDynamics_Proto::set_has_longacc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_has_longacc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_longacc() {
  if (longacc_ != NULL) longacc_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_longacc();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_VehicleDynamics_Proto::longacc() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.LongAcc)
  return longacc_ != NULL ? *longacc_ : *default_instance_->longacc_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::mutable_longacc() {
  set_has_longacc();
  if (longacc_ == NULL) longacc_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.LongAcc)
  return longacc_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::release_longacc() {
  clear_has_longacc();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = longacc_;
  longacc_ = NULL;
  return temp;
}
inline void AERO_t_VehicleDynamics_Proto::set_allocated_longacc(::aero_type_protobuf::AERO_t_float32Status_Proto* longacc) {
  delete longacc_;
  longacc_ = longacc;
  if (longacc) {
    set_has_longacc();
  } else {
    clear_has_longacc();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.LongAcc)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto LatAcc = 6;
inline bool AERO_t_VehicleDynamics_Proto::has_latacc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AERO_t_VehicleDynamics_Proto::set_has_latacc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_has_latacc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_latacc() {
  if (latacc_ != NULL) latacc_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_latacc();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_VehicleDynamics_Proto::latacc() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.LatAcc)
  return latacc_ != NULL ? *latacc_ : *default_instance_->latacc_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::mutable_latacc() {
  set_has_latacc();
  if (latacc_ == NULL) latacc_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.LatAcc)
  return latacc_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::release_latacc() {
  clear_has_latacc();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = latacc_;
  latacc_ = NULL;
  return temp;
}
inline void AERO_t_VehicleDynamics_Proto::set_allocated_latacc(::aero_type_protobuf::AERO_t_float32Status_Proto* latacc) {
  delete latacc_;
  latacc_ = latacc;
  if (latacc) {
    set_has_latacc();
  } else {
    clear_has_latacc();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.LatAcc)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto Yawrate = 7;
inline bool AERO_t_VehicleDynamics_Proto::has_yawrate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AERO_t_VehicleDynamics_Proto::set_has_yawrate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_has_yawrate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_yawrate() {
  if (yawrate_ != NULL) yawrate_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_yawrate();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_VehicleDynamics_Proto::yawrate() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.Yawrate)
  return yawrate_ != NULL ? *yawrate_ : *default_instance_->yawrate_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::mutable_yawrate() {
  set_has_yawrate();
  if (yawrate_ == NULL) yawrate_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.Yawrate)
  return yawrate_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::release_yawrate() {
  clear_has_yawrate();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = yawrate_;
  yawrate_ = NULL;
  return temp;
}
inline void AERO_t_VehicleDynamics_Proto::set_allocated_yawrate(::aero_type_protobuf::AERO_t_float32Status_Proto* yawrate) {
  delete yawrate_;
  yawrate_ = yawrate;
  if (yawrate) {
    set_has_yawrate();
  } else {
    clear_has_yawrate();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.Yawrate)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto SteeringWheelAngle = 8;
inline bool AERO_t_VehicleDynamics_Proto::has_steeringwheelangle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AERO_t_VehicleDynamics_Proto::set_has_steeringwheelangle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_has_steeringwheelangle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_steeringwheelangle() {
  if (steeringwheelangle_ != NULL) steeringwheelangle_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_steeringwheelangle();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_VehicleDynamics_Proto::steeringwheelangle() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.SteeringWheelAngle)
  return steeringwheelangle_ != NULL ? *steeringwheelangle_ : *default_instance_->steeringwheelangle_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::mutable_steeringwheelangle() {
  set_has_steeringwheelangle();
  if (steeringwheelangle_ == NULL) steeringwheelangle_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.SteeringWheelAngle)
  return steeringwheelangle_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::release_steeringwheelangle() {
  clear_has_steeringwheelangle();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = steeringwheelangle_;
  steeringwheelangle_ = NULL;
  return temp;
}
inline void AERO_t_VehicleDynamics_Proto::set_allocated_steeringwheelangle(::aero_type_protobuf::AERO_t_float32Status_Proto* steeringwheelangle) {
  delete steeringwheelangle_;
  steeringwheelangle_ = steeringwheelangle;
  if (steeringwheelangle) {
    set_has_steeringwheelangle();
  } else {
    clear_has_steeringwheelangle();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.SteeringWheelAngle)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto SteeringWheelAngleSpeed = 9;
inline bool AERO_t_VehicleDynamics_Proto::has_steeringwheelanglespeed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AERO_t_VehicleDynamics_Proto::set_has_steeringwheelanglespeed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_has_steeringwheelanglespeed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_steeringwheelanglespeed() {
  if (steeringwheelanglespeed_ != NULL) steeringwheelanglespeed_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_steeringwheelanglespeed();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_VehicleDynamics_Proto::steeringwheelanglespeed() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.SteeringWheelAngleSpeed)
  return steeringwheelanglespeed_ != NULL ? *steeringwheelanglespeed_ : *default_instance_->steeringwheelanglespeed_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::mutable_steeringwheelanglespeed() {
  set_has_steeringwheelanglespeed();
  if (steeringwheelanglespeed_ == NULL) steeringwheelanglespeed_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.SteeringWheelAngleSpeed)
  return steeringwheelanglespeed_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::release_steeringwheelanglespeed() {
  clear_has_steeringwheelanglespeed();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = steeringwheelanglespeed_;
  steeringwheelanglespeed_ = NULL;
  return temp;
}
inline void AERO_t_VehicleDynamics_Proto::set_allocated_steeringwheelanglespeed(::aero_type_protobuf::AERO_t_float32Status_Proto* steeringwheelanglespeed) {
  delete steeringwheelanglespeed_;
  steeringwheelanglespeed_ = steeringwheelanglespeed;
  if (steeringwheelanglespeed) {
    set_has_steeringwheelanglespeed();
  } else {
    clear_has_steeringwheelanglespeed();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.SteeringWheelAngleSpeed)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto DrvSteerTorque = 10;
inline bool AERO_t_VehicleDynamics_Proto::has_drvsteertorque() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AERO_t_VehicleDynamics_Proto::set_has_drvsteertorque() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_has_drvsteertorque() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_drvsteertorque() {
  if (drvsteertorque_ != NULL) drvsteertorque_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_drvsteertorque();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_VehicleDynamics_Proto::drvsteertorque() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.DrvSteerTorque)
  return drvsteertorque_ != NULL ? *drvsteertorque_ : *default_instance_->drvsteertorque_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::mutable_drvsteertorque() {
  set_has_drvsteertorque();
  if (drvsteertorque_ == NULL) drvsteertorque_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.DrvSteerTorque)
  return drvsteertorque_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_VehicleDynamics_Proto::release_drvsteertorque() {
  clear_has_drvsteertorque();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = drvsteertorque_;
  drvsteertorque_ = NULL;
  return temp;
}
inline void AERO_t_VehicleDynamics_Proto::set_allocated_drvsteertorque(::aero_type_protobuf::AERO_t_float32Status_Proto* drvsteertorque) {
  delete drvsteertorque_;
  drvsteertorque_ = drvsteertorque;
  if (drvsteertorque) {
    set_has_drvsteertorque();
  } else {
    clear_has_drvsteertorque();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.DrvSteerTorque)
}

// optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto TimeSinceLastTick = 11;
inline bool AERO_t_VehicleDynamics_Proto::has_timesincelasttick() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AERO_t_VehicleDynamics_Proto::set_has_timesincelasttick() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_has_timesincelasttick() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AERO_t_VehicleDynamics_Proto::clear_timesincelasttick() {
  if (timesincelasttick_ != NULL) timesincelasttick_->::aero_type_protobuf::AERO_t_s_Timestamp_Proto::Clear();
  clear_has_timesincelasttick();
}
inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& AERO_t_VehicleDynamics_Proto::timesincelasttick() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.TimeSinceLastTick)
  return timesincelasttick_ != NULL ? *timesincelasttick_ : *default_instance_->timesincelasttick_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_VehicleDynamics_Proto::mutable_timesincelasttick() {
  set_has_timesincelasttick();
  if (timesincelasttick_ == NULL) timesincelasttick_ = new ::aero_type_protobuf::AERO_t_s_Timestamp_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.TimeSinceLastTick)
  return timesincelasttick_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_VehicleDynamics_Proto::release_timesincelasttick() {
  clear_has_timesincelasttick();
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* temp = timesincelasttick_;
  timesincelasttick_ = NULL;
  return temp;
}
inline void AERO_t_VehicleDynamics_Proto::set_allocated_timesincelasttick(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timesincelasttick) {
  delete timesincelasttick_;
  timesincelasttick_ = timesincelasttick;
  if (timesincelasttick) {
    set_has_timesincelasttick();
  } else {
    clear_has_timesincelasttick();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_VehicleDynamics_Proto.TimeSinceLastTick)
}

// -------------------------------------------------------------------

// AERO_t_PowerTrain_Proto

// optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto Timestamp = 1;
inline bool AERO_t_PowerTrain_Proto::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_PowerTrain_Proto::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_PowerTrain_Proto::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_PowerTrain_Proto::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::aero_type_protobuf::AERO_t_s_Timestamp_Proto::Clear();
  clear_has_timestamp();
}
inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& AERO_t_PowerTrain_Proto::timestamp() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.Timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_PowerTrain_Proto::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::aero_type_protobuf::AERO_t_s_Timestamp_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.Timestamp)
  return timestamp_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_PowerTrain_Proto::release_timestamp() {
  clear_has_timestamp();
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void AERO_t_PowerTrain_Proto::set_allocated_timestamp(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.Timestamp)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto EngineSpeed = 2;
inline bool AERO_t_PowerTrain_Proto::has_enginespeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_PowerTrain_Proto::set_has_enginespeed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_PowerTrain_Proto::clear_has_enginespeed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_PowerTrain_Proto::clear_enginespeed() {
  if (enginespeed_ != NULL) enginespeed_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_enginespeed();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_PowerTrain_Proto::enginespeed() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.EngineSpeed)
  return enginespeed_ != NULL ? *enginespeed_ : *default_instance_->enginespeed_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_PowerTrain_Proto::mutable_enginespeed() {
  set_has_enginespeed();
  if (enginespeed_ == NULL) enginespeed_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.EngineSpeed)
  return enginespeed_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_PowerTrain_Proto::release_enginespeed() {
  clear_has_enginespeed();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = enginespeed_;
  enginespeed_ = NULL;
  return temp;
}
inline void AERO_t_PowerTrain_Proto::set_allocated_enginespeed(::aero_type_protobuf::AERO_t_float32Status_Proto* enginespeed) {
  delete enginespeed_;
  enginespeed_ = enginespeed;
  if (enginespeed) {
    set_has_enginespeed();
  } else {
    clear_has_enginespeed();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.EngineSpeed)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto EngineTorque = 3;
inline bool AERO_t_PowerTrain_Proto::has_enginetorque() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_PowerTrain_Proto::set_has_enginetorque() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_PowerTrain_Proto::clear_has_enginetorque() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_PowerTrain_Proto::clear_enginetorque() {
  if (enginetorque_ != NULL) enginetorque_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_enginetorque();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_PowerTrain_Proto::enginetorque() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.EngineTorque)
  return enginetorque_ != NULL ? *enginetorque_ : *default_instance_->enginetorque_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_PowerTrain_Proto::mutable_enginetorque() {
  set_has_enginetorque();
  if (enginetorque_ == NULL) enginetorque_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.EngineTorque)
  return enginetorque_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_PowerTrain_Proto::release_enginetorque() {
  clear_has_enginetorque();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = enginetorque_;
  enginetorque_ = NULL;
  return temp;
}
inline void AERO_t_PowerTrain_Proto::set_allocated_enginetorque(::aero_type_protobuf::AERO_t_float32Status_Proto* enginetorque) {
  delete enginetorque_;
  enginetorque_ = enginetorque;
  if (enginetorque) {
    set_has_enginetorque();
  } else {
    clear_has_enginetorque();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.EngineTorque)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto GasPedalPos = 4;
inline bool AERO_t_PowerTrain_Proto::has_gaspedalpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_PowerTrain_Proto::set_has_gaspedalpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_PowerTrain_Proto::clear_has_gaspedalpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_PowerTrain_Proto::clear_gaspedalpos() {
  if (gaspedalpos_ != NULL) gaspedalpos_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_gaspedalpos();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_PowerTrain_Proto::gaspedalpos() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.GasPedalPos)
  return gaspedalpos_ != NULL ? *gaspedalpos_ : *default_instance_->gaspedalpos_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_PowerTrain_Proto::mutable_gaspedalpos() {
  set_has_gaspedalpos();
  if (gaspedalpos_ == NULL) gaspedalpos_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.GasPedalPos)
  return gaspedalpos_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_PowerTrain_Proto::release_gaspedalpos() {
  clear_has_gaspedalpos();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = gaspedalpos_;
  gaspedalpos_ = NULL;
  return temp;
}
inline void AERO_t_PowerTrain_Proto::set_allocated_gaspedalpos(::aero_type_protobuf::AERO_t_float32Status_Proto* gaspedalpos) {
  delete gaspedalpos_;
  gaspedalpos_ = gaspedalpos;
  if (gaspedalpos) {
    set_has_gaspedalpos();
  } else {
    clear_has_gaspedalpos();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.GasPedalPos)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto GasPedalPosGrad = 5;
inline bool AERO_t_PowerTrain_Proto::has_gaspedalposgrad() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_PowerTrain_Proto::set_has_gaspedalposgrad() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_PowerTrain_Proto::clear_has_gaspedalposgrad() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_PowerTrain_Proto::clear_gaspedalposgrad() {
  if (gaspedalposgrad_ != NULL) gaspedalposgrad_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_gaspedalposgrad();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_PowerTrain_Proto::gaspedalposgrad() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.GasPedalPosGrad)
  return gaspedalposgrad_ != NULL ? *gaspedalposgrad_ : *default_instance_->gaspedalposgrad_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_PowerTrain_Proto::mutable_gaspedalposgrad() {
  set_has_gaspedalposgrad();
  if (gaspedalposgrad_ == NULL) gaspedalposgrad_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.GasPedalPosGrad)
  return gaspedalposgrad_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_PowerTrain_Proto::release_gaspedalposgrad() {
  clear_has_gaspedalposgrad();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = gaspedalposgrad_;
  gaspedalposgrad_ = NULL;
  return temp;
}
inline void AERO_t_PowerTrain_Proto::set_allocated_gaspedalposgrad(::aero_type_protobuf::AERO_t_float32Status_Proto* gaspedalposgrad) {
  delete gaspedalposgrad_;
  gaspedalposgrad_ = gaspedalposgrad;
  if (gaspedalposgrad) {
    set_has_gaspedalposgrad();
  } else {
    clear_has_gaspedalposgrad();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.GasPedalPosGrad)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto FuelConsumption = 6;
inline bool AERO_t_PowerTrain_Proto::has_fuelconsumption() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AERO_t_PowerTrain_Proto::set_has_fuelconsumption() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AERO_t_PowerTrain_Proto::clear_has_fuelconsumption() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AERO_t_PowerTrain_Proto::clear_fuelconsumption() {
  if (fuelconsumption_ != NULL) fuelconsumption_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_fuelconsumption();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_PowerTrain_Proto::fuelconsumption() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.FuelConsumption)
  return fuelconsumption_ != NULL ? *fuelconsumption_ : *default_instance_->fuelconsumption_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_PowerTrain_Proto::mutable_fuelconsumption() {
  set_has_fuelconsumption();
  if (fuelconsumption_ == NULL) fuelconsumption_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.FuelConsumption)
  return fuelconsumption_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_PowerTrain_Proto::release_fuelconsumption() {
  clear_has_fuelconsumption();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = fuelconsumption_;
  fuelconsumption_ = NULL;
  return temp;
}
inline void AERO_t_PowerTrain_Proto::set_allocated_fuelconsumption(::aero_type_protobuf::AERO_t_float32Status_Proto* fuelconsumption) {
  delete fuelconsumption_;
  fuelconsumption_ = fuelconsumption;
  if (fuelconsumption) {
    set_has_fuelconsumption();
  } else {
    clear_has_fuelconsumption();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.FuelConsumption)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto GasPedalPosDriver = 7;
inline bool AERO_t_PowerTrain_Proto::has_gaspedalposdriver() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AERO_t_PowerTrain_Proto::set_has_gaspedalposdriver() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AERO_t_PowerTrain_Proto::clear_has_gaspedalposdriver() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AERO_t_PowerTrain_Proto::clear_gaspedalposdriver() {
  if (gaspedalposdriver_ != NULL) gaspedalposdriver_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_gaspedalposdriver();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_PowerTrain_Proto::gaspedalposdriver() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.GasPedalPosDriver)
  return gaspedalposdriver_ != NULL ? *gaspedalposdriver_ : *default_instance_->gaspedalposdriver_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_PowerTrain_Proto::mutable_gaspedalposdriver() {
  set_has_gaspedalposdriver();
  if (gaspedalposdriver_ == NULL) gaspedalposdriver_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.GasPedalPosDriver)
  return gaspedalposdriver_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_PowerTrain_Proto::release_gaspedalposdriver() {
  clear_has_gaspedalposdriver();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = gaspedalposdriver_;
  gaspedalposdriver_ = NULL;
  return temp;
}
inline void AERO_t_PowerTrain_Proto::set_allocated_gaspedalposdriver(::aero_type_protobuf::AERO_t_float32Status_Proto* gaspedalposdriver) {
  delete gaspedalposdriver_;
  gaspedalposdriver_ = gaspedalposdriver;
  if (gaspedalposdriver) {
    set_has_gaspedalposdriver();
  } else {
    clear_has_gaspedalposdriver();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.GasPedalPosDriver)
}

// optional .aero_vehicle_data_protobuf.AERO_t_PT_Gear_Proto e_Gear = 8;
inline bool AERO_t_PowerTrain_Proto::has_e_gear() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AERO_t_PowerTrain_Proto::set_has_e_gear() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AERO_t_PowerTrain_Proto::clear_has_e_gear() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AERO_t_PowerTrain_Proto::clear_e_gear() {
  e_gear_ = 0;
  clear_has_e_gear();
}
inline ::aero_vehicle_data_protobuf::AERO_t_PT_Gear_Proto AERO_t_PowerTrain_Proto::e_gear() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.e_Gear)
  return static_cast< ::aero_vehicle_data_protobuf::AERO_t_PT_Gear_Proto >(e_gear_);
}
inline void AERO_t_PowerTrain_Proto::set_e_gear(::aero_vehicle_data_protobuf::AERO_t_PT_Gear_Proto value) {
  assert(::aero_vehicle_data_protobuf::AERO_t_PT_Gear_Proto_IsValid(value));
  set_has_e_gear();
  e_gear_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.e_Gear)
}

// optional uint32 u_GearStatus = 9;
inline bool AERO_t_PowerTrain_Proto::has_u_gearstatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AERO_t_PowerTrain_Proto::set_has_u_gearstatus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AERO_t_PowerTrain_Proto::clear_has_u_gearstatus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AERO_t_PowerTrain_Proto::clear_u_gearstatus() {
  u_gearstatus_ = 0u;
  clear_has_u_gearstatus();
}
inline ::google::protobuf::uint32 AERO_t_PowerTrain_Proto::u_gearstatus() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.u_GearStatus)
  return u_gearstatus_;
}
inline void AERO_t_PowerTrain_Proto::set_u_gearstatus(::google::protobuf::uint32 value) {
  set_has_u_gearstatus();
  u_gearstatus_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_PowerTrain_Proto.u_GearStatus)
}

// -------------------------------------------------------------------

// AERO_t_Brake_Proto

// optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto Timestamp = 1;
inline bool AERO_t_Brake_Proto::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_Brake_Proto::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_Brake_Proto::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_Brake_Proto::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::aero_type_protobuf::AERO_t_s_Timestamp_Proto::Clear();
  clear_has_timestamp();
}
inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& AERO_t_Brake_Proto::timestamp() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.Timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_Brake_Proto::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::aero_type_protobuf::AERO_t_s_Timestamp_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.Timestamp)
  return timestamp_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_Brake_Proto::release_timestamp() {
  clear_has_timestamp();
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void AERO_t_Brake_Proto::set_allocated_timestamp(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.Timestamp)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto DriverPressure = 2;
inline bool AERO_t_Brake_Proto::has_driverpressure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_Brake_Proto::set_has_driverpressure() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_Brake_Proto::clear_has_driverpressure() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_Brake_Proto::clear_driverpressure() {
  if (driverpressure_ != NULL) driverpressure_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_driverpressure();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_Brake_Proto::driverpressure() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.DriverPressure)
  return driverpressure_ != NULL ? *driverpressure_ : *default_instance_->driverpressure_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_Brake_Proto::mutable_driverpressure() {
  set_has_driverpressure();
  if (driverpressure_ == NULL) driverpressure_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.DriverPressure)
  return driverpressure_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_Brake_Proto::release_driverpressure() {
  clear_has_driverpressure();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = driverpressure_;
  driverpressure_ = NULL;
  return temp;
}
inline void AERO_t_Brake_Proto::set_allocated_driverpressure(::aero_type_protobuf::AERO_t_float32Status_Proto* driverpressure) {
  delete driverpressure_;
  driverpressure_ = driverpressure;
  if (driverpressure) {
    set_has_driverpressure();
  } else {
    clear_has_driverpressure();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.DriverPressure)
}

// optional .aero_type_protobuf.AERO_t_booleanStatus_Proto IsBrakeApplied = 3;
inline bool AERO_t_Brake_Proto::has_isbrakeapplied() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_Brake_Proto::set_has_isbrakeapplied() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_Brake_Proto::clear_has_isbrakeapplied() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_Brake_Proto::clear_isbrakeapplied() {
  if (isbrakeapplied_ != NULL) isbrakeapplied_->::aero_type_protobuf::AERO_t_booleanStatus_Proto::Clear();
  clear_has_isbrakeapplied();
}
inline const ::aero_type_protobuf::AERO_t_booleanStatus_Proto& AERO_t_Brake_Proto::isbrakeapplied() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.IsBrakeApplied)
  return isbrakeapplied_ != NULL ? *isbrakeapplied_ : *default_instance_->isbrakeapplied_;
}
inline ::aero_type_protobuf::AERO_t_booleanStatus_Proto* AERO_t_Brake_Proto::mutable_isbrakeapplied() {
  set_has_isbrakeapplied();
  if (isbrakeapplied_ == NULL) isbrakeapplied_ = new ::aero_type_protobuf::AERO_t_booleanStatus_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.IsBrakeApplied)
  return isbrakeapplied_;
}
inline ::aero_type_protobuf::AERO_t_booleanStatus_Proto* AERO_t_Brake_Proto::release_isbrakeapplied() {
  clear_has_isbrakeapplied();
  ::aero_type_protobuf::AERO_t_booleanStatus_Proto* temp = isbrakeapplied_;
  isbrakeapplied_ = NULL;
  return temp;
}
inline void AERO_t_Brake_Proto::set_allocated_isbrakeapplied(::aero_type_protobuf::AERO_t_booleanStatus_Proto* isbrakeapplied) {
  delete isbrakeapplied_;
  isbrakeapplied_ = isbrakeapplied;
  if (isbrakeapplied) {
    set_has_isbrakeapplied();
  } else {
    clear_has_isbrakeapplied();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.IsBrakeApplied)
}

// optional .aero_type_protobuf.AERO_t_booleanStatus_Proto IsPanicBraking = 4;
inline bool AERO_t_Brake_Proto::has_ispanicbraking() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_Brake_Proto::set_has_ispanicbraking() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_Brake_Proto::clear_has_ispanicbraking() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_Brake_Proto::clear_ispanicbraking() {
  if (ispanicbraking_ != NULL) ispanicbraking_->::aero_type_protobuf::AERO_t_booleanStatus_Proto::Clear();
  clear_has_ispanicbraking();
}
inline const ::aero_type_protobuf::AERO_t_booleanStatus_Proto& AERO_t_Brake_Proto::ispanicbraking() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.IsPanicBraking)
  return ispanicbraking_ != NULL ? *ispanicbraking_ : *default_instance_->ispanicbraking_;
}
inline ::aero_type_protobuf::AERO_t_booleanStatus_Proto* AERO_t_Brake_Proto::mutable_ispanicbraking() {
  set_has_ispanicbraking();
  if (ispanicbraking_ == NULL) ispanicbraking_ = new ::aero_type_protobuf::AERO_t_booleanStatus_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.IsPanicBraking)
  return ispanicbraking_;
}
inline ::aero_type_protobuf::AERO_t_booleanStatus_Proto* AERO_t_Brake_Proto::release_ispanicbraking() {
  clear_has_ispanicbraking();
  ::aero_type_protobuf::AERO_t_booleanStatus_Proto* temp = ispanicbraking_;
  ispanicbraking_ = NULL;
  return temp;
}
inline void AERO_t_Brake_Proto::set_allocated_ispanicbraking(::aero_type_protobuf::AERO_t_booleanStatus_Proto* ispanicbraking) {
  delete ispanicbraking_;
  ispanicbraking_ = ispanicbraking;
  if (ispanicbraking) {
    set_has_ispanicbraking();
  } else {
    clear_has_ispanicbraking();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.IsPanicBraking)
}

// optional .aero_vehicle_data_protobuf.AERO_t_ABSECS_State_Proto ABS_Value = 5;
inline bool AERO_t_Brake_Proto::has_abs_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_Brake_Proto::set_has_abs_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_Brake_Proto::clear_has_abs_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_Brake_Proto::clear_abs_value() {
  abs_value_ = 0;
  clear_has_abs_value();
}
inline ::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto AERO_t_Brake_Proto::abs_value() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.ABS_Value)
  return static_cast< ::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto >(abs_value_);
}
inline void AERO_t_Brake_Proto::set_abs_value(::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto value) {
  assert(::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto_IsValid(value));
  set_has_abs_value();
  abs_value_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.ABS_Value)
}

// optional uint32 u_ABS_Value = 6;
inline bool AERO_t_Brake_Proto::has_u_abs_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AERO_t_Brake_Proto::set_has_u_abs_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AERO_t_Brake_Proto::clear_has_u_abs_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AERO_t_Brake_Proto::clear_u_abs_value() {
  u_abs_value_ = 0u;
  clear_has_u_abs_value();
}
inline ::google::protobuf::uint32 AERO_t_Brake_Proto::u_abs_value() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.u_ABS_Value)
  return u_abs_value_;
}
inline void AERO_t_Brake_Proto::set_u_abs_value(::google::protobuf::uint32 value) {
  set_has_u_abs_value();
  u_abs_value_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.u_ABS_Value)
}

// optional .aero_vehicle_data_protobuf.AERO_t_ABSECS_State_Proto ESC_Value = 7;
inline bool AERO_t_Brake_Proto::has_esc_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AERO_t_Brake_Proto::set_has_esc_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AERO_t_Brake_Proto::clear_has_esc_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AERO_t_Brake_Proto::clear_esc_value() {
  esc_value_ = 0;
  clear_has_esc_value();
}
inline ::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto AERO_t_Brake_Proto::esc_value() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.ESC_Value)
  return static_cast< ::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto >(esc_value_);
}
inline void AERO_t_Brake_Proto::set_esc_value(::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto value) {
  assert(::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto_IsValid(value));
  set_has_esc_value();
  esc_value_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.ESC_Value)
}

// optional uint32 u_ESC_Value = 8;
inline bool AERO_t_Brake_Proto::has_u_esc_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AERO_t_Brake_Proto::set_has_u_esc_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AERO_t_Brake_Proto::clear_has_u_esc_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AERO_t_Brake_Proto::clear_u_esc_value() {
  u_esc_value_ = 0u;
  clear_has_u_esc_value();
}
inline ::google::protobuf::uint32 AERO_t_Brake_Proto::u_esc_value() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.u_ESC_Value)
  return u_esc_value_;
}
inline void AERO_t_Brake_Proto::set_u_esc_value(::google::protobuf::uint32 value) {
  set_has_u_esc_value();
  u_esc_value_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.u_ESC_Value)
}

// optional .aero_vehicle_data_protobuf.AERO_t_ABSECS_State_Proto TCS_Value = 9;
inline bool AERO_t_Brake_Proto::has_tcs_value() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AERO_t_Brake_Proto::set_has_tcs_value() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AERO_t_Brake_Proto::clear_has_tcs_value() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AERO_t_Brake_Proto::clear_tcs_value() {
  tcs_value_ = 0;
  clear_has_tcs_value();
}
inline ::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto AERO_t_Brake_Proto::tcs_value() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.TCS_Value)
  return static_cast< ::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto >(tcs_value_);
}
inline void AERO_t_Brake_Proto::set_tcs_value(::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto value) {
  assert(::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto_IsValid(value));
  set_has_tcs_value();
  tcs_value_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.TCS_Value)
}

// optional uint32 u_TCS_Value = 10;
inline bool AERO_t_Brake_Proto::has_u_tcs_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AERO_t_Brake_Proto::set_has_u_tcs_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AERO_t_Brake_Proto::clear_has_u_tcs_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AERO_t_Brake_Proto::clear_u_tcs_value() {
  u_tcs_value_ = 0u;
  clear_has_u_tcs_value();
}
inline ::google::protobuf::uint32 AERO_t_Brake_Proto::u_tcs_value() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.u_TCS_Value)
  return u_tcs_value_;
}
inline void AERO_t_Brake_Proto::set_u_tcs_value(::google::protobuf::uint32 value) {
  set_has_u_tcs_value();
  u_tcs_value_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_Brake_Proto.u_TCS_Value)
}

// -------------------------------------------------------------------

// AERO_t_WheelTicks_Proto

// optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto Timestamp = 1;
inline bool AERO_t_WheelTicks_Proto::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_WheelTicks_Proto::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_WheelTicks_Proto::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_WheelTicks_Proto::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::aero_type_protobuf::AERO_t_s_Timestamp_Proto::Clear();
  clear_has_timestamp();
}
inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& AERO_t_WheelTicks_Proto::timestamp() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.Timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_WheelTicks_Proto::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::aero_type_protobuf::AERO_t_s_Timestamp_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.Timestamp)
  return timestamp_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_WheelTicks_Proto::release_timestamp() {
  clear_has_timestamp();
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void AERO_t_WheelTicks_Proto::set_allocated_timestamp(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.Timestamp)
}

// optional .aero_type_protobuf.AERO_t_uint16Status_Proto TicksFL = 2;
inline bool AERO_t_WheelTicks_Proto::has_ticksfl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_WheelTicks_Proto::set_has_ticksfl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_WheelTicks_Proto::clear_has_ticksfl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_WheelTicks_Proto::clear_ticksfl() {
  if (ticksfl_ != NULL) ticksfl_->::aero_type_protobuf::AERO_t_uint16Status_Proto::Clear();
  clear_has_ticksfl();
}
inline const ::aero_type_protobuf::AERO_t_uint16Status_Proto& AERO_t_WheelTicks_Proto::ticksfl() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.TicksFL)
  return ticksfl_ != NULL ? *ticksfl_ : *default_instance_->ticksfl_;
}
inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* AERO_t_WheelTicks_Proto::mutable_ticksfl() {
  set_has_ticksfl();
  if (ticksfl_ == NULL) ticksfl_ = new ::aero_type_protobuf::AERO_t_uint16Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.TicksFL)
  return ticksfl_;
}
inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* AERO_t_WheelTicks_Proto::release_ticksfl() {
  clear_has_ticksfl();
  ::aero_type_protobuf::AERO_t_uint16Status_Proto* temp = ticksfl_;
  ticksfl_ = NULL;
  return temp;
}
inline void AERO_t_WheelTicks_Proto::set_allocated_ticksfl(::aero_type_protobuf::AERO_t_uint16Status_Proto* ticksfl) {
  delete ticksfl_;
  ticksfl_ = ticksfl;
  if (ticksfl) {
    set_has_ticksfl();
  } else {
    clear_has_ticksfl();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.TicksFL)
}

// optional .aero_type_protobuf.AERO_t_uint16Status_Proto TicksFR = 3;
inline bool AERO_t_WheelTicks_Proto::has_ticksfr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_WheelTicks_Proto::set_has_ticksfr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_WheelTicks_Proto::clear_has_ticksfr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_WheelTicks_Proto::clear_ticksfr() {
  if (ticksfr_ != NULL) ticksfr_->::aero_type_protobuf::AERO_t_uint16Status_Proto::Clear();
  clear_has_ticksfr();
}
inline const ::aero_type_protobuf::AERO_t_uint16Status_Proto& AERO_t_WheelTicks_Proto::ticksfr() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.TicksFR)
  return ticksfr_ != NULL ? *ticksfr_ : *default_instance_->ticksfr_;
}
inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* AERO_t_WheelTicks_Proto::mutable_ticksfr() {
  set_has_ticksfr();
  if (ticksfr_ == NULL) ticksfr_ = new ::aero_type_protobuf::AERO_t_uint16Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.TicksFR)
  return ticksfr_;
}
inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* AERO_t_WheelTicks_Proto::release_ticksfr() {
  clear_has_ticksfr();
  ::aero_type_protobuf::AERO_t_uint16Status_Proto* temp = ticksfr_;
  ticksfr_ = NULL;
  return temp;
}
inline void AERO_t_WheelTicks_Proto::set_allocated_ticksfr(::aero_type_protobuf::AERO_t_uint16Status_Proto* ticksfr) {
  delete ticksfr_;
  ticksfr_ = ticksfr;
  if (ticksfr) {
    set_has_ticksfr();
  } else {
    clear_has_ticksfr();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.TicksFR)
}

// optional .aero_type_protobuf.AERO_t_uint16Status_Proto TicksRL = 4;
inline bool AERO_t_WheelTicks_Proto::has_ticksrl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_WheelTicks_Proto::set_has_ticksrl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_WheelTicks_Proto::clear_has_ticksrl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_WheelTicks_Proto::clear_ticksrl() {
  if (ticksrl_ != NULL) ticksrl_->::aero_type_protobuf::AERO_t_uint16Status_Proto::Clear();
  clear_has_ticksrl();
}
inline const ::aero_type_protobuf::AERO_t_uint16Status_Proto& AERO_t_WheelTicks_Proto::ticksrl() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.TicksRL)
  return ticksrl_ != NULL ? *ticksrl_ : *default_instance_->ticksrl_;
}
inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* AERO_t_WheelTicks_Proto::mutable_ticksrl() {
  set_has_ticksrl();
  if (ticksrl_ == NULL) ticksrl_ = new ::aero_type_protobuf::AERO_t_uint16Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.TicksRL)
  return ticksrl_;
}
inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* AERO_t_WheelTicks_Proto::release_ticksrl() {
  clear_has_ticksrl();
  ::aero_type_protobuf::AERO_t_uint16Status_Proto* temp = ticksrl_;
  ticksrl_ = NULL;
  return temp;
}
inline void AERO_t_WheelTicks_Proto::set_allocated_ticksrl(::aero_type_protobuf::AERO_t_uint16Status_Proto* ticksrl) {
  delete ticksrl_;
  ticksrl_ = ticksrl;
  if (ticksrl) {
    set_has_ticksrl();
  } else {
    clear_has_ticksrl();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.TicksRL)
}

// optional .aero_type_protobuf.AERO_t_uint16Status_Proto TicksRR = 5;
inline bool AERO_t_WheelTicks_Proto::has_ticksrr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_WheelTicks_Proto::set_has_ticksrr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_WheelTicks_Proto::clear_has_ticksrr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_WheelTicks_Proto::clear_ticksrr() {
  if (ticksrr_ != NULL) ticksrr_->::aero_type_protobuf::AERO_t_uint16Status_Proto::Clear();
  clear_has_ticksrr();
}
inline const ::aero_type_protobuf::AERO_t_uint16Status_Proto& AERO_t_WheelTicks_Proto::ticksrr() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.TicksRR)
  return ticksrr_ != NULL ? *ticksrr_ : *default_instance_->ticksrr_;
}
inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* AERO_t_WheelTicks_Proto::mutable_ticksrr() {
  set_has_ticksrr();
  if (ticksrr_ == NULL) ticksrr_ = new ::aero_type_protobuf::AERO_t_uint16Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.TicksRR)
  return ticksrr_;
}
inline ::aero_type_protobuf::AERO_t_uint16Status_Proto* AERO_t_WheelTicks_Proto::release_ticksrr() {
  clear_has_ticksrr();
  ::aero_type_protobuf::AERO_t_uint16Status_Proto* temp = ticksrr_;
  ticksrr_ = NULL;
  return temp;
}
inline void AERO_t_WheelTicks_Proto::set_allocated_ticksrr(::aero_type_protobuf::AERO_t_uint16Status_Proto* ticksrr) {
  delete ticksrr_;
  ticksrr_ = ticksrr;
  if (ticksrr) {
    set_has_ticksrr();
  } else {
    clear_has_ticksrr();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_WheelTicks_Proto.TicksRR)
}

// -------------------------------------------------------------------

// AERO_t_CS_Status_Proto

// optional uint32 u_Blinker = 1 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_blinker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_blinker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_blinker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_CS_Status_Proto::clear_u_blinker() {
  u_blinker_ = 0u;
  clear_has_u_blinker();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_blinker() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_Blinker)
  return u_blinker_;
}
inline void AERO_t_CS_Status_Proto::set_u_blinker(::google::protobuf::uint32 value) {
  set_has_u_blinker();
  u_blinker_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_Blinker)
}

// optional uint32 u_Lamps = 2 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_lamps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_lamps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_lamps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_CS_Status_Proto::clear_u_lamps() {
  u_lamps_ = 0u;
  clear_has_u_lamps();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_lamps() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_Lamps)
  return u_lamps_;
}
inline void AERO_t_CS_Status_Proto::set_u_lamps(::google::protobuf::uint32 value) {
  set_has_u_lamps();
  u_lamps_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_Lamps)
}

// optional uint32 u_WiperFront = 3 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_wiperfront() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_wiperfront() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_wiperfront() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_CS_Status_Proto::clear_u_wiperfront() {
  u_wiperfront_ = 0u;
  clear_has_u_wiperfront();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_wiperfront() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_WiperFront)
  return u_wiperfront_;
}
inline void AERO_t_CS_Status_Proto::set_u_wiperfront(::google::protobuf::uint32 value) {
  set_has_u_wiperfront();
  u_wiperfront_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_WiperFront)
}

// optional uint32 u_WiperRear = 4 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_wiperrear() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_wiperrear() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_wiperrear() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_CS_Status_Proto::clear_u_wiperrear() {
  u_wiperrear_ = 0u;
  clear_has_u_wiperrear();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_wiperrear() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_WiperRear)
  return u_wiperrear_;
}
inline void AERO_t_CS_Status_Proto::set_u_wiperrear(::google::protobuf::uint32 value) {
  set_has_u_wiperrear();
  u_wiperrear_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_WiperRear)
}

// optional uint32 u_CruiseControl = 5 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_cruisecontrol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_cruisecontrol() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_cruisecontrol() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_CS_Status_Proto::clear_u_cruisecontrol() {
  u_cruisecontrol_ = 0u;
  clear_has_u_cruisecontrol();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_cruisecontrol() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_CruiseControl)
  return u_cruisecontrol_;
}
inline void AERO_t_CS_Status_Proto::set_u_cruisecontrol(::google::protobuf::uint32 value) {
  set_has_u_cruisecontrol();
  u_cruisecontrol_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_CruiseControl)
}

// optional uint32 u_Doors = 6 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_doors() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_doors() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_doors() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AERO_t_CS_Status_Proto::clear_u_doors() {
  u_doors_ = 0u;
  clear_has_u_doors();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_doors() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_Doors)
  return u_doors_;
}
inline void AERO_t_CS_Status_Proto::set_u_doors(::google::protobuf::uint32 value) {
  set_has_u_doors();
  u_doors_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_Doors)
}

// optional uint32 u_HandsOff = 7 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_handsoff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_handsoff() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_handsoff() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AERO_t_CS_Status_Proto::clear_u_handsoff() {
  u_handsoff_ = 0u;
  clear_has_u_handsoff();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_handsoff() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_HandsOff)
  return u_handsoff_;
}
inline void AERO_t_CS_Status_Proto::set_u_handsoff(::google::protobuf::uint32 value) {
  set_has_u_handsoff();
  u_handsoff_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_HandsOff)
}

// optional uint32 u_TemperatureExt = 8 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_temperatureext() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_temperatureext() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_temperatureext() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AERO_t_CS_Status_Proto::clear_u_temperatureext() {
  u_temperatureext_ = 0u;
  clear_has_u_temperatureext();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_temperatureext() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_TemperatureExt)
  return u_temperatureext_;
}
inline void AERO_t_CS_Status_Proto::set_u_temperatureext(::google::protobuf::uint32 value) {
  set_has_u_temperatureext();
  u_temperatureext_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_TemperatureExt)
}

// optional uint32 u_OdometerTotal = 9 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_odometertotal() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_odometertotal() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_odometertotal() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AERO_t_CS_Status_Proto::clear_u_odometertotal() {
  u_odometertotal_ = 0u;
  clear_has_u_odometertotal();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_odometertotal() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_OdometerTotal)
  return u_odometertotal_;
}
inline void AERO_t_CS_Status_Proto::set_u_odometertotal(::google::protobuf::uint32 value) {
  set_has_u_odometertotal();
  u_odometertotal_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_OdometerTotal)
}

// optional uint32 u_CruiseDriverSpeed = 10 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_cruisedriverspeed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_cruisedriverspeed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_cruisedriverspeed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AERO_t_CS_Status_Proto::clear_u_cruisedriverspeed() {
  u_cruisedriverspeed_ = 0u;
  clear_has_u_cruisedriverspeed();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_cruisedriverspeed() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_CruiseDriverSpeed)
  return u_cruisedriverspeed_;
}
inline void AERO_t_CS_Status_Proto::set_u_cruisedriverspeed(::google::protobuf::uint32 value) {
  set_has_u_cruisedriverspeed();
  u_cruisedriverspeed_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_CruiseDriverSpeed)
}

// optional uint32 u_CarId = 11 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_carid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_carid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_carid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AERO_t_CS_Status_Proto::clear_u_carid() {
  u_carid_ = 0u;
  clear_has_u_carid();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_carid() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_CarId)
  return u_carid_;
}
inline void AERO_t_CS_Status_Proto::set_u_carid(::google::protobuf::uint32 value) {
  set_has_u_carid();
  u_carid_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_CarId)
}

// optional uint32 u_ParkBrakeState = 12 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_parkbrakestate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_parkbrakestate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_parkbrakestate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AERO_t_CS_Status_Proto::clear_u_parkbrakestate() {
  u_parkbrakestate_ = 0u;
  clear_has_u_parkbrakestate();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_parkbrakestate() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_ParkBrakeState)
  return u_parkbrakestate_;
}
inline void AERO_t_CS_Status_Proto::set_u_parkbrakestate(::google::protobuf::uint32 value) {
  set_has_u_parkbrakestate();
  u_parkbrakestate_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_ParkBrakeState)
}

// optional uint32 u_GearLever = 13 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_gearlever() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_gearlever() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_gearlever() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AERO_t_CS_Status_Proto::clear_u_gearlever() {
  u_gearlever_ = 0u;
  clear_has_u_gearlever();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_gearlever() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_GearLever)
  return u_gearlever_;
}
inline void AERO_t_CS_Status_Proto::set_u_gearlever(::google::protobuf::uint32 value) {
  set_has_u_gearlever();
  u_gearlever_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_GearLever)
}

// optional uint32 u_StatusSteeringActuator = 14 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_statussteeringactuator() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_statussteeringactuator() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_statussteeringactuator() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AERO_t_CS_Status_Proto::clear_u_statussteeringactuator() {
  u_statussteeringactuator_ = 0u;
  clear_has_u_statussteeringactuator();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_statussteeringactuator() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_StatusSteeringActuator)
  return u_statussteeringactuator_;
}
inline void AERO_t_CS_Status_Proto::set_u_statussteeringactuator(::google::protobuf::uint32 value) {
  set_has_u_statussteeringactuator();
  u_statussteeringactuator_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_StatusSteeringActuator)
}

// optional uint32 u_StatusAnalogboosterActuator = 15 [default = 0];
inline bool AERO_t_CS_Status_Proto::has_u_statusanalogboosteractuator() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AERO_t_CS_Status_Proto::set_has_u_statusanalogboosteractuator() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AERO_t_CS_Status_Proto::clear_has_u_statusanalogboosteractuator() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AERO_t_CS_Status_Proto::clear_u_statusanalogboosteractuator() {
  u_statusanalogboosteractuator_ = 0u;
  clear_has_u_statusanalogboosteractuator();
}
inline ::google::protobuf::uint32 AERO_t_CS_Status_Proto::u_statusanalogboosteractuator() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_StatusAnalogboosterActuator)
  return u_statusanalogboosteractuator_;
}
inline void AERO_t_CS_Status_Proto::set_u_statusanalogboosteractuator(::google::protobuf::uint32 value) {
  set_has_u_statusanalogboosteractuator();
  u_statusanalogboosteractuator_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Status_Proto.u_StatusAnalogboosterActuator)
}

// -------------------------------------------------------------------

// AERO_t_CS_Signal_Proto

// optional uint32 u_Blinker = 1 [default = 0];
inline bool AERO_t_CS_Signal_Proto::has_u_blinker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_CS_Signal_Proto::set_has_u_blinker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_CS_Signal_Proto::clear_has_u_blinker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_CS_Signal_Proto::clear_u_blinker() {
  u_blinker_ = 0u;
  clear_has_u_blinker();
}
inline ::google::protobuf::uint32 AERO_t_CS_Signal_Proto::u_blinker() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_Blinker)
  return u_blinker_;
}
inline void AERO_t_CS_Signal_Proto::set_u_blinker(::google::protobuf::uint32 value) {
  set_has_u_blinker();
  u_blinker_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_Blinker)
}

// optional uint32 u_Lamps = 2 [default = 0];
inline bool AERO_t_CS_Signal_Proto::has_u_lamps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_CS_Signal_Proto::set_has_u_lamps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_CS_Signal_Proto::clear_has_u_lamps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_CS_Signal_Proto::clear_u_lamps() {
  u_lamps_ = 0u;
  clear_has_u_lamps();
}
inline ::google::protobuf::uint32 AERO_t_CS_Signal_Proto::u_lamps() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_Lamps)
  return u_lamps_;
}
inline void AERO_t_CS_Signal_Proto::set_u_lamps(::google::protobuf::uint32 value) {
  set_has_u_lamps();
  u_lamps_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_Lamps)
}

// optional uint32 u_WiperFront = 3 [default = 0];
inline bool AERO_t_CS_Signal_Proto::has_u_wiperfront() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_CS_Signal_Proto::set_has_u_wiperfront() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_CS_Signal_Proto::clear_has_u_wiperfront() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_CS_Signal_Proto::clear_u_wiperfront() {
  u_wiperfront_ = 0u;
  clear_has_u_wiperfront();
}
inline ::google::protobuf::uint32 AERO_t_CS_Signal_Proto::u_wiperfront() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_WiperFront)
  return u_wiperfront_;
}
inline void AERO_t_CS_Signal_Proto::set_u_wiperfront(::google::protobuf::uint32 value) {
  set_has_u_wiperfront();
  u_wiperfront_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_WiperFront)
}

// optional uint32 u_WiperRear = 4 [default = 0];
inline bool AERO_t_CS_Signal_Proto::has_u_wiperrear() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_CS_Signal_Proto::set_has_u_wiperrear() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_CS_Signal_Proto::clear_has_u_wiperrear() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_CS_Signal_Proto::clear_u_wiperrear() {
  u_wiperrear_ = 0u;
  clear_has_u_wiperrear();
}
inline ::google::protobuf::uint32 AERO_t_CS_Signal_Proto::u_wiperrear() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_WiperRear)
  return u_wiperrear_;
}
inline void AERO_t_CS_Signal_Proto::set_u_wiperrear(::google::protobuf::uint32 value) {
  set_has_u_wiperrear();
  u_wiperrear_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_WiperRear)
}

// optional uint32 u_CruiseControl = 5 [default = 0];
inline bool AERO_t_CS_Signal_Proto::has_u_cruisecontrol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AERO_t_CS_Signal_Proto::set_has_u_cruisecontrol() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AERO_t_CS_Signal_Proto::clear_has_u_cruisecontrol() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AERO_t_CS_Signal_Proto::clear_u_cruisecontrol() {
  u_cruisecontrol_ = 0u;
  clear_has_u_cruisecontrol();
}
inline ::google::protobuf::uint32 AERO_t_CS_Signal_Proto::u_cruisecontrol() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_CruiseControl)
  return u_cruisecontrol_;
}
inline void AERO_t_CS_Signal_Proto::set_u_cruisecontrol(::google::protobuf::uint32 value) {
  set_has_u_cruisecontrol();
  u_cruisecontrol_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_CruiseControl)
}

// optional uint32 u_Doors = 6 [default = 0];
inline bool AERO_t_CS_Signal_Proto::has_u_doors() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AERO_t_CS_Signal_Proto::set_has_u_doors() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AERO_t_CS_Signal_Proto::clear_has_u_doors() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AERO_t_CS_Signal_Proto::clear_u_doors() {
  u_doors_ = 0u;
  clear_has_u_doors();
}
inline ::google::protobuf::uint32 AERO_t_CS_Signal_Proto::u_doors() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_Doors)
  return u_doors_;
}
inline void AERO_t_CS_Signal_Proto::set_u_doors(::google::protobuf::uint32 value) {
  set_has_u_doors();
  u_doors_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_Doors)
}

// optional sint32 s_TemperatureExt = 7 [default = 0];
inline bool AERO_t_CS_Signal_Proto::has_s_temperatureext() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AERO_t_CS_Signal_Proto::set_has_s_temperatureext() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AERO_t_CS_Signal_Proto::clear_has_s_temperatureext() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AERO_t_CS_Signal_Proto::clear_s_temperatureext() {
  s_temperatureext_ = 0;
  clear_has_s_temperatureext();
}
inline ::google::protobuf::int32 AERO_t_CS_Signal_Proto::s_temperatureext() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.s_TemperatureExt)
  return s_temperatureext_;
}
inline void AERO_t_CS_Signal_Proto::set_s_temperatureext(::google::protobuf::int32 value) {
  set_has_s_temperatureext();
  s_temperatureext_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.s_TemperatureExt)
}

// optional uint32 u_CarId = 8 [default = 0];
inline bool AERO_t_CS_Signal_Proto::has_u_carid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AERO_t_CS_Signal_Proto::set_has_u_carid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AERO_t_CS_Signal_Proto::clear_has_u_carid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AERO_t_CS_Signal_Proto::clear_u_carid() {
  u_carid_ = 0u;
  clear_has_u_carid();
}
inline ::google::protobuf::uint32 AERO_t_CS_Signal_Proto::u_carid() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_CarId)
  return u_carid_;
}
inline void AERO_t_CS_Signal_Proto::set_u_carid(::google::protobuf::uint32 value) {
  set_has_u_carid();
  u_carid_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_CarId)
}

// optional uint32 u_ParkBrakeState = 9 [default = 0];
inline bool AERO_t_CS_Signal_Proto::has_u_parkbrakestate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AERO_t_CS_Signal_Proto::set_has_u_parkbrakestate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AERO_t_CS_Signal_Proto::clear_has_u_parkbrakestate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AERO_t_CS_Signal_Proto::clear_u_parkbrakestate() {
  u_parkbrakestate_ = 0u;
  clear_has_u_parkbrakestate();
}
inline ::google::protobuf::uint32 AERO_t_CS_Signal_Proto::u_parkbrakestate() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_ParkBrakeState)
  return u_parkbrakestate_;
}
inline void AERO_t_CS_Signal_Proto::set_u_parkbrakestate(::google::protobuf::uint32 value) {
  set_has_u_parkbrakestate();
  u_parkbrakestate_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_ParkBrakeState)
}

// optional uint32 u_GearLever = 10 [default = 0];
inline bool AERO_t_CS_Signal_Proto::has_u_gearlever() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AERO_t_CS_Signal_Proto::set_has_u_gearlever() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AERO_t_CS_Signal_Proto::clear_has_u_gearlever() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AERO_t_CS_Signal_Proto::clear_u_gearlever() {
  u_gearlever_ = 0u;
  clear_has_u_gearlever();
}
inline ::google::protobuf::uint32 AERO_t_CS_Signal_Proto::u_gearlever() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_GearLever)
  return u_gearlever_;
}
inline void AERO_t_CS_Signal_Proto::set_u_gearlever(::google::protobuf::uint32 value) {
  set_has_u_gearlever();
  u_gearlever_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_GearLever)
}

// optional uint32 u_StatusSteeringActuator = 11 [default = 0];
inline bool AERO_t_CS_Signal_Proto::has_u_statussteeringactuator() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AERO_t_CS_Signal_Proto::set_has_u_statussteeringactuator() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AERO_t_CS_Signal_Proto::clear_has_u_statussteeringactuator() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AERO_t_CS_Signal_Proto::clear_u_statussteeringactuator() {
  u_statussteeringactuator_ = 0u;
  clear_has_u_statussteeringactuator();
}
inline ::google::protobuf::uint32 AERO_t_CS_Signal_Proto::u_statussteeringactuator() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_StatusSteeringActuator)
  return u_statussteeringactuator_;
}
inline void AERO_t_CS_Signal_Proto::set_u_statussteeringactuator(::google::protobuf::uint32 value) {
  set_has_u_statussteeringactuator();
  u_statussteeringactuator_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_StatusSteeringActuator)
}

// optional uint32 u_StatusAnalogboosterActuator = 12 [default = 0];
inline bool AERO_t_CS_Signal_Proto::has_u_statusanalogboosteractuator() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AERO_t_CS_Signal_Proto::set_has_u_statusanalogboosteractuator() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AERO_t_CS_Signal_Proto::clear_has_u_statusanalogboosteractuator() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AERO_t_CS_Signal_Proto::clear_u_statusanalogboosteractuator() {
  u_statusanalogboosteractuator_ = 0u;
  clear_has_u_statusanalogboosteractuator();
}
inline ::google::protobuf::uint32 AERO_t_CS_Signal_Proto::u_statusanalogboosteractuator() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_StatusAnalogboosterActuator)
  return u_statusanalogboosteractuator_;
}
inline void AERO_t_CS_Signal_Proto::set_u_statusanalogboosteractuator(::google::protobuf::uint32 value) {
  set_has_u_statusanalogboosteractuator();
  u_statusanalogboosteractuator_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_CS_Signal_Proto.u_StatusAnalogboosterActuator)
}

// -------------------------------------------------------------------

// AERO_t_CarSwitches_Proto

// optional .aero_type_protobuf.AERO_t_s_Timestamp_Proto Timestamp = 1;
inline bool AERO_t_CarSwitches_Proto::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_CarSwitches_Proto::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_CarSwitches_Proto::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_CarSwitches_Proto::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::aero_type_protobuf::AERO_t_s_Timestamp_Proto::Clear();
  clear_has_timestamp();
}
inline const ::aero_type_protobuf::AERO_t_s_Timestamp_Proto& AERO_t_CarSwitches_Proto::timestamp() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto.Timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_CarSwitches_Proto::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::aero_type_protobuf::AERO_t_s_Timestamp_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto.Timestamp)
  return timestamp_;
}
inline ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* AERO_t_CarSwitches_Proto::release_timestamp() {
  clear_has_timestamp();
  ::aero_type_protobuf::AERO_t_s_Timestamp_Proto* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void AERO_t_CarSwitches_Proto::set_allocated_timestamp(::aero_type_protobuf::AERO_t_s_Timestamp_Proto* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto.Timestamp)
}

// optional .aero_type_protobuf.AERO_t_booleanStatus_Proto handsOff = 2;
inline bool AERO_t_CarSwitches_Proto::has_handsoff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_CarSwitches_Proto::set_has_handsoff() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_CarSwitches_Proto::clear_has_handsoff() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_CarSwitches_Proto::clear_handsoff() {
  if (handsoff_ != NULL) handsoff_->::aero_type_protobuf::AERO_t_booleanStatus_Proto::Clear();
  clear_has_handsoff();
}
inline const ::aero_type_protobuf::AERO_t_booleanStatus_Proto& AERO_t_CarSwitches_Proto::handsoff() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto.handsOff)
  return handsoff_ != NULL ? *handsoff_ : *default_instance_->handsoff_;
}
inline ::aero_type_protobuf::AERO_t_booleanStatus_Proto* AERO_t_CarSwitches_Proto::mutable_handsoff() {
  set_has_handsoff();
  if (handsoff_ == NULL) handsoff_ = new ::aero_type_protobuf::AERO_t_booleanStatus_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto.handsOff)
  return handsoff_;
}
inline ::aero_type_protobuf::AERO_t_booleanStatus_Proto* AERO_t_CarSwitches_Proto::release_handsoff() {
  clear_has_handsoff();
  ::aero_type_protobuf::AERO_t_booleanStatus_Proto* temp = handsoff_;
  handsoff_ = NULL;
  return temp;
}
inline void AERO_t_CarSwitches_Proto::set_allocated_handsoff(::aero_type_protobuf::AERO_t_booleanStatus_Proto* handsoff) {
  delete handsoff_;
  handsoff_ = handsoff;
  if (handsoff) {
    set_has_handsoff();
  } else {
    clear_has_handsoff();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto.handsOff)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto f_OdometerTotal = 3;
inline bool AERO_t_CarSwitches_Proto::has_f_odometertotal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_CarSwitches_Proto::set_has_f_odometertotal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_CarSwitches_Proto::clear_has_f_odometertotal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_CarSwitches_Proto::clear_f_odometertotal() {
  if (f_odometertotal_ != NULL) f_odometertotal_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_f_odometertotal();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_CarSwitches_Proto::f_odometertotal() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto.f_OdometerTotal)
  return f_odometertotal_ != NULL ? *f_odometertotal_ : *default_instance_->f_odometertotal_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_CarSwitches_Proto::mutable_f_odometertotal() {
  set_has_f_odometertotal();
  if (f_odometertotal_ == NULL) f_odometertotal_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto.f_OdometerTotal)
  return f_odometertotal_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_CarSwitches_Proto::release_f_odometertotal() {
  clear_has_f_odometertotal();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = f_odometertotal_;
  f_odometertotal_ = NULL;
  return temp;
}
inline void AERO_t_CarSwitches_Proto::set_allocated_f_odometertotal(::aero_type_protobuf::AERO_t_float32Status_Proto* f_odometertotal) {
  delete f_odometertotal_;
  f_odometertotal_ = f_odometertotal;
  if (f_odometertotal) {
    set_has_f_odometertotal();
  } else {
    clear_has_f_odometertotal();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto.f_OdometerTotal)
}

// optional .aero_type_protobuf.AERO_t_float32Status_Proto f_CruiseDriverSpeed = 4;
inline bool AERO_t_CarSwitches_Proto::has_f_cruisedriverspeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AERO_t_CarSwitches_Proto::set_has_f_cruisedriverspeed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AERO_t_CarSwitches_Proto::clear_has_f_cruisedriverspeed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AERO_t_CarSwitches_Proto::clear_f_cruisedriverspeed() {
  if (f_cruisedriverspeed_ != NULL) f_cruisedriverspeed_->::aero_type_protobuf::AERO_t_float32Status_Proto::Clear();
  clear_has_f_cruisedriverspeed();
}
inline const ::aero_type_protobuf::AERO_t_float32Status_Proto& AERO_t_CarSwitches_Proto::f_cruisedriverspeed() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto.f_CruiseDriverSpeed)
  return f_cruisedriverspeed_ != NULL ? *f_cruisedriverspeed_ : *default_instance_->f_cruisedriverspeed_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_CarSwitches_Proto::mutable_f_cruisedriverspeed() {
  set_has_f_cruisedriverspeed();
  if (f_cruisedriverspeed_ == NULL) f_cruisedriverspeed_ = new ::aero_type_protobuf::AERO_t_float32Status_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto.f_CruiseDriverSpeed)
  return f_cruisedriverspeed_;
}
inline ::aero_type_protobuf::AERO_t_float32Status_Proto* AERO_t_CarSwitches_Proto::release_f_cruisedriverspeed() {
  clear_has_f_cruisedriverspeed();
  ::aero_type_protobuf::AERO_t_float32Status_Proto* temp = f_cruisedriverspeed_;
  f_cruisedriverspeed_ = NULL;
  return temp;
}
inline void AERO_t_CarSwitches_Proto::set_allocated_f_cruisedriverspeed(::aero_type_protobuf::AERO_t_float32Status_Proto* f_cruisedriverspeed) {
  delete f_cruisedriverspeed_;
  f_cruisedriverspeed_ = f_cruisedriverspeed;
  if (f_cruisedriverspeed) {
    set_has_f_cruisedriverspeed();
  } else {
    clear_has_f_cruisedriverspeed();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_CarSwitches_Proto.f_CruiseDriverSpeed)
}

// -------------------------------------------------------------------

// AERO_t_VehiclePose_Proto

// optional .aero_type_protobuf.AERO_t_SignalHeader_Proto SignalHeader = 1;
inline bool AERO_t_VehiclePose_Proto::has_signalheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AERO_t_VehiclePose_Proto::set_has_signalheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AERO_t_VehiclePose_Proto::clear_has_signalheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AERO_t_VehiclePose_Proto::clear_signalheader() {
  if (signalheader_ != NULL) signalheader_->::aero_type_protobuf::AERO_t_SignalHeader_Proto::Clear();
  clear_has_signalheader();
}
inline const ::aero_type_protobuf::AERO_t_SignalHeader_Proto& AERO_t_VehiclePose_Proto::signalheader() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehiclePose_Proto.SignalHeader)
  return signalheader_ != NULL ? *signalheader_ : *default_instance_->signalheader_;
}
inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* AERO_t_VehiclePose_Proto::mutable_signalheader() {
  set_has_signalheader();
  if (signalheader_ == NULL) signalheader_ = new ::aero_type_protobuf::AERO_t_SignalHeader_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehiclePose_Proto.SignalHeader)
  return signalheader_;
}
inline ::aero_type_protobuf::AERO_t_SignalHeader_Proto* AERO_t_VehiclePose_Proto::release_signalheader() {
  clear_has_signalheader();
  ::aero_type_protobuf::AERO_t_SignalHeader_Proto* temp = signalheader_;
  signalheader_ = NULL;
  return temp;
}
inline void AERO_t_VehiclePose_Proto::set_allocated_signalheader(::aero_type_protobuf::AERO_t_SignalHeader_Proto* signalheader) {
  delete signalheader_;
  signalheader_ = signalheader;
  if (signalheader) {
    set_has_signalheader();
  } else {
    clear_has_signalheader();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_VehiclePose_Proto.SignalHeader)
}

// optional .aero_type_protobuf.AERO_t_Pose2D_Proto Pose = 2;
inline bool AERO_t_VehiclePose_Proto::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AERO_t_VehiclePose_Proto::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AERO_t_VehiclePose_Proto::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AERO_t_VehiclePose_Proto::clear_pose() {
  if (pose_ != NULL) pose_->::aero_type_protobuf::AERO_t_Pose2D_Proto::Clear();
  clear_has_pose();
}
inline const ::aero_type_protobuf::AERO_t_Pose2D_Proto& AERO_t_VehiclePose_Proto::pose() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehiclePose_Proto.Pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::aero_type_protobuf::AERO_t_Pose2D_Proto* AERO_t_VehiclePose_Proto::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::aero_type_protobuf::AERO_t_Pose2D_Proto;
  // @@protoc_insertion_point(field_mutable:aero_vehicle_data_protobuf.AERO_t_VehiclePose_Proto.Pose)
  return pose_;
}
inline ::aero_type_protobuf::AERO_t_Pose2D_Proto* AERO_t_VehiclePose_Proto::release_pose() {
  clear_has_pose();
  ::aero_type_protobuf::AERO_t_Pose2D_Proto* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void AERO_t_VehiclePose_Proto::set_allocated_pose(::aero_type_protobuf::AERO_t_Pose2D_Proto* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:aero_vehicle_data_protobuf.AERO_t_VehiclePose_Proto.Pose)
}

// optional float f_SlipAngleRA = 4;
inline bool AERO_t_VehiclePose_Proto::has_f_slipanglera() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AERO_t_VehiclePose_Proto::set_has_f_slipanglera() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AERO_t_VehiclePose_Proto::clear_has_f_slipanglera() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AERO_t_VehiclePose_Proto::clear_f_slipanglera() {
  f_slipanglera_ = 0;
  clear_has_f_slipanglera();
}
inline float AERO_t_VehiclePose_Proto::f_slipanglera() const {
  // @@protoc_insertion_point(field_get:aero_vehicle_data_protobuf.AERO_t_VehiclePose_Proto.f_SlipAngleRA)
  return f_slipanglera_;
}
inline void AERO_t_VehiclePose_Proto::set_f_slipanglera(float value) {
  set_has_f_slipanglera();
  f_slipanglera_ = value;
  // @@protoc_insertion_point(field_set:aero_vehicle_data_protobuf.AERO_t_VehiclePose_Proto.f_SlipAngleRA)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace aero_vehicle_data_protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aero_vehicle_data_protobuf::AERO_t_PT_Gear_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_vehicle_data_protobuf::AERO_t_PT_Gear_Proto>() {
  return ::aero_vehicle_data_protobuf::AERO_t_PT_Gear_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto>() {
  return ::aero_vehicle_data_protobuf::AERO_t_ABSECS_State_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_vehicle_data_protobuf::AERO_t_CS_Wiper_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_vehicle_data_protobuf::AERO_t_CS_Wiper_Proto>() {
  return ::aero_vehicle_data_protobuf::AERO_t_CS_Wiper_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_vehicle_data_protobuf::AERO_t_CS_Blinker_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_vehicle_data_protobuf::AERO_t_CS_Blinker_Proto>() {
  return ::aero_vehicle_data_protobuf::AERO_t_CS_Blinker_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_vehicle_data_protobuf::AERO_t_CS_Lamps_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_vehicle_data_protobuf::AERO_t_CS_Lamps_Proto>() {
  return ::aero_vehicle_data_protobuf::AERO_t_CS_Lamps_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_vehicle_data_protobuf::AERO_t_CS_Doors_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_vehicle_data_protobuf::AERO_t_CS_Doors_Proto>() {
  return ::aero_vehicle_data_protobuf::AERO_t_CS_Doors_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_vehicle_data_protobuf::AERO_t_CS_CruiseControl_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_vehicle_data_protobuf::AERO_t_CS_CruiseControl_Proto>() {
  return ::aero_vehicle_data_protobuf::AERO_t_CS_CruiseControl_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_vehicle_data_protobuf::AERO_t_CS_ParkBarke_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_vehicle_data_protobuf::AERO_t_CS_ParkBarke_Proto>() {
  return ::aero_vehicle_data_protobuf::AERO_t_CS_ParkBarke_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_vehicle_data_protobuf::AERO_t_CS_GearLever_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_vehicle_data_protobuf::AERO_t_CS_GearLever_Proto>() {
  return ::aero_vehicle_data_protobuf::AERO_t_CS_GearLever_Proto_descriptor();
}
template <> struct is_proto_enum< ::aero_vehicle_data_protobuf::AERO_t_CS_ActuatorStatus_Proto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aero_vehicle_data_protobuf::AERO_t_CS_ActuatorStatus_Proto>() {
  return ::aero_vehicle_data_protobuf::AERO_t_CS_ActuatorStatus_Proto_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_aero_5fvehicle_5fdata_2eproto__INCLUDED
